name: 🚀 Deploy (Stage 3 & 4)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  pre-deploy-tests:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nailit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🗄️ Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nailit_test
      run: |
        npx prisma db push --force-reset
        npm run db:seed

    - name: 🔍 Type checking
      run: npm run type-check

    - name: 🧹 Lint code
      run: npm run lint:check

    - name: 🧪 Run complete test suite
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nailit_test
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000
      run: npm run test:ci:all

    - name: 🏗️ Build application
      env:
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      run: npm run build

    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          .next/
          coverage/
          test-results/

  deploy-staging:
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    needs: pre-deploy-tests
    environment: staging
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: 🚀 Deploy to Staging
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Deploy to staging environment
        echo "Deploying to staging..."
        # Add your staging deployment commands here
        # e.g., CDK deploy, Docker push, etc.

    - name: 🏥 Post-deploy health check
      run: |
        # Wait for deployment to be ready
        sleep 30
        # Run health checks
        curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1

  deploy-production:
    if: github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    needs: [pre-deploy-tests, deploy-staging]
    environment: production
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: 🚀 Deploy to Production
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Deploy to production environment
        echo "Deploying to production..."
        # Add your production deployment commands here

    - name: 🏥 Post-deploy health check
      run: |
        # Wait for deployment to be ready
        sleep 30
        # Run health checks
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

  smoke-tests:
    if: always() && needs.deploy-staging.result == 'success'
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🔥 Run smoke tests
      env:
        TEST_URL: ${{ secrets.STAGING_URL }}
      run: npm run test:ci:smoke

    - name: 📊 Upload smoke test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: smoke-test-results
        path: test-results/ 