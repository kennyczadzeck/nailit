name: Docker Build and Deploy

on:
  push:
    branches: [develop, staging, main]
  pull_request:
    branches: [develop, staging, main]

env:
  AWS_REGION: us-east-1

jobs:
  build-and-deploy-dev:
    name: Build and Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate build metadata
      id: meta
      run: |
        echo "build_time=$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')" >> $GITHUB_OUTPUT
        echo "commit_hash=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        echo "image_tag=${GITHUB_SHA:0:8}-$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/nailit-dev:${{ steps.meta.outputs.image_tag }}
          ${{ steps.login-ecr.outputs.registry }}/nailit-dev:latest
        build-args: |
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          NEXT_PUBLIC_BUILD_TIME=${{ steps.meta.outputs.build_time }}
          NAILIT_ENVIRONMENT=development
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Update App Runner service
      run: |
        SERVICE_ARN=$(aws apprunner list-services \
          --query "ServiceSummaryList[?ServiceName=='nailit-dev'].ServiceArn" \
          --output text)
        
        if [ -n "$SERVICE_ARN" ]; then
          echo "Updating App Runner service: $SERVICE_ARN"
          aws apprunner start-deployment \
            --service-arn "$SERVICE_ARN" \
            --no-cli-pager
          echo "Deployment started for development environment"
        else
          echo "No App Runner service found for development environment"
        fi

    - name: Output deployment info
      run: |
        echo "ðŸš€ Deployment Summary:"
        echo "Environment: development"
        echo "Image: ${{ steps.login-ecr.outputs.registry }}/nailit-dev:${{ steps.meta.outputs.image_tag }}"
        echo "Commit: ${{ steps.meta.outputs.commit_hash }}"
        echo "Build Time: ${{ steps.meta.outputs.build_time }}"

  build-and-deploy-staging:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate build metadata
      id: meta
      run: |
        echo "build_time=$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')" >> $GITHUB_OUTPUT
        echo "commit_hash=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        echo "image_tag=${GITHUB_SHA:0:8}-$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/nailit-staging:${{ steps.meta.outputs.image_tag }}
          ${{ steps.login-ecr.outputs.registry }}/nailit-staging:latest
        build-args: |
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          NEXT_PUBLIC_BUILD_TIME=${{ steps.meta.outputs.build_time }}
          NAILIT_ENVIRONMENT=staging
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Update App Runner service
      run: |
        SERVICE_ARN=$(aws apprunner list-services \
          --query "ServiceSummaryList[?ServiceName=='nailit-staging'].ServiceArn" \
          --output text)
        
        if [ -n "$SERVICE_ARN" ]; then
          echo "Updating App Runner service: $SERVICE_ARN"
          aws apprunner start-deployment \
            --service-arn "$SERVICE_ARN" \
            --no-cli-pager
          echo "Deployment started for staging environment"
        else
          echo "No App Runner service found for staging environment"
        fi

    - name: Output deployment info
      run: |
        echo "ðŸš€ Deployment Summary:"
        echo "Environment: staging"
        echo "Image: ${{ steps.login-ecr.outputs.registry }}/nailit-staging:${{ steps.meta.outputs.image_tag }}"
        echo "Commit: ${{ steps.meta.outputs.commit_hash }}"
        echo "Build Time: ${{ steps.meta.outputs.build_time }}"

  build-and-deploy-prod:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate build metadata
      id: meta
      run: |
        echo "build_time=$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')" >> $GITHUB_OUTPUT
        echo "commit_hash=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
        echo "image_tag=${GITHUB_SHA:0:8}-$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/nailit-prod:${{ steps.meta.outputs.image_tag }}
          ${{ steps.login-ecr.outputs.registry }}/nailit-prod:latest
        build-args: |
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
          NEXT_PUBLIC_BUILD_TIME=${{ steps.meta.outputs.build_time }}
          NAILIT_ENVIRONMENT=production
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Update App Runner service
      run: |
        SERVICE_ARN=$(aws apprunner list-services \
          --query "ServiceSummaryList[?ServiceName=='nailit-prod'].ServiceArn" \
          --output text)
        
        if [ -n "$SERVICE_ARN" ]; then
          echo "Updating App Runner service: $SERVICE_ARN"
          aws apprunner start-deployment \
            --service-arn "$SERVICE_ARN" \
            --no-cli-pager
          echo "Deployment started for production environment"
        else
          echo "No App Runner service found for production environment"
        fi

    - name: Output deployment info
      run: |
        echo "ðŸš€ Deployment Summary:"
        echo "Environment: production"
        echo "Image: ${{ steps.login-ecr.outputs.registry }}/nailit-prod:${{ steps.meta.outputs.image_tag }}"
        echo "Commit: ${{ steps.meta.outputs.commit_hash }}"
        echo "Build Time: ${{ steps.meta.outputs.build_time }}" 