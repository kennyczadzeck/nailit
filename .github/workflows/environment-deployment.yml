name: üöÄ Deployment Pipeline

on:
  push:
    branches: [main, staging, develop]

env:
  NODE_VERSION: '20'

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      deploy: ${{ steps.detect.outputs.deploy }}
    steps:
      - name: Detect Environment
        id: detect
        run: |
          BRANCH="${{ github.ref_name }}"
          
          if [[ "$BRANCH" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=feature" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Lint
        run: npm run lint:ci
        
      - name: Type Check
        run: npm run type-check

  validate-schema:
    runs-on: ubuntu-latest
    needs: [detect-environment]
    if: needs.detect-environment.outputs.environment != 'feature'
    environment: ${{ needs.detect-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Validate Prisma Schema
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_MIGRATION_URL: ${{ secrets.DATABASE_MIGRATION_URL }}
        run: npx prisma validate
        
      - name: Generate Prisma Client
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_MIGRATION_URL: ${{ secrets.DATABASE_MIGRATION_URL }}
        run: npx prisma generate
        
      - name: Test Database Connection
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_MIGRATION_URL: ${{ secrets.DATABASE_MIGRATION_URL }}
        run: echo "SELECT 1;" | npx prisma db execute --stdin --schema prisma/schema.prisma

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [detect-environment, code-quality, validate-schema]
    if: always() && needs.detect-environment.outputs.deploy == 'true'
    steps:
      - name: Deployment Status
        run: |
          echo "üöÄ Ready to deploy to: ${{ needs.detect-environment.outputs.environment }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üìã Next steps:"
          echo "  1. Ensure AWS Amplify environment is configured"
          echo "  2. Ensure Neon database branch exists"
          echo "  3. Configure environment variables in AWS Amplify"
          
          if [[ "${{ needs.detect-environment.outputs.environment }}" == "production" ]]; then
            echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT"
            echo "  ‚Ä¢ Ensure staging tests passed"
            echo "  ‚Ä¢ Database migration review completed"
            echo "  ‚Ä¢ Backup verification completed"
          fi

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [detect-environment, code-quality, validate-schema]
    if: failure()
    steps:
      - name: Deployment Failure
        run: |
          echo "‚ùå Deployment checks failed for: ${{ needs.detect-environment.outputs.environment }}"
          echo "üîç Review the failed jobs above"
          echo "üìã Common issues:"
          echo "  ‚Ä¢ Linting errors"
          echo "  ‚Ä¢ TypeScript compilation errors"  
          echo "  ‚Ä¢ Prisma schema validation errors"
          echo "  ‚Ä¢ Database connectivity issues" 