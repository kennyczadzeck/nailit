name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [main, staging, develop]

env:
  NODE_VERSION: '20'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: 🧹 Lint code
        run: npm run lint:ci
        
      - name: 🔍 Type check
        run: npm run type-check
      
      - name: ✅ Generate Prisma Client
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder_db
          DATABASE_MIGRATION_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder_db
        run: npx prisma generate
        
      - name: ✅ Validate Prisma Schema
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder_db
          DATABASE_MIGRATION_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder_db
        run: npx prisma validate

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run unit tests
        run: npm run test:ci:fast

  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nailit_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nailit_test
          DATABASE_MIGRATION_URL: postgresql://postgres:postgres@localhost:5432/nailit_test
        run: |
          npx prisma db push --force-reset
          npm run db:seed

      - name: 🔗 Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nailit_test
          DATABASE_MIGRATION_URL: postgresql://postgres:postgres@localhost:5432/nailit_test
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: npm run test:ci:integration

  bdd-tests:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🎭 Run BDD feature tests
        env:
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: npm run test:bdd

  pr-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, bdd-tests]
    if: always()
    steps:
      - name: 📊 PR Validation Summary
        run: |
          echo "## 🔍 Pull Request Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Branch:** ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Branch:** ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Checks:" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality (lint, type-check, schema validation)" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests (with test database)" >> $GITHUB_STEP_SUMMARY
          echo "- BDD Feature Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security:" >> $GITHUB_STEP_SUMMARY
          echo "- No production environment secrets accessed" >> $GITHUB_STEP_SUMMARY
          echo "- Database connectivity testing deferred to deployment pipeline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**✅ Ready for merge!** All validation checks passed." 