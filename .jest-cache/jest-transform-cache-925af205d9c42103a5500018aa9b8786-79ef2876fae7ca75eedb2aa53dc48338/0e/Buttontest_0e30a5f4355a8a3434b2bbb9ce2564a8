91d4ec86f963ce52506a6346c02eefb4
/**
 * Unit Tests for Button Component
 * Tests component behavior with centralized fixtures
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _Button = require("../../../app/components/ui/Button");
const _fixtures = require("../../fixtures");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Button Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Basic rendering', ()=>{
        test('renders with default props', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Click me"
            }));
            const button = _react1.screen.getByRole('button', {
                name: /click me/i
            });
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass('bg-[#34A853]') // primary variant
            ;
            expect(button).toHaveClass('px-4', 'py-2') // md size
            ;
        });
        test('renders with different variants', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                variant: "secondary",
                children: "Secondary"
            }));
            expect(_react1.screen.getByRole('button')).toHaveClass('bg-[#1A73E8]');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                variant: "outline",
                children: "Outline"
            }));
            expect(_react1.screen.getByRole('button')).toHaveClass('border', 'border-gray-300');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                variant: "ghost",
                children: "Ghost"
            }));
            expect(_react1.screen.getByRole('button')).toHaveClass('text-gray-700', 'hover:bg-gray-100');
        });
        test('renders with different sizes', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                size: "sm",
                children: "Small"
            }));
            expect(_react1.screen.getByRole('button')).toHaveClass('px-3', 'py-1.5', 'text-sm');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                size: "lg",
                children: "Large"
            }));
            expect(_react1.screen.getByRole('button')).toHaveClass('px-6', 'py-3', 'text-base');
        });
        test('applies custom className', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                className: "custom-class",
                children: "Custom"
            }));
            expect(_react1.screen.getByRole('button')).toHaveClass('custom-class');
        });
    });
    describe('Interactive behavior', ()=>{
        test('handles click events', ()=>{
            const handleClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                onClick: handleClick,
                children: "Clickable"
            }));
            _react1.fireEvent.click(_react1.screen.getByRole('button'));
            expect(handleClick).toHaveBeenCalledTimes(1);
        });
        test('passes through HTML button attributes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                disabled: true,
                type: "submit",
                "data-testid": "submit-btn",
                children: "Submit"
            }));
            const button = _react1.screen.getByTestId('submit-btn');
            expect(button).toBeDisabled();
            expect(button).toHaveAttribute('type', 'submit');
        });
        test('applies disabled styles when disabled', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                disabled: true,
                children: "Disabled"
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toBeDisabled();
            expect(button).toHaveClass('disabled:opacity-50', 'disabled:pointer-events-none');
        });
    });
    describe('Accessibility', ()=>{
        test('has proper accessibility attributes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Accessible Button"
            }));
            const button = _react1.screen.getByRole('button');
            expect(button).toHaveClass('focus:outline-none', 'focus:ring-2', 'focus:ring-offset-2');
        });
        test('preserves custom attributes', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                "data-testid": "custom-button",
                "aria-label": "Custom button",
                children: "Button"
            }));
            const button = _react1.screen.getByTestId('custom-button');
            expect(button).toHaveAttribute('aria-label', 'Custom button');
        });
    });
    describe('Text pattern validation using centralized fixtures', ()=>{
        test('button text follows expected patterns', ()=>{
            const buttonTexts = [
                'Create',
                'Save',
                'Cancel',
                'Delete',
                'Edit'
            ];
            buttonTexts.forEach((text)=>{
                expect(text).toMatch(_fixtures.testPatterns.ui.buttonText);
            });
        });
        test('can render buttons with standard action text', ()=>{
            const standardActions = [
                'Create',
                'Save',
                'Cancel'
            ];
            standardActions.forEach((action)=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    children: action
                }));
                expect(_react1.screen.getByRole('button', {
                    name: action
                })).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,