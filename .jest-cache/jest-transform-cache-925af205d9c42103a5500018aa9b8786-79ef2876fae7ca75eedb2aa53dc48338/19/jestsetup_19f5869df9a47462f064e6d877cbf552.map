{"version":3,"sources":["/Users/kennyc/code/personal/nailit/jest.setup.js"],"sourcesContent":["import '@testing-library/jest-dom'\n\n// Polyfill for Next.js API routes\nimport { TextEncoder, TextDecoder } from 'util'\nglobal.TextEncoder = TextEncoder\nglobal.TextDecoder = TextDecoder\n\n// Mock Request and Response for API route testing\nglobal.Request = class Request {\n  constructor(input, init) {\n    this.url = input\n    this.method = init?.method || 'GET'\n    this.headers = new Map(Object.entries(init?.headers || {}))\n    this.body = init?.body\n  }\n  \n  async json() {\n    return JSON.parse(this.body)\n  }\n}\n\nglobal.Response = class Response {\n  constructor(body, init) {\n    this.body = body\n    this.status = init?.status || 200\n    this.headers = new Map(Object.entries(init?.headers || {}))\n  }\n  \n  async json() {\n    return JSON.parse(this.body)\n  }\n  \n  static json(data, init) {\n    return new Response(JSON.stringify(data), {\n      ...init,\n      headers: {\n        'Content-Type': 'application/json',\n        ...init?.headers,\n      },\n    })\n  }\n}\n\n// Mock Next.js router\njest.mock('next/navigation', () => ({\n  useRouter() {\n    return {\n      push: jest.fn(),\n      replace: jest.fn(),\n      prefetch: jest.fn(),\n      back: jest.fn(),\n      forward: jest.fn(),\n      refresh: jest.fn(),\n    }\n  },\n  useSearchParams() {\n    return new URLSearchParams()\n  },\n  usePathname() {\n    return ''\n  },\n}))\n\n// Mock Next.js image\njest.mock('next/image', () => ({\n  __esModule: true,\n  default: (props) => {\n    return <img {...props} />\n  },\n}))\n\n// Mock NextAuth\njest.mock('next-auth/react', () => ({\n  useSession: jest.fn(() => ({\n    data: null,\n    status: 'unauthenticated',\n  })),\n  signIn: jest.fn(),\n  signOut: jest.fn(),\n  SessionProvider: ({ children }) => children,\n}))\n\n// Global test utilities\nglobal.fetch = jest.fn()\n\n// Clean up after each test\nafterEach(() => {\n  jest.clearAllMocks()\n}) "],"names":["jest","mock","useRouter","push","fn","replace","prefetch","back","forward","refresh","useSearchParams","URLSearchParams","usePathname","__esModule","default","props","img","useSession","data","status","signIn","signOut","SessionProvider","children","global","TextEncoder","TextDecoder","Request","constructor","input","init","url","method","headers","Map","Object","entries","body","json","JSON","parse","Response","stringify","fetch","afterEach","clearAllMocks"],"mappings":";AA2CA,sBAAsB;AACtBA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC;YACE,OAAO;gBACLC,MAAMH,KAAKI,EAAE;gBACbC,SAASL,KAAKI,EAAE;gBAChBE,UAAUN,KAAKI,EAAE;gBACjBG,MAAMP,KAAKI,EAAE;gBACbI,SAASR,KAAKI,EAAE;gBAChBK,SAAST,KAAKI,EAAE;YAClB;QACF;QACAM;YACE,OAAO,IAAIC;QACb;QACAC;YACE,OAAO;QACT;IACF,CAAA;AAEA,qBAAqB;AACrBZ,KAAKC,IAAI,CAAC,cAAc,IAAO,CAAA;QAC7BY,YAAY;QACZC,SAAS,CAACC;YACR,qBAAO,qBAACC;gBAAK,GAAGD,KAAK;;QACvB;IACF,CAAA;AAEA,gBAAgB;AAChBf,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCgB,YAAYjB,KAAKI,EAAE,CAAC,IAAO,CAAA;gBACzBc,MAAM;gBACNC,QAAQ;YACV,CAAA;QACAC,QAAQpB,KAAKI,EAAE;QACfiB,SAASrB,KAAKI,EAAE;QAChBkB,iBAAiB,CAAC,EAAEC,QAAQ,EAAE,GAAKA;IACrC,CAAA;;;;;QAhFO;sBAGkC;AACzCC,OAAOC,WAAW,GAAGA,iBAAW;AAChCD,OAAOE,WAAW,GAAGA,iBAAW;AAEhC,kDAAkD;AAClDF,OAAOG,OAAO,GAAG,MAAMA;IACrBC,YAAYC,KAAK,EAAEC,IAAI,CAAE;QACvB,IAAI,CAACC,GAAG,GAAGF;QACX,IAAI,CAACG,MAAM,GAAGF,MAAME,UAAU;QAC9B,IAAI,CAACC,OAAO,GAAG,IAAIC,IAAIC,OAAOC,OAAO,CAACN,MAAMG,WAAW,CAAC;QACxD,IAAI,CAACI,IAAI,GAAGP,MAAMO;IACpB;IAEA,MAAMC,OAAO;QACX,OAAOC,KAAKC,KAAK,CAAC,IAAI,CAACH,IAAI;IAC7B;AACF;AAEAb,OAAOiB,QAAQ,GAAG,MAAMA;IACtBb,YAAYS,IAAI,EAAEP,IAAI,CAAE;QACtB,IAAI,CAACO,IAAI,GAAGA;QACZ,IAAI,CAAClB,MAAM,GAAGW,MAAMX,UAAU;QAC9B,IAAI,CAACc,OAAO,GAAG,IAAIC,IAAIC,OAAOC,OAAO,CAACN,MAAMG,WAAW,CAAC;IAC1D;IAEA,MAAMK,OAAO;QACX,OAAOC,KAAKC,KAAK,CAAC,IAAI,CAACH,IAAI;IAC7B;IAEA,OAAOC,KAAKpB,IAAI,EAAEY,IAAI,EAAE;QACtB,OAAO,IAAIW,SAASF,KAAKG,SAAS,CAACxB,OAAO;YACxC,GAAGY,IAAI;YACPG,SAAS;gBACP,gBAAgB;gBAChB,GAAGH,MAAMG,OAAO;YAClB;QACF;IACF;AACF;AAyCA,wBAAwB;AACxBT,OAAOmB,KAAK,GAAG3C,KAAKI,EAAE;AAEtB,2BAA2B;AAC3BwC,UAAU;IACR5C,KAAK6C,aAAa;AACpB"}