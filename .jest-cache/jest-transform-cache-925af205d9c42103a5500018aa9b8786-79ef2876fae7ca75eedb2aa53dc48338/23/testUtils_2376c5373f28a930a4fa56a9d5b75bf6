5abfc2bbbe6029b2cc5f575738d81d63
/**
 * Test Utilities & Helpers
 * Common patterns and utilities for test setup
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get apiHelpers () {
        return apiHelpers;
    },
    get bddHelpers () {
        return bddHelpers;
    },
    get builders () {
        return builders;
    },
    get dbHelpers () {
        return dbHelpers;
    },
    get formHelpers () {
        return formHelpers;
    },
    get performanceHelpers () {
        return performanceHelpers;
    },
    get renderWithAuth () {
        return renderWithAuth;
    },
    get routerHelpers () {
        return routerHelpers;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _react2 = require("next-auth/react");
const _fixtures = require("../fixtures");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const renderWithAuth = (ui, { user = _fixtures.testUsers.john, authenticated = true, session, ...renderOptions } = {})=>{
    const mockSession = session || (authenticated ? (0, _fixtures.createAuthenticatedSession)(user) : null);
    const Wrapper = ({ children })=>{
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react2.SessionProvider, {
            session: mockSession,
            children: children
        });
    };
    return (0, _react1.render)(ui, {
        wrapper: Wrapper,
        ...renderOptions
    });
};
const bddHelpers = {
    given: (description)=>({
            when: (action, fn)=>({
                    then: (expectation, assertion)=>{
                        test(`Given ${description}, When ${action}, Then ${expectation}`, async ()=>{
                            await fn();
                            await assertion();
                        });
                    }
                })
        }),
    scenario: (name, fn)=>{
        describe(`Scenario: ${name}`, fn);
    },
    userStory: (story, fn)=>{
        describe(`User Story: ${story}`, fn);
    }
};
const apiHelpers = {
    createMockResponse: (data, status = 200)=>{
        return new Response(JSON.stringify(data), {
            status,
            headers: {
                'Content-Type': 'application/json'
            }
        });
    },
    createErrorResponse: (error, status = 400)=>{
        return new Response(JSON.stringify({
            error
        }), {
            status,
            headers: {
                'Content-Type': 'application/json'
            }
        });
    },
    setupFetchMock: (responses)=>{
        const mockFetch = jest.fn();
        responses.forEach(({ url, response }, index)=>{
            if (url) {
                mockFetch.mockImplementation((reqUrl)=>{
                    if (reqUrl.includes(url)) {
                        return Promise.resolve(response);
                    }
                    return Promise.reject(new Error(`Unexpected request to ${reqUrl}`));
                });
            } else {
                mockFetch.mockResolvedValueOnce(response);
            }
        });
        global.fetch = mockFetch;
        return mockFetch;
    }
};
const formHelpers = {
    fillInput: (element, value)=>{
        const input = element;
        input.focus();
        input.value = value;
        input.dispatchEvent(new Event('change', {
            bubbles: true
        }));
        input.blur();
    },
    submitForm: (form)=>{
        form.dispatchEvent(new Event('submit', {
            bubbles: true,
            cancelable: true
        }));
    }
};
const dbHelpers = {
    setupMockPrisma: (mockImplementations)=>{
        const mockPrisma = {
            project: {},
            user: {},
            ...mockImplementations
        };
        jest.doMock('../../../app/lib/prisma', ()=>({
                prisma: mockPrisma
            }));
        return mockPrisma;
    }
};
const routerHelpers = {
    createMockRouter: (overrides = {})=>({
            push: jest.fn(),
            replace: jest.fn(),
            back: jest.fn(),
            forward: jest.fn(),
            refresh: jest.fn(),
            prefetch: jest.fn(),
            ...overrides
        })
};
const performanceHelpers = {
    measureRenderTime: async (renderFn)=>{
        const start = performance.now();
        await renderFn();
        const end = performance.now();
        return end - start;
    },
    expectFastRender: (renderTime, maxMs = 100)=>{
        expect(renderTime).toBeLessThan(maxMs);
    }
};
const builders = {
    project: (overrides = {})=>({
            id: `project-${Date.now()}`,
            name: 'Test Project',
            contractor: 'Test Contractor',
            userId: _fixtures.testUsers.john.id,
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        }),
    user: (overrides = {})=>({
            id: `user-${Date.now()}`,
            name: 'Test User',
            email: 'test@example.com',
            ...overrides
        })
};

//# sourceMappingURL=data:application/json;base64,