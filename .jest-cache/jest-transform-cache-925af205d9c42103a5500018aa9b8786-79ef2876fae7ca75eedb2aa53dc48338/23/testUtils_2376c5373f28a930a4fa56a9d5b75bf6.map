{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/helpers/testUtils.tsx"],"sourcesContent":["/**\n * Test Utilities & Helpers\n * Common patterns and utilities for test setup\n */\n\nimport React from 'react'\nimport { render, RenderOptions } from '@testing-library/react'\nimport { SessionProvider } from 'next-auth/react'\nimport { testUsers, createAuthenticatedSession } from '../fixtures'\n\n// Types\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  user?: typeof testUsers.john\n  authenticated?: boolean\n  session?: any\n}\n\n/**\n * Custom render with authentication context\n */\nexport const renderWithAuth = (\n  ui: React.ReactElement,\n  {\n    user = testUsers.john,\n    authenticated = true,\n    session,\n    ...renderOptions\n  }: CustomRenderOptions = {}\n) => {\n  const mockSession = session || (authenticated ? createAuthenticatedSession(user) : null)\n  \n  const Wrapper = ({ children }: { children: React.ReactNode }) => {\n    return (\n      <SessionProvider session={mockSession}>\n        {children}\n      </SessionProvider>\n    )\n  }\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions })\n}\n\n/**\n * BDD Test Helpers\n */\nexport const bddHelpers = {\n  given: (description: string) => ({\n    when: (action: string, fn: () => void | Promise<void>) => ({\n      then: (expectation: string, assertion: () => void | Promise<void>) => {\n        test(`Given ${description}, When ${action}, Then ${expectation}`, async () => {\n          await fn()\n          await assertion()\n        })\n      }\n    })\n  }),\n  \n  scenario: (name: string, fn: () => void) => {\n    describe(`Scenario: ${name}`, fn)\n  },\n\n  userStory: (story: string, fn: () => void) => {\n    describe(`User Story: ${story}`, fn)\n  }\n}\n\n/**\n * API Test Helpers\n */\nexport const apiHelpers = {\n  createMockResponse: (data: any, status = 200) => {\n    return new Response(JSON.stringify(data), {\n      status,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  },\n\n  createErrorResponse: (error: string, status = 400) => {\n    return new Response(JSON.stringify({ error }), {\n      status,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  },\n\n  setupFetchMock: (responses: Array<{ url?: string; response: Response }>) => {\n    const mockFetch = jest.fn()\n    \n    responses.forEach(({ url, response }, index) => {\n      if (url) {\n        mockFetch.mockImplementation((reqUrl) => {\n          if (reqUrl.includes(url)) {\n            return Promise.resolve(response)\n          }\n          return Promise.reject(new Error(`Unexpected request to ${reqUrl}`))\n        })\n      } else {\n        mockFetch.mockResolvedValueOnce(response)\n      }\n    })\n\n    global.fetch = mockFetch\n    return mockFetch\n  }\n}\n\n/**\n * Form Test Helpers\n */\nexport const formHelpers = {\n  fillInput: (element: HTMLElement, value: string) => {\n    const input = element as HTMLInputElement\n    input.focus()\n    input.value = value\n    input.dispatchEvent(new Event('change', { bubbles: true }))\n    input.blur()\n  },\n\n  submitForm: (form: HTMLElement) => {\n    form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }))\n  }\n}\n\n/**\n * Database Test Helpers  \n */\nexport const dbHelpers = {\n  setupMockPrisma: (mockImplementations: Record<string, jest.Mock>) => {\n    const mockPrisma = {\n      project: {},\n      user: {},\n      ...mockImplementations\n    }\n    \n    jest.doMock('../../../app/lib/prisma', () => ({\n      prisma: mockPrisma\n    }))\n    \n    return mockPrisma\n  }\n}\n\n/**\n * Router Test Helpers\n */\nexport const routerHelpers = {\n  createMockRouter: (overrides: Partial<any> = {}) => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n    ...overrides\n  })\n}\n\n/**\n * Performance Test Helpers\n */\nexport const performanceHelpers = {\n  measureRenderTime: async (renderFn: () => void) => {\n    const start = performance.now()\n    await renderFn()\n    const end = performance.now()\n    return end - start\n  },\n\n  expectFastRender: (renderTime: number, maxMs = 100) => {\n    expect(renderTime).toBeLessThan(maxMs)\n  }\n}\n\n/**\n * Test Data Builders\n */\nexport const builders = {\n  project: (overrides: Partial<any> = {}) => ({\n    id: `project-${Date.now()}`,\n    name: 'Test Project',\n    contractor: 'Test Contractor',\n    userId: testUsers.john.id,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ...overrides\n  }),\n\n  user: (overrides: Partial<any> = {}) => ({\n    id: `user-${Date.now()}`,\n    name: 'Test User',\n    email: 'test@example.com',\n    ...overrides\n  })\n} "],"names":["apiHelpers","bddHelpers","builders","dbHelpers","formHelpers","performanceHelpers","renderWithAuth","routerHelpers","ui","user","testUsers","john","authenticated","session","renderOptions","mockSession","createAuthenticatedSession","Wrapper","children","SessionProvider","render","wrapper","given","description","when","action","fn","then","expectation","assertion","test","scenario","name","describe","userStory","story","createMockResponse","data","status","Response","JSON","stringify","headers","createErrorResponse","error","setupFetchMock","responses","mockFetch","jest","forEach","url","response","index","mockImplementation","reqUrl","includes","Promise","resolve","reject","Error","mockResolvedValueOnce","global","fetch","fillInput","element","value","input","focus","dispatchEvent","Event","bubbles","blur","submitForm","form","cancelable","setupMockPrisma","mockImplementations","mockPrisma","project","doMock","prisma","createMockRouter","overrides","push","replace","back","forward","refresh","prefetch","measureRenderTime","renderFn","start","performance","now","end","expectFastRender","renderTime","maxMs","expect","toBeLessThan","id","Date","contractor","userId","createdAt","updatedAt","email"],"mappings":"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"}