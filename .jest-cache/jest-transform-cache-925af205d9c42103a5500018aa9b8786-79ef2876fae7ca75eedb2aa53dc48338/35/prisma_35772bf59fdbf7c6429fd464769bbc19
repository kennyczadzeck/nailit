740c14c272db4b8a1e144f0ceb249195
"use strict";

/* istanbul ignore next */
function cov_1lu80g7yqt() {
  var path = "/Users/kennyc/code/personal/nailit/app/lib/prisma.ts";
  var hash = "298dac72bc68dbc5e2b52c4d63e2ad1a1bab59e0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kennyc/code/personal/nailit/app/lib/prisma.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 22
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "4": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 34
        }
      },
      "5": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "6": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 56
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 70
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 135
        }
      },
      "10": {
        start: {
          line: 18,
          column: 84
        },
        end: {
          line: 18,
          column: 132
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 73
        }
      },
      "12": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 99
        }
      },
      "13": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 32,
          column: 7
        }
      },
      "14": {
        start: {
          line: 34,
          column: 15
        },
        end: {
          line: 34,
          column: 61
        }
      },
      "15": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 75
        }
      },
      "16": {
        start: {
          line: 35,
          column: 43
        },
        end: {
          line: 35,
          column: 75
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 27
          },
          end: {
            line: 14,
            column: 28
          }
        },
        loc: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 77
          },
          end: {
            line: 18,
            column: 78
          }
        },
        loc: {
          start: {
            line: 18,
            column: 84
          },
          end: {
            line: 18,
            column: 132
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 84
          },
          end: {
            line: 18,
            column: 132
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 84
          },
          end: {
            line: 18,
            column: 108
          }
        }, {
          start: {
            line: 18,
            column: 112
          },
          end: {
            line: 18,
            column: 132
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 15
          },
          end: {
            line: 34,
            column: 37
          }
        }, {
          start: {
            line: 34,
            column: 41
          },
          end: {
            line: 34,
            column: 61
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 0
          },
          end: {
            line: 35,
            column: 75
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 0
          },
          end: {
            line: 35,
            column: 75
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/kennyc/code/personal/nailit/app/lib/prisma.ts"],
      sourcesContent: ["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\n// Create Prisma client with explicit datasource URL to bypass schema env() issues\nconst createPrismaClient = () => {\n  const databaseUrl = process.env.DATABASE_URL?.trim();\n  \n  if (!databaseUrl) {\n    console.error('DATABASE_URL environment variable is not set');\n    console.error('Available env vars:', Object.keys(process.env).filter(key => \n      key.includes('DATABASE') || key.includes('NEON')\n    ));\n    throw new Error('DATABASE_URL environment variable is required');\n  }\n  \n  console.log('Creating Prisma client with DATABASE_URL:', databaseUrl.substring(0, 30) + '...');\n  \n  return new PrismaClient({\n    datasources: {\n      db: {\n        url: databaseUrl\n      }\n    },\n    log: ['error', 'warn'] // Add logging to debug issues\n  });\n};\n\nexport const prisma = globalForPrisma.prisma ?? createPrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma "],
      names: ["prisma", "globalForPrisma", "globalThis", "createPrismaClient", "databaseUrl", "process", "env", "DATABASE_URL", "trim", "console", "error", "Object", "keys", "filter", "key", "includes", "Error", "log", "substring", "PrismaClient", "datasources", "db", "url", "NODE_ENV"],
      mappings: ";;;;+BA8BaA;;;eAAAA;;;wBA9BgB;AAE7B,MAAMC,kBAAkBC;AAIxB,kFAAkF;AAClF,MAAMC,qBAAqB;IACzB,MAAMC,cAAcC,QAAQC,GAAG,CAACC,YAAY,EAAEC;IAE9C,IAAI,CAACJ,aAAa;QAChBK,QAAQC,KAAK,CAAC;QACdD,QAAQC,KAAK,CAAC,uBAAuBC,OAAOC,IAAI,CAACP,QAAQC,GAAG,EAAEO,MAAM,CAACC,CAAAA,MACnEA,IAAIC,QAAQ,CAAC,eAAeD,IAAIC,QAAQ,CAAC;QAE3C,MAAM,IAAIC,MAAM;IAClB;IAEAP,QAAQQ,GAAG,CAAC,6CAA6Cb,YAAYc,SAAS,CAAC,GAAG,MAAM;IAExF,OAAO,IAAIC,oBAAY,CAAC;QACtBC,aAAa;YACXC,IAAI;gBACFC,KAAKlB;YACP;QACF;QACAa,KAAK;YAAC;YAAS;SAAO,CAAC,8BAA8B;IACvD;AACF;AAEO,MAAMjB,SAASC,gBAAgBD,MAAM,IAAIG;AAEhD,IAAIE,QAAQC,GAAG,CAACiB,QAAQ,KAAK,cAActB,gBAAgBD,MAAM,GAAGA"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "298dac72bc68dbc5e2b52c4d63e2ad1a1bab59e0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lu80g7yqt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lu80g7yqt();
cov_1lu80g7yqt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1lu80g7yqt().s[1]++;
Object.defineProperty(exports, "prisma", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1lu80g7yqt().f[0]++;
    cov_1lu80g7yqt().s[2]++;
    return prisma;
  }
});
const _client =
/* istanbul ignore next */
(cov_1lu80g7yqt().s[3]++, require("@prisma/client"));
const globalForPrisma =
/* istanbul ignore next */
(cov_1lu80g7yqt().s[4]++, globalThis);
// Create Prisma client with explicit datasource URL to bypass schema env() issues
/* istanbul ignore next */
cov_1lu80g7yqt().s[5]++;
const createPrismaClient = () => {
  /* istanbul ignore next */
  cov_1lu80g7yqt().f[1]++;
  const databaseUrl =
  /* istanbul ignore next */
  (cov_1lu80g7yqt().s[6]++, process.env.DATABASE_URL?.trim());
  /* istanbul ignore next */
  cov_1lu80g7yqt().s[7]++;
  if (!databaseUrl) {
    /* istanbul ignore next */
    cov_1lu80g7yqt().b[0][0]++;
    cov_1lu80g7yqt().s[8]++;
    console.error('DATABASE_URL environment variable is not set');
    /* istanbul ignore next */
    cov_1lu80g7yqt().s[9]++;
    console.error('Available env vars:', Object.keys(process.env).filter(key => {
      /* istanbul ignore next */
      cov_1lu80g7yqt().f[2]++;
      cov_1lu80g7yqt().s[10]++;
      return /* istanbul ignore next */(cov_1lu80g7yqt().b[1][0]++, key.includes('DATABASE')) ||
      /* istanbul ignore next */
      (cov_1lu80g7yqt().b[1][1]++, key.includes('NEON'));
    }));
    /* istanbul ignore next */
    cov_1lu80g7yqt().s[11]++;
    throw new Error('DATABASE_URL environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_1lu80g7yqt().b[0][1]++;
  }
  cov_1lu80g7yqt().s[12]++;
  console.log('Creating Prisma client with DATABASE_URL:', databaseUrl.substring(0, 30) + '...');
  /* istanbul ignore next */
  cov_1lu80g7yqt().s[13]++;
  return new _client.PrismaClient({
    datasources: {
      db: {
        url: databaseUrl
      }
    },
    log: ['error', 'warn'] // Add logging to debug issues
  });
};
const prisma =
/* istanbul ignore next */
(cov_1lu80g7yqt().s[14]++,
/* istanbul ignore next */
(cov_1lu80g7yqt().b[2][0]++, globalForPrisma.prisma) ??
/* istanbul ignore next */
(cov_1lu80g7yqt().b[2][1]++, createPrismaClient()));
/* istanbul ignore next */
cov_1lu80g7yqt().s[15]++;
if (process.env.NODE_ENV !== 'production') {
  /* istanbul ignore next */
  cov_1lu80g7yqt().b[3][0]++;
  cov_1lu80g7yqt().s[16]++;
  globalForPrisma.prisma = prisma;
} else
/* istanbul ignore next */
{
  cov_1lu80g7yqt().b[3][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWx1ODBnN3lxdCIsImFjdHVhbENvdmVyYWdlIiwicyIsInByaXNtYSIsImdsb2JhbEZvclByaXNtYSIsImdsb2JhbFRoaXMiLCJjcmVhdGVQcmlzbWFDbGllbnQiLCJmIiwiZGF0YWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiREFUQUJBU0VfVVJMIiwidHJpbSIsImIiLCJjb25zb2xlIiwiZXJyb3IiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwiaW5jbHVkZXMiLCJFcnJvciIsImxvZyIsInN1YnN0cmluZyIsIl9jbGllbnQiLCJQcmlzbWFDbGllbnQiLCJkYXRhc291cmNlcyIsImRiIiwidXJsIiwiTk9ERV9FTlYiXSwic291cmNlcyI6WyIvVXNlcnMva2VubnljL2NvZGUvcGVyc29uYWwvbmFpbGl0L2FwcC9saWIvcHJpc21hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG4vLyBDcmVhdGUgUHJpc21hIGNsaWVudCB3aXRoIGV4cGxpY2l0IGRhdGFzb3VyY2UgVVJMIHRvIGJ5cGFzcyBzY2hlbWEgZW52KCkgaXNzdWVzXG5jb25zdCBjcmVhdGVQcmlzbWFDbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGRhdGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMPy50cmltKCk7XG4gIFxuICBpZiAoIWRhdGFiYXNlVXJsKSB7XG4gICAgY29uc29sZS5lcnJvcignREFUQUJBU0VfVVJMIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQnKTtcbiAgICBjb25zb2xlLmVycm9yKCdBdmFpbGFibGUgZW52IHZhcnM6JywgT2JqZWN0LmtleXMocHJvY2Vzcy5lbnYpLmZpbHRlcihrZXkgPT4gXG4gICAgICBrZXkuaW5jbHVkZXMoJ0RBVEFCQVNFJykgfHwga2V5LmluY2x1ZGVzKCdORU9OJylcbiAgICApKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RBVEFCQVNFX1VSTCBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyByZXF1aXJlZCcpO1xuICB9XG4gIFxuICBjb25zb2xlLmxvZygnQ3JlYXRpbmcgUHJpc21hIGNsaWVudCB3aXRoIERBVEFCQVNFX1VSTDonLCBkYXRhYmFzZVVybC5zdWJzdHJpbmcoMCwgMzApICsgJy4uLicpO1xuICBcbiAgcmV0dXJuIG5ldyBQcmlzbWFDbGllbnQoe1xuICAgIGRhdGFzb3VyY2VzOiB7XG4gICAgICBkYjoge1xuICAgICAgICB1cmw6IGRhdGFiYXNlVXJsXG4gICAgICB9XG4gICAgfSxcbiAgICBsb2c6IFsnZXJyb3InLCAnd2FybiddIC8vIEFkZCBsb2dnaW5nIHRvIGRlYnVnIGlzc3Vlc1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/IGNyZWF0ZVByaXNtYUNsaWVudCgpXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hICJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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