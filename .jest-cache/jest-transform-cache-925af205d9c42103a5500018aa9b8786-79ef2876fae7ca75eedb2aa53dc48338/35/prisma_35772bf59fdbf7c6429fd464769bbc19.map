{"version":3,"names":["cov_1lu80g7yqt","actualCoverage","s","prisma","globalForPrisma","globalThis","createPrismaClient","f","databaseUrl","process","env","DATABASE_URL","trim","b","console","error","Object","keys","filter","key","includes","Error","log","substring","_client","PrismaClient","datasources","db","url","NODE_ENV"],"sources":["/Users/kennyc/code/personal/nailit/app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\n// Create Prisma client with explicit datasource URL to bypass schema env() issues\nconst createPrismaClient = () => {\n  const databaseUrl = process.env.DATABASE_URL?.trim();\n  \n  if (!databaseUrl) {\n    console.error('DATABASE_URL environment variable is not set');\n    console.error('Available env vars:', Object.keys(process.env).filter(key => \n      key.includes('DATABASE') || key.includes('NEON')\n    ));\n    throw new Error('DATABASE_URL environment variable is required');\n  }\n  \n  console.log('Creating Prisma client with DATABASE_URL:', databaseUrl.substring(0, 30) + '...');\n  \n  return new PrismaClient({\n    datasources: {\n      db: {\n        url: databaseUrl\n      }\n    },\n    log: ['error', 'warn'] // Add logging to debug issues\n  });\n};\n\nexport const prisma = globalForPrisma.prisma ?? createPrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUO;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAoBM;;;;;;WAAAC,MAAA;;;;;kCA9BgB;AAE7B,MAAMC,eAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,OAAkBG,UAAA;AAIxB;AAAA;AAAAL,cAAA,GAAAE,CAAA;AACA,MAAMI,kBAAA,GAAqBA,CAAA;EAAA;EAAAN,cAAA,GAAAO,CAAA;EACzB,MAAMC,WAAA;EAAA;EAAA,CAAAR,cAAA,GAAAE,CAAA,OAAcO,OAAA,CAAQC,GAAG,CAACC,YAAY,EAAEC,IAAA;EAAA;EAAAZ,cAAA,GAAAE,CAAA;EAE9C,IAAI,CAACM,WAAA,EAAa;IAAA;IAAAR,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAE,CAAA;IAChBY,OAAA,CAAQC,KAAK,CAAC;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACdY,OAAA,CAAQC,KAAK,CAAC,uBAAuBC,MAAA,CAAOC,IAAI,CAACR,OAAA,CAAQC,GAAG,EAAEQ,MAAM,CAACC,GAAA,IACnE;MAAA;MAAAnB,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAAA,kCAAAF,cAAA,GAAAa,CAAA,UAAAM,GAAA,CAAIC,QAAQ,CAAC;MAAA;MAAA,CAAApB,cAAA,GAAAa,CAAA,UAAeM,GAAA,CAAIC,QAAQ,CAAC;IAAA;IAAA;IAAApB,cAAA,GAAAE,CAAA;IAE3C,MAAM,IAAImB,KAAA,CAAM;EAClB;EAAA;EAAA;IAAArB,cAAA,GAAAa,CAAA;EAAA;EAAAb,cAAA,GAAAE,CAAA;EAEAY,OAAA,CAAQQ,GAAG,CAAC,6CAA6Cd,WAAA,CAAYe,SAAS,CAAC,GAAG,MAAM;EAAA;EAAAvB,cAAA,GAAAE,CAAA;EAExF,OAAO,IAAIsB,OAAA,CAAAC,YAAY,CAAC;IACtBC,WAAA,EAAa;MACXC,EAAA,EAAI;QACFC,GAAA,EAAKpB;MACP;IACF;IACAc,GAAA,EAAK,CAAC,SAAS,OAAO,CAAC;EACzB;AACF;AAEO,MAAMnB,MAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA;AAAS;AAAA,CAAAF,cAAA,GAAAa,CAAA,UAAAT,eAAA,CAAgBD,MAAM;AAAA;AAAA,CAAAH,cAAA,GAAAa,CAAA,UAAIP,kBAAA;AAAA;AAAAN,cAAA,GAAAE,CAAA;AAEhD,IAAIO,OAAA,CAAQC,GAAG,CAACmB,QAAQ,KAAK,cAAc;EAAA;EAAA7B,cAAA,GAAAa,CAAA;EAAAb,cAAA,GAAAE,CAAA;EAAAE,eAAA,CAAgBD,MAAM,GAAGA,MAAA;AAAA;AAAA;AAAA;EAAAH,cAAA,GAAAa,CAAA;AAAA","ignoreList":[]}