{"version":3,"names":["AddressAutocomplete","value","onChange","placeholder","cov_zy6qjstdd","b","className","apiKey","f","inputRef","s","_react","useRef","autocompleteRef","isGoogleMapsLoaded","setIsGoogleMapsLoaded","useState","lastSelectedAddress","setLastSelectedAddress","useEffect","window","google","maps","places","existingScript","document","querySelector","googleMapsCallbacks","push","googleMapsLoading","script","createElement","src","async","defer","initGoogleMaps","forEach","callback","onload","onerror","console","error","head","appendChild","contains","removeChild","current","autocomplete","Autocomplete","fields","types","componentRestrictions","country","addListener","place","getPlace","geometry","warn","addressData","parseAddressComponents","selectedAddress","formatted_address","setTimeout","event","clearInstanceListeners","components","address_components","getComponent","component","find","comp","some","type","includes","long_name","formattedAddress","placeId","place_id","lat","location","lng","streetNumber","route","locality","administrativeAreaLevel1","postalCode","handleInputChange","e","newValue","target","handleFocus","_jsxruntime","jsx","ref","onFocus"],"sources":["/Users/kennyc/code/personal/nailit/app/components/ui/AddressAutocomplete.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\n\ndeclare global {\n  interface Window {\n    google: any;\n    initGoogleMaps: () => void;\n    googleMapsLoading: boolean;\n    googleMapsCallbacks: (() => void)[];\n  }\n}\n\ninterface AddressData {\n  placeId: string;\n  lat?: number;\n  lng?: number;\n  formattedAddress?: string;\n  streetNumber?: string;\n  route?: string;\n  locality?: string;\n  administrativeAreaLevel1?: string;\n  country?: string;\n  postalCode?: string;\n}\n\ninterface AddressAutocompleteProps {\n  value: string;\n  onChange: (value: string, addressData?: AddressData) => void;\n  placeholder?: string;\n  className?: string;\n  apiKey: string;\n}\n\nexport const AddressAutocomplete: React.FC<AddressAutocompleteProps> = ({\n  value,\n  onChange,\n  placeholder = \"Enter address...\",\n  className = \"\",\n  apiKey\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const autocompleteRef = useRef<any>(null);\n  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\n  const [lastSelectedAddress, setLastSelectedAddress] = useState('');\n\n  // Load Google Maps API with duplicate prevention\n  useEffect(() => {\n    // If already loaded, set state and return\n    if (window.google && window.google.maps && window.google.maps.places) {\n      setIsGoogleMapsLoaded(true);\n      return;\n    }\n\n    // Check if script already exists\n    const existingScript = document.querySelector('script[src*=\"maps.googleapis.com/maps/api/js\"]');\n    if (existingScript) {\n      // Script exists, wait for it to load\n      if (!window.googleMapsCallbacks) {\n        window.googleMapsCallbacks = [];\n      }\n      window.googleMapsCallbacks.push(() => setIsGoogleMapsLoaded(true));\n      return;\n    }\n\n    // Check if already loading\n    if (window.googleMapsLoading) {\n      if (!window.googleMapsCallbacks) {\n        window.googleMapsCallbacks = [];\n      }\n      window.googleMapsCallbacks.push(() => setIsGoogleMapsLoaded(true));\n      return;\n    }\n\n    // Mark as loading and create script\n    window.googleMapsLoading = true;\n    window.googleMapsCallbacks = [() => setIsGoogleMapsLoaded(true)];\n\n    const script = document.createElement('script');\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\n    script.async = true;\n    script.defer = true;\n    \n    window.initGoogleMaps = () => {\n      window.googleMapsLoading = false;\n      // Call all waiting callbacks\n      if (window.googleMapsCallbacks) {\n        window.googleMapsCallbacks.forEach(callback => callback());\n        window.googleMapsCallbacks = [];\n      }\n    };\n    \n    script.onload = window.initGoogleMaps;\n    script.onerror = () => {\n      console.error('Failed to load Google Maps API');\n      window.googleMapsLoading = false;\n    };\n    \n    document.head.appendChild(script);\n\n    return () => {\n      if (document.head.contains(script)) {\n        document.head.removeChild(script);\n      }\n    };\n  }, [apiKey]);\n\n  // Initialize autocomplete when Google Maps is loaded\n  useEffect(() => {\n    if (!isGoogleMapsLoaded || !inputRef.current || autocompleteRef.current) {\n      return;\n    }\n\n    // Initialize autocomplete with options\n    const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n      fields: ['address_components', 'formatted_address', 'geometry', 'place_id'],\n      types: ['address'],\n      componentRestrictions: { country: 'us' } // Restrict to US, modify as needed\n    });\n\n    autocompleteRef.current = autocomplete;\n\n    // Listen for place selection\n    autocomplete.addListener('place_changed', () => {\n      const place = autocomplete.getPlace();\n      \n      if (!place.geometry) {\n        console.warn('Place has no geometry');\n        return;\n      }\n\n      // Parse address components\n      const addressData = parseAddressComponents(place);\n      \n      // Mark as autocomplete selection and preserve the formatted address\n      const selectedAddress = place.formatted_address || '';\n      setLastSelectedAddress(selectedAddress);\n      \n      // Use setTimeout to ensure this happens after any pending state updates\n      setTimeout(() => {\n        onChange(selectedAddress, addressData);\n      }, 0);\n    });\n\n    // Cleanup function\n    return () => {\n      if (autocompleteRef.current) {\n        window.google.maps.event.clearInstanceListeners(autocompleteRef.current);\n      }\n    };\n  }, [isGoogleMapsLoaded, onChange]);\n\n  // Parse Google Places address components\n  const parseAddressComponents = (place: any): AddressData => {\n    const components = place.address_components || [];\n    \n    const getComponent = (types: string[]) => {\n      const component = components.find((comp: any) => \n        comp.types.some((type: string) => types.includes(type))\n      );\n      return component?.long_name || '';\n    };\n\n    return {\n      formattedAddress: place.formatted_address || '',\n      placeId: place.place_id || '',\n      lat: place.geometry?.location?.lat(),\n      lng: place.geometry?.location?.lng(),\n      streetNumber: getComponent(['street_number']),\n      route: getComponent(['route']),\n      locality: getComponent(['locality', 'administrative_area_level_2']),\n      administrativeAreaLevel1: getComponent(['administrative_area_level_1']),\n      country: getComponent(['country']),\n      postalCode: getComponent(['postal_code'])\n    };\n  };\n\n  // Handle manual input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    onChange(newValue);\n  };\n\n  // Handle input focus - no special handling needed\n  const handleFocus = () => {\n    // No special handling needed - let user edit freely\n  };\n\n  return (\n    <input\n      ref={inputRef}\n      type=\"text\"\n      value={value}\n      onChange={handleInputChange}\n      onFocus={handleFocus}\n      placeholder={placeholder}\n      className={`w-full px-3 py-3 sm:py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base sm:text-sm ${className}`}\n    />\n  );\n}; "],"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","ignoreList":[]}