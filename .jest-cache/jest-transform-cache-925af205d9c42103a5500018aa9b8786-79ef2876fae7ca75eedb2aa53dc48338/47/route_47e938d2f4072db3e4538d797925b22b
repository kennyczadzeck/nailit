f74a16bc4cfc3455c9c2da0c0fc6ce5b
"use strict";

/* istanbul ignore next */
function cov_g3l0lqjzf() {
  var path = "/Users/kennyc/code/personal/nailit/app/api/projects/[id]/route.ts";
  var hash = "15a7a46d53a43a95117942793de5711809cfb1f2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kennyc/code/personal/nailit/app/api/projects/[id]/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "11": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 81
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "14": {
        start: {
          line: 33,
          column: 34
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "15": {
        start: {
          line: 34,
          column: 21
        },
        end: {
          line: 34,
          column: 41
        }
      },
      "16": {
        start: {
          line: 35,
          column: 42
        },
        end: {
          line: 35,
          column: 46
        }
      },
      "17": {
        start: {
          line: 37,
          column: 32
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "19": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "22": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "23": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "24": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 57
        }
      },
      "25": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 56
        }
      },
      "26": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "27": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 173,
          column: 5
        }
      },
      "28": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 81
        }
      },
      "29": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "30": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "31": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 142,
          column: 46
        }
      },
      "32": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "33": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "34": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "35": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "36": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "37": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 56
        }
      },
      "38": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 17
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "PATCH",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 20
          }
        },
        loc: {
          start: {
            line: 23,
            column: 42
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "DELETE",
        decl: {
          start: {
            line: 132,
            column: 15
          },
          end: {
            line: 132,
            column: 21
          }
        },
        loc: {
          start: {
            line: 132,
            column: 43
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 132
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "4": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/kennyc/code/personal/nailit/app/api/projects/[id]/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '../../auth/[...nextauth]/route'\nimport { prisma } from '../../../lib/prisma'\nimport { ProjectStatus } from '@prisma/client'\n\n// PATCH /api/projects/[id] - Update project (including archiving)\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { id: projectId } = await params\n    const body = await request.json()\n    const { action, ...updateData } = body\n\n    // Verify project belongs to user\n    const existingProject = await prisma.project.findFirst({\n      where: {\n        id: projectId,\n        userId: session.user.id\n      },\n      include: {\n        emailSettings: true\n      }\n    })\n\n    if (!existingProject) {\n      return NextResponse.json({ error: 'Project not found' }, { status: 404 })\n    }\n\n    let updatedProject\n\n    if (action === 'archive') {\n      // Archive the project and disable email monitoring\n      updatedProject = await prisma.project.update({\n        where: { id: projectId },\n        data: {\n          status: 'ARCHIVED' as ProjectStatus,\n          updatedAt: new Date(),\n          // Disable email monitoring when archiving\n          emailSettings: {\n            update: {\n              monitoringEnabled: false,\n              updatedAt: new Date()\n            }\n          }\n        },\n        include: {\n          emailSettings: true,\n          _count: {\n            select: {\n              flaggedItems: {\n                where: { status: 'PENDING' }\n              },\n              timelineEntries: true\n            }\n          }\n        }\n      })\n\n      // Log archiving activity in timeline\n      await prisma.timelineEntry.create({\n        data: {\n          title: 'Project Archived',\n          description: `Project \"${existingProject.name}\" has been archived. Email monitoring has been disabled.`,\n          category: 'UPDATE',\n          date: new Date(),\n          impact: 'Project archived and monitoring stopped',\n          projectId: projectId,\n          verified: true\n        }\n      })\n\n    } else {\n      // Handle other project updates\n      updatedProject = await prisma.project.update({\n        where: { id: projectId },\n        data: {\n          ...updateData,\n          updatedAt: new Date()\n        },\n        include: {\n          emailSettings: true,\n          _count: {\n            select: {\n              flaggedItems: {\n                where: { status: 'PENDING' }\n              },\n              timelineEntries: true\n            }\n          }\n        }\n      })\n    }\n\n    return NextResponse.json(updatedProject)\n  } catch (error) {\n    console.error('Error updating project:', error)\n    return NextResponse.json(\n      { error: 'Failed to update project' },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE /api/projects/[id] - Delete project\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { id: projectId } = await params\n\n    // Verify project belongs to user\n    const existingProject = await prisma.project.findFirst({\n      where: {\n        id: projectId,\n        userId: session.user.id\n      }\n    })\n\n    if (!existingProject) {\n      return NextResponse.json({ error: 'Project not found' }, { status: 404 })\n    }\n\n    // Delete project (cascade will handle related records)\n    await prisma.project.delete({\n      where: { id: projectId }\n    })\n\n    return NextResponse.json({ message: 'Project deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting project:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete project' },\n      { status: 500 }\n    )\n  }\n} "],
      names: ["DELETE", "PATCH", "request", "params", "session", "getServerSession", "authOptions", "user", "id", "NextResponse", "json", "error", "status", "projectId", "body", "action", "updateData", "existingProject", "prisma", "project", "findFirst", "where", "userId", "include", "emailSettings", "updatedProject", "update", "data", "updatedAt", "Date", "monitoringEnabled", "_count", "select", "flaggedItems", "timelineEntries", "timelineEntry", "create", "title", "description", "name", "category", "date", "impact", "verified", "console", "delete", "message"],
      mappings: ";;;;;;;;;;;QAiHsBA;eAAAA;;QA1GAC;eAAAA;;;wBAPoB;0BACT;uBACL;wBACL;AAIhB,eAAeA,MACpBC,OAAoB,EACpB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAMC,UAAU,MAAMC,IAAAA,0BAAgB,EAACC,kBAAW;QAElD,IAAI,CAACF,SAASG,MAAMC,IAAI;YACtB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAEJ,IAAIK,SAAS,EAAE,GAAG,MAAMV;QAChC,MAAMW,OAAO,MAAMZ,QAAQQ,IAAI;QAC/B,MAAM,EAAEK,MAAM,EAAE,GAAGC,YAAY,GAAGF;QAElC,iCAAiC;QACjC,MAAMG,kBAAkB,MAAMC,cAAM,CAACC,OAAO,CAACC,SAAS,CAAC;YACrDC,OAAO;gBACLb,IAAIK;gBACJS,QAAQlB,QAAQG,IAAI,CAACC,EAAE;YACzB;YACAe,SAAS;gBACPC,eAAe;YACjB;QACF;QAEA,IAAI,CAACP,iBAAiB;YACpB,OAAOR,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAoB,GAAG;gBAAEC,QAAQ;YAAI;QACzE;QAEA,IAAIa;QAEJ,IAAIV,WAAW,WAAW;YACxB,mDAAmD;YACnDU,iBAAiB,MAAMP,cAAM,CAACC,OAAO,CAACO,MAAM,CAAC;gBAC3CL,OAAO;oBAAEb,IAAIK;gBAAU;gBACvBc,MAAM;oBACJf,QAAQ;oBACRgB,WAAW,IAAIC;oBACf,0CAA0C;oBAC1CL,eAAe;wBACbE,QAAQ;4BACNI,mBAAmB;4BACnBF,WAAW,IAAIC;wBACjB;oBACF;gBACF;gBACAN,SAAS;oBACPC,eAAe;oBACfO,QAAQ;wBACNC,QAAQ;4BACNC,cAAc;gCACZZ,OAAO;oCAAET,QAAQ;gCAAU;4BAC7B;4BACAsB,iBAAiB;wBACnB;oBACF;gBACF;YACF;YAEA,qCAAqC;YACrC,MAAMhB,cAAM,CAACiB,aAAa,CAACC,MAAM,CAAC;gBAChCT,MAAM;oBACJU,OAAO;oBACPC,aAAa,CAAC,SAAS,EAAErB,gBAAgBsB,IAAI,CAAC,wDAAwD,CAAC;oBACvGC,UAAU;oBACVC,MAAM,IAAIZ;oBACVa,QAAQ;oBACR7B,WAAWA;oBACX8B,UAAU;gBACZ;YACF;QAEF,OAAO;YACL,+BAA+B;YAC/BlB,iBAAiB,MAAMP,cAAM,CAACC,OAAO,CAACO,MAAM,CAAC;gBAC3CL,OAAO;oBAAEb,IAAIK;gBAAU;gBACvBc,MAAM;oBACJ,GAAGX,UAAU;oBACbY,WAAW,IAAIC;gBACjB;gBACAN,SAAS;oBACPC,eAAe;oBACfO,QAAQ;wBACNC,QAAQ;4BACNC,cAAc;gCACZZ,OAAO;oCAAET,QAAQ;gCAAU;4BAC7B;4BACAsB,iBAAiB;wBACnB;oBACF;gBACF;YACF;QACF;QAEA,OAAOzB,oBAAY,CAACC,IAAI,CAACe;IAC3B,EAAE,OAAOd,OAAO;QACdiC,QAAQjC,KAAK,CAAC,2BAA2BA;QACzC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA2B,GACpC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAGO,eAAeZ,OACpBE,OAAoB,EACpB,EAAEC,MAAM,EAAuC;IAE/C,IAAI;QACF,MAAMC,UAAU,MAAMC,IAAAA,0BAAgB,EAACC,kBAAW;QAElD,IAAI,CAACF,SAASG,MAAMC,IAAI;YACtB,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAEJ,IAAIK,SAAS,EAAE,GAAG,MAAMV;QAEhC,iCAAiC;QACjC,MAAMc,kBAAkB,MAAMC,cAAM,CAACC,OAAO,CAACC,SAAS,CAAC;YACrDC,OAAO;gBACLb,IAAIK;gBACJS,QAAQlB,QAAQG,IAAI,CAACC,EAAE;YACzB;QACF;QAEA,IAAI,CAACS,iBAAiB;YACpB,OAAOR,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAoB,GAAG;gBAAEC,QAAQ;YAAI;QACzE;QAEA,uDAAuD;QACvD,MAAMM,cAAM,CAACC,OAAO,CAAC0B,MAAM,CAAC;YAC1BxB,OAAO;gBAAEb,IAAIK;YAAU;QACzB;QAEA,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YAAEoC,SAAS;QAA+B;IACrE,EAAE,OAAOnC,OAAO;QACdiC,QAAQjC,KAAK,CAAC,2BAA2BA;QACzC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA2B,GACpC;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "15a7a46d53a43a95117942793de5711809cfb1f2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_g3l0lqjzf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_g3l0lqjzf();
cov_g3l0lqjzf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_g3l0lqjzf().f[0]++;
  cov_g3l0lqjzf().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_g3l0lqjzf().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_g3l0lqjzf().f[1]++;
    cov_g3l0lqjzf().s[4]++;
    return DELETE;
  },
  get PATCH() {
    /* istanbul ignore next */
    cov_g3l0lqjzf().f[2]++;
    cov_g3l0lqjzf().s[5]++;
    return PATCH;
  }
});
const _server =
/* istanbul ignore next */
(cov_g3l0lqjzf().s[6]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_g3l0lqjzf().s[7]++, require("next-auth"));
const _route =
/* istanbul ignore next */
(cov_g3l0lqjzf().s[8]++, require("../../auth/[...nextauth]/route"));
const _prisma =
/* istanbul ignore next */
(cov_g3l0lqjzf().s[9]++, require("../../../lib/prisma"));
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_g3l0lqjzf().f[3]++;
  cov_g3l0lqjzf().s[10]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[11]++, await (0, _nextauth.getServerSession)(_route.authOptions));
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[12]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_g3l0lqjzf().b[0][0]++;
      cov_g3l0lqjzf().s[13]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_g3l0lqjzf().b[0][1]++;
    }
    const {
      id: projectId
    } =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[14]++, await params);
    const body =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[15]++, await request.json());
    const {
      action,
      ...updateData
    } =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[16]++, body);
    // Verify project belongs to user
    const existingProject =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[17]++, await _prisma.prisma.project.findFirst({
      where: {
        id: projectId,
        userId: session.user.id
      },
      include: {
        emailSettings: true
      }
    }));
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[18]++;
    if (!existingProject) {
      /* istanbul ignore next */
      cov_g3l0lqjzf().b[1][0]++;
      cov_g3l0lqjzf().s[19]++;
      return _server.NextResponse.json({
        error: 'Project not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_g3l0lqjzf().b[1][1]++;
    }
    let updatedProject;
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[20]++;
    if (action === 'archive') {
      /* istanbul ignore next */
      cov_g3l0lqjzf().b[2][0]++;
      cov_g3l0lqjzf().s[21]++;
      // Archive the project and disable email monitoring
      updatedProject = await _prisma.prisma.project.update({
        where: {
          id: projectId
        },
        data: {
          status: 'ARCHIVED',
          updatedAt: new Date(),
          // Disable email monitoring when archiving
          emailSettings: {
            update: {
              monitoringEnabled: false,
              updatedAt: new Date()
            }
          }
        },
        include: {
          emailSettings: true,
          _count: {
            select: {
              flaggedItems: {
                where: {
                  status: 'PENDING'
                }
              },
              timelineEntries: true
            }
          }
        }
      });
      // Log archiving activity in timeline
      /* istanbul ignore next */
      cov_g3l0lqjzf().s[22]++;
      await _prisma.prisma.timelineEntry.create({
        data: {
          title: 'Project Archived',
          description: `Project "${existingProject.name}" has been archived. Email monitoring has been disabled.`,
          category: 'UPDATE',
          date: new Date(),
          impact: 'Project archived and monitoring stopped',
          projectId: projectId,
          verified: true
        }
      });
    } else {
      /* istanbul ignore next */
      cov_g3l0lqjzf().b[2][1]++;
      cov_g3l0lqjzf().s[23]++;
      // Handle other project updates
      updatedProject = await _prisma.prisma.project.update({
        where: {
          id: projectId
        },
        data: {
          ...updateData,
          updatedAt: new Date()
        },
        include: {
          emailSettings: true,
          _count: {
            select: {
              flaggedItems: {
                where: {
                  status: 'PENDING'
                }
              },
              timelineEntries: true
            }
          }
        }
      });
    }
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[24]++;
    return _server.NextResponse.json(updatedProject);
  } catch (error) {
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[25]++;
    console.error('Error updating project:', error);
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[26]++;
    return _server.NextResponse.json({
      error: 'Failed to update project'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_g3l0lqjzf().f[4]++;
  cov_g3l0lqjzf().s[27]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[28]++, await (0, _nextauth.getServerSession)(_route.authOptions));
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[29]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_g3l0lqjzf().b[3][0]++;
      cov_g3l0lqjzf().s[30]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_g3l0lqjzf().b[3][1]++;
    }
    const {
      id: projectId
    } =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[31]++, await params);
    // Verify project belongs to user
    const existingProject =
    /* istanbul ignore next */
    (cov_g3l0lqjzf().s[32]++, await _prisma.prisma.project.findFirst({
      where: {
        id: projectId,
        userId: session.user.id
      }
    }));
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[33]++;
    if (!existingProject) {
      /* istanbul ignore next */
      cov_g3l0lqjzf().b[4][0]++;
      cov_g3l0lqjzf().s[34]++;
      return _server.NextResponse.json({
        error: 'Project not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_g3l0lqjzf().b[4][1]++;
    }
    // Delete project (cascade will handle related records)
    cov_g3l0lqjzf().s[35]++;
    await _prisma.prisma.project.delete({
      where: {
        id: projectId
      }
    });
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[36]++;
    return _server.NextResponse.json({
      message: 'Project deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[37]++;
    console.error('Error deleting project:', error);
    /* istanbul ignore next */
    cov_g3l0lqjzf().s[38]++;
    return _server.NextResponse.json({
      error: 'Failed to delete project'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,