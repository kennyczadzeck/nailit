{"version":3,"names":["DELETE","cov_g3l0lqjzf","f","s","PATCH","request","params","session","_nextauth","getServerSession","_route","authOptions","user","id","b","_server","NextResponse","json","error","status","projectId","body","action","updateData","existingProject","_prisma","prisma","project","findFirst","where","userId","include","emailSettings","updatedProject","update","data","updatedAt","Date","monitoringEnabled","_count","select","flaggedItems","timelineEntries","timelineEntry","create","title","description","name","category","date","impact","verified","console","delete","message"],"sources":["/Users/kennyc/code/personal/nailit/app/api/projects/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '../../auth/[...nextauth]/route'\nimport { prisma } from '../../../lib/prisma'\nimport { ProjectStatus } from '@prisma/client'\n\n// PATCH /api/projects/[id] - Update project (including archiving)\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { id: projectId } = await params\n    const body = await request.json()\n    const { action, ...updateData } = body\n\n    // Verify project belongs to user\n    const existingProject = await prisma.project.findFirst({\n      where: {\n        id: projectId,\n        userId: session.user.id\n      },\n      include: {\n        emailSettings: true\n      }\n    })\n\n    if (!existingProject) {\n      return NextResponse.json({ error: 'Project not found' }, { status: 404 })\n    }\n\n    let updatedProject\n\n    if (action === 'archive') {\n      // Archive the project and disable email monitoring\n      updatedProject = await prisma.project.update({\n        where: { id: projectId },\n        data: {\n          status: 'ARCHIVED' as ProjectStatus,\n          updatedAt: new Date(),\n          // Disable email monitoring when archiving\n          emailSettings: {\n            update: {\n              monitoringEnabled: false,\n              updatedAt: new Date()\n            }\n          }\n        },\n        include: {\n          emailSettings: true,\n          _count: {\n            select: {\n              flaggedItems: {\n                where: { status: 'PENDING' }\n              },\n              timelineEntries: true\n            }\n          }\n        }\n      })\n\n      // Log archiving activity in timeline\n      await prisma.timelineEntry.create({\n        data: {\n          title: 'Project Archived',\n          description: `Project \"${existingProject.name}\" has been archived. Email monitoring has been disabled.`,\n          category: 'UPDATE',\n          date: new Date(),\n          impact: 'Project archived and monitoring stopped',\n          projectId: projectId,\n          verified: true\n        }\n      })\n\n    } else {\n      // Handle other project updates\n      updatedProject = await prisma.project.update({\n        where: { id: projectId },\n        data: {\n          ...updateData,\n          updatedAt: new Date()\n        },\n        include: {\n          emailSettings: true,\n          _count: {\n            select: {\n              flaggedItems: {\n                where: { status: 'PENDING' }\n              },\n              timelineEntries: true\n            }\n          }\n        }\n      })\n    }\n\n    return NextResponse.json(updatedProject)\n  } catch (error) {\n    console.error('Error updating project:', error)\n    return NextResponse.json(\n      { error: 'Failed to update project' },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE /api/projects/[id] - Delete project\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { id: projectId } = await params\n\n    // Verify project belongs to user\n    const existingProject = await prisma.project.findFirst({\n      where: {\n        id: projectId,\n        userId: session.user.id\n      }\n    })\n\n    if (!existingProject) {\n      return NextResponse.json({ error: 'Project not found' }, { status: 404 })\n    }\n\n    // Delete project (cascade will handle related records)\n    await prisma.project.delete({\n      where: { id: projectId }\n    })\n\n    return NextResponse.json({ message: 'Project deleted successfully' })\n  } catch (error) {\n    console.error('Error deleting project:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete project' },\n      { status: 500 }\n    )\n  }\n} "],"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","ignoreList":[]}