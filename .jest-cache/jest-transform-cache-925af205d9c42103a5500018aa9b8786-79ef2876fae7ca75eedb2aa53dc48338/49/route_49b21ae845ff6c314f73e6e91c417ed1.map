{"version":3,"sources":["/Users/kennyc/code/personal/nailit/app/api/projects/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '../auth/[...nextauth]/route'\nimport { prisma } from '../../lib/prisma'\n\n// GET /api/projects - Get all projects for authenticated user\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // First check if user has any projects\n    const projectCount = await prisma.project.count({\n      where: {\n        userId: session.user.id\n      }\n    });\n\n    // If no projects, return empty array immediately\n    if (projectCount === 0) {\n      return NextResponse.json([]);\n    }\n\n    // If projects exist, fetch with includes\n    const projects = await prisma.project.findMany({\n      where: {\n        userId: session.user.id\n      },\n      include: {\n        user: true,\n        emailSettings: true,\n        // Use dynamic access to bypass TypeScript issues\n        ...(prisma as any).teamMembers && { teamMembers: true },\n        _count: {\n          select: {\n            flaggedItems: {\n              where: { status: 'PENDING' }\n            },\n            timelineEntries: true\n          }\n        }\n      },\n      orderBy: [\n        {\n          status: 'asc' // ACTIVE comes before ARCHIVED alphabetically\n        },\n        {\n          createdAt: 'desc'\n        }\n      ]\n    })\n\n    return NextResponse.json(projects)\n  } catch (error) {\n    console.error('Error fetching projects:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch projects' },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/projects - Create a new project\nexport async function POST(request: NextRequest) {\n  console.log('=== PROJECT ENDPOINT HIT ===');\n  \n  try {\n    console.log('Step 1: Getting session...');\n    const session = await getServerSession(authOptions)\n    console.log('Session result:', session ? 'Found' : 'Not found', session?.user?.id);\n    \n    if (!session?.user?.id) {\n      console.log('Session validation failed');\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    console.log('Step 2: Parsing request body...');\n    let body;\n    try {\n      body = await request.json()\n      console.log('Body parsed successfully');\n    } catch (parseError) {\n      console.error('Body parsing failed:', parseError);\n      return NextResponse.json({ error: 'Invalid JSON body' }, { status: 400 });\n    }\n    \n    console.log('Step 3: Extracting fields...');\n    const {\n      name,\n      description,\n      teamMembers,\n      address,\n      addressLat,\n      addressLng,\n      budget,\n      startDate,\n      endDate,\n    } = body\n\n    console.log('Received project creation request:', body)\n    \n    // Validate required fields\n    if (!name || !startDate || !address || !endDate || !budget || !description) {\n      console.log('Missing required fields:', { \n        name: !!name, \n        startDate: !!startDate, \n        address: !!address,\n        endDate: !!endDate,\n        budget: !!budget,\n        description: !!description\n      })\n      return NextResponse.json(\n        { error: 'Missing required fields: name, startDate, address, endDate, budget, description' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team members\n    if (!teamMembers || !Array.isArray(teamMembers) || teamMembers.length === 0) {\n      console.log('Team members validation failed:', { teamMembers })\n      return NextResponse.json(\n        { error: 'At least one team member is required' },\n        { status: 400 }\n      )\n    }\n\n    // Check for general contractor\n    const hasGeneralContractor = teamMembers.some(member => \n      member.role === 'GENERAL_CONTRACTOR'\n    );\n\n    if (!hasGeneralContractor) {\n      console.log('No general contractor found in team members:', teamMembers)\n      return NextResponse.json(\n        { error: 'A General Contractor is required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team member structure\n    for (const member of teamMembers) {\n      if (!member.name || !member.email || !member.role) {\n        console.log('Team member validation failed:', member)\n        return NextResponse.json(\n          { error: 'All team members must have name, email, and role' },\n          { status: 400 }\n        )\n      }\n    }\n\n    // Get the general contractor info for backward compatibility\n    const generalContractor = teamMembers.find(member => member.role === 'GENERAL_CONTRACTOR');\n\n    console.log('=== PROJECT CREATION DEBUG ===');\n    console.log('Raw form data received:', {\n      name: typeof name + ': ' + name,\n      description: typeof description + ': ' + description,\n      address: typeof address + ': ' + address,\n      budget: typeof budget + ': ' + budget,\n      startDate: typeof startDate + ': ' + startDate,\n      endDate: typeof endDate + ': ' + endDate,\n      teamMembers: teamMembers.map(m => ({\n        name: typeof m.name + ': ' + m.name,\n        email: typeof m.email + ': ' + m.email,\n        role: typeof m.role + ': ' + m.role\n      }))\n    });\n\n    // Parse and validate budget\n    let parsedBudget: number;\n    try {\n      parsedBudget = typeof budget === 'string' ? parseFloat(budget.replace(/[,$]/g, '')) : Number(budget);\n      if (isNaN(parsedBudget)) {\n        throw new Error('Invalid budget value');\n      }\n      console.log('Parsed budget:', parsedBudget);\n    } catch (error) {\n      console.error('Budget parsing error:', error);\n      return NextResponse.json(\n        { error: 'Invalid budget format' },\n        { status: 400 }\n      )\n    }\n\n    // Parse and validate dates\n    let parsedStartDate: Date, parsedEndDate: Date;\n    try {\n      parsedStartDate = new Date(startDate);\n      parsedEndDate = new Date(endDate);\n      \n      if (isNaN(parsedStartDate.getTime()) || isNaN(parsedEndDate.getTime())) {\n        throw new Error('Invalid date values');\n      }\n      console.log('Parsed dates:', { startDate: parsedStartDate, endDate: parsedEndDate });\n    } catch (error) {\n      console.error('Date parsing error:', error);\n      return NextResponse.json(\n        { error: 'Invalid date format' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team member roles\n    const validRoles = ['GENERAL_CONTRACTOR', 'ARCHITECT_DESIGNER', 'PROJECT_MANAGER'];\n    for (const member of teamMembers) {\n      if (!validRoles.includes(member.role)) {\n        console.error('Invalid role:', member.role);\n        return NextResponse.json(\n          { error: `Invalid role: ${member.role}` },\n          { status: 400 }\n        )\n      }\n    }\n\n    console.log('All validations passed, creating project...');\n\n    // Create project first without nested creates\n    const project = await prisma.project.create({\n      data: {\n        name: String(name),\n        description: String(description),\n        contractor: generalContractor?.name || null,\n        address: String(address),\n        budget: parsedBudget,\n        startDate: parsedStartDate,\n        endDate: parsedEndDate,\n        userId: session.user.id\n      }\n    });\n\n    console.log('Project created successfully:', project.id);\n\n    // For now, let's just return the project without creating team members or email settings\n    // to isolate where the failure is happening\n    console.log('Returning project without creating related records for debugging...');\n    return NextResponse.json(project, { status: 201 })\n\n    /* TEMPORARILY COMMENTED OUT FOR DEBUGGING\n    // Create team members separately using correct model name\n    for (const member of teamMembers) {\n      console.log('Creating team member:', member);\n      try {\n        await (prisma as any).teamMember.create({\n          data: {\n            name: String(member.name),\n            email: String(member.email),\n            role: member.role,\n            projectId: project.id\n          }\n        });\n        console.log('Team member created successfully:', member.name);\n      } catch (error) {\n        console.error('Team member creation failed:', error);\n        throw new Error(`Failed to create team member ${member.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    // Create email settings separately\n    console.log('Creating email settings...');\n    try {\n      await prisma.emailSettings.create({\n        data: {\n          projectId: project.id,\n          monitoringEnabled: true,\n          gmailConnected: true,\n          emailFilters: {\n            contractorEmail: generalContractor?.email,\n            teamEmails: teamMembers.map(member => member.email),\n          },\n          notificationsEnabled: true,\n          weeklyReports: true,\n          highPriorityAlerts: true,\n        }\n      });\n      console.log('Email settings created successfully');\n    } catch (error) {\n      console.error('Email settings creation failed:', error);\n      throw new Error(`Failed to create email settings: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    console.log('Project creation completed successfully');\n\n    return NextResponse.json(project, { status: 201 })\n    */\n  } catch (error) {\n    console.error('Error creating project:', error)\n    return NextResponse.json(\n      { error: 'Failed to create project' },\n      { status: 500 }\n    )\n  }\n} "],"names":["GET","POST","session","getServerSession","authOptions","user","id","NextResponse","json","error","status","projectCount","prisma","project","count","where","userId","projects","findMany","include","emailSettings","teamMembers","_count","select","flaggedItems","timelineEntries","orderBy","createdAt","console","request","log","body","parseError","name","description","address","addressLat","addressLng","budget","startDate","endDate","Array","isArray","length","hasGeneralContractor","some","member","role","email","generalContractor","find","map","m","parsedBudget","parseFloat","replace","Number","isNaN","Error","parsedStartDate","parsedEndDate","Date","getTime","validRoles","includes","create","data","String","contractor"],"mappings":"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"}