{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/fixtures/projects.ts"],"sourcesContent":["/**\n * Centralized Project Test Fixtures\n * Used across BDD, integration, and unit tests\n */\n\nimport { testUsers } from './users'\n\nexport interface TestProject {\n  id: string\n  name: string\n  userId: string\n  contractor?: string\n  architect?: string\n  projectManager?: string\n  status?: 'ACTIVE' | 'COMPLETED' | 'ARCHIVED'\n  budget?: number\n  startDate?: Date\n  expectedEndDate?: Date\n  createdAt?: Date\n  updatedAt?: Date\n  user?: any\n  emailSettings?: any\n  _count?: {\n    flaggedItems: number\n    timelineEntries: number\n  }\n}\n\nexport const testProjects = {\n  // Main test project - kitchen renovation\n  kitchenReno: {\n    id: 'project-1',\n    name: 'Kitchen Renovation',\n    userId: 'user-123',\n    contractor: 'Mike Johnson Construction',\n    architect: 'Sarah Chen Design',\n    status: 'ACTIVE' as const,\n    budget: 75000,\n    startDate: new Date('2024-02-01T00:00:00Z'),\n    expectedEndDate: new Date('2024-04-01T00:00:00Z'),\n    createdAt: new Date('2024-01-15T00:00:00Z'),\n    updatedAt: new Date('2024-01-15T00:00:00Z'),\n    user: testUsers.john,\n    emailSettings: { enabled: true },\n    _count: {\n      flaggedItems: 3,\n      timelineEntries: 7,\n    },\n  },\n\n  // Secondary project - bathroom remodel\n  bathroomRemodel: {\n    id: 'project-2', \n    name: 'Master Bathroom Remodel',\n    userId: 'user-123',\n    contractor: 'Lopez Brothers Construction',\n    status: 'ACTIVE' as const,\n    budget: 25000,\n    startDate: new Date('2024-03-01T00:00:00Z'),\n    expectedEndDate: new Date('2024-05-01T00:00:00Z'),\n    createdAt: new Date('2024-02-01T00:00:00Z'),\n    updatedAt: new Date('2024-02-01T00:00:00Z'),\n    user: testUsers.john,\n    emailSettings: { enabled: true },\n    _count: {\n      flaggedItems: 1,\n      timelineEntries: 3,\n    },\n  },\n\n  // Completed project for historical data\n  deckAddition: {\n    id: 'project-3',\n    name: 'Deck Addition',\n    userId: 'user-123',\n    contractor: 'Outdoor Spaces LLC',\n    projectManager: 'Tom Wilson',\n    status: 'COMPLETED' as const,\n    budget: 15000,\n    startDate: new Date('2023-08-01T00:00:00Z'),\n    expectedEndDate: new Date('2023-10-01T00:00:00Z'),\n    createdAt: new Date('2023-07-15T00:00:00Z'),\n    updatedAt: new Date('2023-10-15T00:00:00Z'),\n    user: testUsers.john,\n    emailSettings: { enabled: false },\n    _count: {\n      flaggedItems: 0,\n      timelineEntries: 12,\n    },\n  },\n\n  // Minimal project for new user scenarios\n  simple: {\n    id: 'project-simple',\n    name: 'Simple Home Project',\n    userId: 'user-456',\n    contractor: 'Basic Construction',\n    status: 'ACTIVE' as const,\n    createdAt: new Date('2024-01-15T00:00:00Z'),\n    updatedAt: new Date('2024-01-15T00:00:00Z'),\n    user: testUsers.jane,\n    emailSettings: { enabled: true },\n    _count: {\n      flaggedItems: 0,\n      timelineEntries: 1,\n    },\n  },\n} as const\n\nexport const projectScenarios = {\n  // User has multiple projects\n  userWithProjects: {\n    userId: 'user-123',\n    projects: [testProjects.kitchenReno, testProjects.bathroomRemodel, testProjects.deckAddition],\n    count: 3,\n  },\n\n  // New user with no projects\n  userWithoutProjects: {\n    userId: 'user-456', \n    projects: [],\n    count: 0,\n  },\n\n  // User with single project\n  userWithSingleProject: {\n    userId: 'user-456',\n    projects: [testProjects.simple],\n    count: 1,\n  },\n\n  // Active projects only\n  activeProjects: {\n    userId: 'user-123',\n    projects: [testProjects.kitchenReno, testProjects.bathroomRemodel],\n    count: 2,\n  },\n}\n\n// Utility functions for creating projects\nexport const createTestProject = (overrides: Partial<TestProject> = {}): TestProject => ({\n  ...testProjects.kitchenReno,\n  ...overrides,\n})\n\nexport const createProjectWithUser = (userId: string, projectOverrides: Partial<TestProject> = {}) => ({\n  ...testProjects.kitchenReno,\n  userId,\n  user: userId === 'user-123' ? testUsers.john : testUsers.jane,\n  ...projectOverrides,\n})\n\nexport const createProjectsForUser = (userId: string, count: number): TestProject[] => {\n  return Array.from({ length: count }, (_, index) => \n    createProjectWithUser(userId, {\n      id: `project-${userId}-${index}`,\n      name: `Project ${index + 1}`,\n    })\n  )\n}\n\n// BDD test helpers\nexport const givenUserHasProjects = (userId: string, count: number = 3) => {\n  if (count === 0) return projectScenarios.userWithoutProjects\n  if (count === 1) return projectScenarios.userWithSingleProject\n  return {\n    userId,\n    projects: createProjectsForUser(userId, count),\n    count,\n  }\n}\n\nexport const givenUserHasNoProjects = (userId: string = 'user-456') => ({\n  userId,\n  projects: [],\n  count: 0,\n}) "],"names":["createProjectWithUser","createProjectsForUser","createTestProject","givenUserHasNoProjects","givenUserHasProjects","projectScenarios","testProjects","kitchenReno","id","name","userId","contractor","architect","status","budget","startDate","Date","expectedEndDate","createdAt","updatedAt","user","testUsers","john","emailSettings","enabled","_count","flaggedItems","timelineEntries","bathroomRemodel","deckAddition","projectManager","simple","jane","userWithProjects","projects","count","userWithoutProjects","userWithSingleProject","activeProjects","overrides","projectOverrides","Array","from","length","_","index"],"mappings":"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"}