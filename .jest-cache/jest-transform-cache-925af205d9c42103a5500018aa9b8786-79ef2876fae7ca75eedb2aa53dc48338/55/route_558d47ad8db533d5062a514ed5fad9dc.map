{"version":3,"names":["cov_1gmrb81lup","actualCoverage","s","PATCH","request","params","f","body","json","action","category","notes","resolvedParams","itemId","id","b","updatedItem","_prisma","prisma","flaggedItem","update","where","data","aiConfidence","status","mLFeedback","create","flaggedItemId","feedback","originalCategory","correctedCategory","confidence","_server","NextResponse","statusMap","confirm","ignore","email_sent","error","updateData","timelineEntry","reviewedAt","Date","userNotes","mlFeedback","findUnique","include","project","title","description","date","emailDate","impact","projectId","verified","fromFlaggedItem","feedbackType","success","item","console"],"sources":["/Users/kennyc/code/personal/nailit/app/api/flagged-items/[id]/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '../../../lib/prisma'\n\n// PATCH /api/flagged-items/[id] - Update flagged item status or category\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const body = await request.json() as { action: string; category?: string; notes?: string };\n    const { action, category, notes } = body;\n    const resolvedParams = await params\n    const itemId = resolvedParams.id\n\n    if (action === 'reclassify' && category) {\n      // Update the category and mark as confirmed with high confidence\n      const updatedItem = await prisma.flaggedItem.update({\n        where: { id: itemId },\n        data: {\n          category: category as 'cost' | 'schedule' | 'scope',\n          aiConfidence: 1.0, // User-corrected classification gets full confidence\n          status: 'confirmed'\n        }\n      })\n\n      // Log the ML feedback\n      await prisma.mLFeedback.create({\n        data: {\n          flaggedItemId: itemId,\n          feedback: 'reclassified',\n          originalCategory: updatedItem.category,\n          correctedCategory: category as 'cost' | 'schedule' | 'scope',\n          confidence: 1.0\n        }\n      })\n\n      return NextResponse.json(updatedItem)\n    }\n\n    // Handle other actions (confirm, ignore, email_sent)\n    const statusMap: Record<string, 'pending' | 'confirmed' | 'ignored' | 'email_sent'> = {\n      confirm: 'confirmed',\n      ignore: 'ignored',\n      email_sent: 'email_sent'\n    }\n\n    if (!action || !statusMap[action]) {\n      return NextResponse.json(\n        { error: 'Invalid action' },\n        { status: 400 }\n      )\n    }\n\n    let updateData: any = {}\n    let timelineEntry = null\n\n    switch (action) {\n      case 'confirm':\n        updateData = {\n          status: 'CONFIRMED',\n          reviewedAt: new Date(),\n          userNotes: notes || null,\n          mlFeedback: 'POSITIVE'\n        }\n\n        // Get the flagged item to create timeline entry\n        const flaggedItem = await prisma.flaggedItem.findUnique({\n          where: { id: itemId },\n          include: { project: true }\n        })\n\n        if (flaggedItem) {\n          // Create corresponding timeline entry\n          timelineEntry = await prisma.timelineEntry.create({\n            data: {\n              title: flaggedItem.title,\n              description: flaggedItem.description,\n              category: flaggedItem.category as 'COST' | 'SCHEDULE' | 'SCOPE' | 'ISSUE' | 'UPDATE',\n              date: flaggedItem.emailDate,\n              impact: flaggedItem.impact,\n              projectId: flaggedItem.projectId,\n              flaggedItemId: itemId,\n              verified: true,\n              fromFlaggedItem: true,\n            }\n          })\n        }\n        break\n\n      case 'ignore':\n        updateData = {\n          status: 'IGNORED',\n          reviewedAt: new Date(),\n          userNotes: notes || null,\n          mlFeedback: 'NEGATIVE'\n        }\n        break\n\n      case 'email_sent':\n        updateData = {\n          status: 'EMAIL_SENT',\n          reviewedAt: new Date(),\n          userNotes: notes || null\n        }\n        break\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid action' },\n          { status: 400 }\n        )\n    }\n\n    // Update the flagged item\n    const updatedItem = await prisma.flaggedItem.update({\n      where: { id: itemId },\n      data: updateData\n    })\n\n    // Log ML feedback\n    const feedbackType = action === 'confirm' ? 'positive' : action === 'ignore' ? 'negative' : 'pending';\n    await prisma.mLFeedback.create({\n      data: {\n        flaggedItemId: itemId,\n        feedback: feedbackType,\n        originalCategory: updatedItem.category as 'cost' | 'schedule' | 'scope' | 'unclassified',\n        confidence: updatedItem.aiConfidence || 0\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      item: updatedItem,\n      timelineEntry\n    })\n  } catch (error) {\n    console.error('Error updating flagged item:', error)\n    return NextResponse.json(\n      { error: 'Failed to update flagged item' },\n      { status: 500 }\n    )\n  }\n} "],"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","ignoreList":[]}