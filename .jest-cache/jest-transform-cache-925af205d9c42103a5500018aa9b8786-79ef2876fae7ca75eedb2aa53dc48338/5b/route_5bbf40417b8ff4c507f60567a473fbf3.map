{"version":3,"names":["cov_8u5884yav","actualCoverage","s","GET","f","_prisma","prisma","$queryRaw","healthCheck","status","timestamp","Date","toISOString","version","b","process","env","npm_package_version","environment","NODE_ENV","database","uptime","memory","used","memoryUsage","heapUsed","total","heapTotal","services","auth","api","_server","NextResponse","json","error","console"],"sources":["/Users/kennyc/code/personal/nailit/app/api/health/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '../../lib/prisma';\n\nexport async function GET() {\n  try {\n    // Check database connectivity\n    await prisma.$queryRaw`SELECT 1`\n    \n    // Check application status\n    const healthCheck = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n      database: 'connected',\n      uptime: process.uptime(),\n      memory: {\n        used: process.memoryUsage().heapUsed / 1024 / 1024,\n        total: process.memoryUsage().heapTotal / 1024 / 1024,\n      },\n      services: {\n        auth: 'available',\n        database: 'connected',\n        api: 'operational'\n      }\n    }\n\n    return NextResponse.json(healthCheck, { status: 200 })\n  } catch (error) {\n    console.error('Health check failed:', error)\n    \n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: 'Database connection failed',\n      services: {\n        auth: 'unknown',\n        database: 'disconnected',\n        api: 'degraded'\n      }\n    }, { status: 503 })\n  }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMI;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;+BAHkB;;;;;;WAAAC,GAAA;;;;;iCAHO;;;iCACN;AAEhB,eAAeA,IAAA;EAAA;EAAAH,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACpB,IAAI;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACF;IACA,MAAMG,OAAA,CAAAC,MAAM,CAACC,SAAS,UAAU;IAEhC;IACA,MAAMC,WAAA;IAAA;IAAA,CAAAR,aAAA,GAAAE,CAAA,OAAc;MAClBO,MAAA,EAAQ;MACRC,SAAA,EAAW,IAAIC,IAAA,GAAOC,WAAW;MACjCC,OAAA;MAAS;MAAA,CAAAb,aAAA,GAAAc,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACC,mBAAmB;MAAA;MAAA,CAAAjB,aAAA,GAAAc,CAAA,UAAI;MAC5CI,WAAA;MAAa;MAAA,CAAAlB,aAAA,GAAAc,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACG,QAAQ;MAAA;MAAA,CAAAnB,aAAA,GAAAc,CAAA,UAAI;MACrCM,QAAA,EAAU;MACVC,MAAA,EAAQN,OAAA,CAAQM,MAAM;MACtBC,MAAA,EAAQ;QACNC,IAAA,EAAMR,OAAA,CAAQS,WAAW,GAAGC,QAAQ,GAAG,OAAO;QAC9CC,KAAA,EAAOX,OAAA,CAAQS,WAAW,GAAGG,SAAS,GAAG,OAAO;MAClD;MACAC,QAAA,EAAU;QACRC,IAAA,EAAM;QACNT,QAAA,EAAU;QACVU,GAAA,EAAK;MACP;IACF;IAAA;IAAA9B,aAAA,GAAAE,CAAA;IAEA,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAACzB,WAAA,EAAa;MAAEC,MAAA,EAAQ;IAAI;EACtD,EAAE,OAAOyB,KAAA,EAAO;IAAA;IAAAlC,aAAA,GAAAE,CAAA;IACdiC,OAAA,CAAQD,KAAK,CAAC,wBAAwBA,KAAA;IAAA;IAAAlC,aAAA,GAAAE,CAAA;IAEtC,OAAO6B,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBxB,MAAA,EAAQ;MACRC,SAAA,EAAW,IAAIC,IAAA,GAAOC,WAAW;MACjCsB,KAAA,EAAO;MACPN,QAAA,EAAU;QACRC,IAAA,EAAM;QACNT,QAAA,EAAU;QACVU,GAAA,EAAK;MACP;IACF,GAAG;MAAErB,MAAA,EAAQ;IAAI;EACnB;AACF","ignoreList":[]}