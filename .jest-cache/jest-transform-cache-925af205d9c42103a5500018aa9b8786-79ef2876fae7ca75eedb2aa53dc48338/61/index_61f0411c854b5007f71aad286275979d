41e63a8c4e8d473dc6090f72ebc95ab7
/**
 * Centralized Test Fixtures Index
 * Single import point for all test fixtures
 */ // User fixtures
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get assertions () {
        return assertions;
    },
    get scenarios () {
        return scenarios;
    },
    get testConfig () {
        return testConfig;
    },
    get testPatterns () {
        return testPatterns;
    }
});
_export_star(require("./users"), exports);
_export_star(require("./projects"), exports);
_export_star(require("./api-responses"), exports);
_export_star(require("../helpers/mockPrisma"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
const testConfig = {
    // Default test dates
    dates: {
        past: new Date('2023-01-01T00:00:00Z'),
        recent: new Date('2024-01-01T00:00:00Z'),
        future: new Date('2024-12-31T00:00:00Z')
    },
    // Test environment
    env: {
        testDatabaseUrl: 'postgresql://test:test@localhost:5432/nailit_test',
        jestTimeout: 30000
    },
    // Mock configuration
    mocks: {
        defaultDelay: 100,
        networkTimeout: 5000
    }
};
const testPatterns = {
    // Database patterns
    database: {
        userId: /^user-\w+$/,
        projectId: /^project-\w+$/,
        email: /^[\w\.-]+@[\w\.-]+\.\w+$/
    },
    // UI patterns
    ui: {
        buttonText: /^(Create|Save|Cancel|Delete|Edit)$/,
        loadingText: /^(Loading|Saving|Creating)\.\.\.$/,
        errorMessage: /^(Error|Failed|Unable to)/
    },
    // API patterns
    api: {
        successStatus: [
            200,
            201,
            204
        ],
        errorStatus: [
            400,
            401,
            403,
            404,
            500
        ],
        jsonContentType: 'application/json'
    }
};
const scenarios = {
    // Authentication scenarios
    auth: {
        authenticated: ()=>({
                description: 'user is authenticated',
                setup: ()=>({
                        authenticated: true
                    })
            }),
        unauthenticated: ()=>({
                description: 'user is not authenticated',
                setup: ()=>({
                        authenticated: false
                    })
            })
    },
    // Project scenarios
    projects: {
        hasProjects: (count = 3)=>({
                description: `user has ${count} project${count !== 1 ? 's' : ''}`,
                setup: ()=>({
                        projectCount: count
                    })
            }),
        noProjects: ()=>({
                description: 'user has no projects',
                setup: ()=>({
                        projectCount: 0
                    })
            })
    },
    // API scenarios
    api: {
        success: (data)=>({
                description: 'API returns success',
                setup: ()=>({
                        apiResponse: {
                            status: 200,
                            data
                        }
                    })
            }),
        error: (status, message)=>({
                description: `API returns ${status} error`,
                setup: ()=>({
                        apiResponse: {
                            status,
                            error: message
                        }
                    })
            })
    }
};
const assertions = {
    // Common expectations
    shouldSeeText: (text)=>expect(document.body).toHaveTextContent(text),
    shouldSeeButton: (text)=>expect(document.querySelector(`button:contains("${text}")`)).toBeInTheDocument(),
    shouldNotSeeText: (text)=>expect(document.body).not.toHaveTextContent(text),
    // API expectations
    shouldCallApi: (mockFetch, url, method = 'GET')=>{
        expect(mockFetch).toHaveBeenCalledWith(expect.stringContaining(url), expect.objectContaining({
            method
        }));
    },
    shouldNotCallApi: (mockFetch)=>{
        expect(mockFetch).not.toHaveBeenCalled();
    }
};

//# sourceMappingURL=data:application/json;base64,