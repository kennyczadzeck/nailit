{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/fixtures/index.ts"],"sourcesContent":["/**\n * Centralized Test Fixtures Index\n * Single import point for all test fixtures\n */\n\n// User fixtures\nexport * from './users'\n\n// Project fixtures  \nexport * from './projects'\n\n// API response fixtures\nexport * from './api-responses'\n\n// Mock utilities\nexport * from '../helpers/mockPrisma'\n\n// Common test utilities\nexport const testConfig = {\n  // Default test dates\n  dates: {\n    past: new Date('2023-01-01T00:00:00Z'),\n    recent: new Date('2024-01-01T00:00:00Z'),\n    future: new Date('2024-12-31T00:00:00Z'),\n  },\n\n  // Test environment\n  env: {\n    testDatabaseUrl: 'postgresql://test:test@localhost:5432/nailit_test',\n    jestTimeout: 30000,\n  },\n\n  // Mock configuration\n  mocks: {\n    defaultDelay: 100,\n    networkTimeout: 5000,\n  },\n} as const\n\n// Common test patterns\nexport const testPatterns = {\n  // Database patterns\n  database: {\n    userId: /^user-\\w+$/,\n    projectId: /^project-\\w+$/,\n    email: /^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$/,\n  },\n\n  // UI patterns\n  ui: {\n    buttonText: /^(Create|Save|Cancel|Delete|Edit)$/,\n    loadingText: /^(Loading|Saving|Creating)\\.\\.\\.$/,\n    errorMessage: /^(Error|Failed|Unable to)/,\n  },\n\n  // API patterns\n  api: {\n    successStatus: [200, 201, 204],\n    errorStatus: [400, 401, 403, 404, 500],\n    jsonContentType: 'application/json',\n  },\n} as const\n\n// BDD scenario builders\nexport const scenarios = {\n  // Authentication scenarios\n  auth: {\n    authenticated: () => ({\n      description: 'user is authenticated',\n      setup: () => ({ authenticated: true }),\n    }),\n    unauthenticated: () => ({\n      description: 'user is not authenticated', \n      setup: () => ({ authenticated: false }),\n    }),\n  },\n\n  // Project scenarios\n  projects: {\n    hasProjects: (count: number = 3) => ({\n      description: `user has ${count} project${count !== 1 ? 's' : ''}`,\n      setup: () => ({ projectCount: count }),\n    }),\n    noProjects: () => ({\n      description: 'user has no projects',\n      setup: () => ({ projectCount: 0 }),\n    }),\n  },\n\n  // API scenarios\n  api: {\n    success: (data: any) => ({\n      description: 'API returns success',\n      setup: () => ({ apiResponse: { status: 200, data } }),\n    }),\n    error: (status: number, message: string) => ({\n      description: `API returns ${status} error`,\n      setup: () => ({ apiResponse: { status, error: message } }),\n    }),\n  },\n} as const\n\n// Test assertion helpers\nexport const assertions = {\n  // Common expectations\n  shouldSeeText: (text: string) => \n    expect(document.body).toHaveTextContent(text),\n  \n  shouldSeeButton: (text: string) =>\n    expect(document.querySelector(`button:contains(\"${text}\")`)).toBeInTheDocument(),\n  \n  shouldNotSeeText: (text: string) =>\n    expect(document.body).not.toHaveTextContent(text),\n\n  // API expectations\n  shouldCallApi: (mockFetch: jest.Mock, url: string, method: string = 'GET') => {\n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringContaining(url),\n      expect.objectContaining({ method })\n    )\n  },\n\n  shouldNotCallApi: (mockFetch: jest.Mock) => {\n    expect(mockFetch).not.toHaveBeenCalled()\n  },\n} as const "],"names":["assertions","scenarios","testConfig","testPatterns","dates","past","Date","recent","future","env","testDatabaseUrl","jestTimeout","mocks","defaultDelay","networkTimeout","database","userId","projectId","email","ui","buttonText","loadingText","errorMessage","api","successStatus","errorStatus","jsonContentType","auth","authenticated","description","setup","unauthenticated","projects","hasProjects","count","projectCount","noProjects","success","data","apiResponse","status","error","message","shouldSeeText","text","expect","document","body","toHaveTextContent","shouldSeeButton","querySelector","toBeInTheDocument","shouldNotSeeText","not","shouldCallApi","mockFetch","url","method","toHaveBeenCalledWith","stringContaining","objectContaining","shouldNotCallApi","toHaveBeenCalled"],"mappings":"AAAA;;;CAGC,GAED,gBAAgB;;;;;;;;;;;;QAkGHA;eAAAA;;QAvCAC;eAAAA;;QA9CAC;eAAAA;;QAsBAC;eAAAA;;;qBAlCC;qBAGA;qBAGA;qBAGA;;;;;;;;;;;;;;AAGP,MAAMD,aAAa;IACxB,qBAAqB;IACrBE,OAAO;QACLC,MAAM,IAAIC,KAAK;QACfC,QAAQ,IAAID,KAAK;QACjBE,QAAQ,IAAIF,KAAK;IACnB;IAEA,mBAAmB;IACnBG,KAAK;QACHC,iBAAiB;QACjBC,aAAa;IACf;IAEA,qBAAqB;IACrBC,OAAO;QACLC,cAAc;QACdC,gBAAgB;IAClB;AACF;AAGO,MAAMX,eAAe;IAC1B,oBAAoB;IACpBY,UAAU;QACRC,QAAQ;QACRC,WAAW;QACXC,OAAO;IACT;IAEA,cAAc;IACdC,IAAI;QACFC,YAAY;QACZC,aAAa;QACbC,cAAc;IAChB;IAEA,eAAe;IACfC,KAAK;QACHC,eAAe;YAAC;YAAK;YAAK;SAAI;QAC9BC,aAAa;YAAC;YAAK;YAAK;YAAK;YAAK;SAAI;QACtCC,iBAAiB;IACnB;AACF;AAGO,MAAMzB,YAAY;IACvB,2BAA2B;IAC3B0B,MAAM;QACJC,eAAe,IAAO,CAAA;gBACpBC,aAAa;gBACbC,OAAO,IAAO,CAAA;wBAAEF,eAAe;oBAAK,CAAA;YACtC,CAAA;QACAG,iBAAiB,IAAO,CAAA;gBACtBF,aAAa;gBACbC,OAAO,IAAO,CAAA;wBAAEF,eAAe;oBAAM,CAAA;YACvC,CAAA;IACF;IAEA,oBAAoB;IACpBI,UAAU;QACRC,aAAa,CAACC,QAAgB,CAAC,GAAM,CAAA;gBACnCL,aAAa,CAAC,SAAS,EAAEK,MAAM,QAAQ,EAAEA,UAAU,IAAI,MAAM,IAAI;gBACjEJ,OAAO,IAAO,CAAA;wBAAEK,cAAcD;oBAAM,CAAA;YACtC,CAAA;QACAE,YAAY,IAAO,CAAA;gBACjBP,aAAa;gBACbC,OAAO,IAAO,CAAA;wBAAEK,cAAc;oBAAE,CAAA;YAClC,CAAA;IACF;IAEA,gBAAgB;IAChBZ,KAAK;QACHc,SAAS,CAACC,OAAe,CAAA;gBACvBT,aAAa;gBACbC,OAAO,IAAO,CAAA;wBAAES,aAAa;4BAAEC,QAAQ;4BAAKF;wBAAK;oBAAE,CAAA;YACrD,CAAA;QACAG,OAAO,CAACD,QAAgBE,UAAqB,CAAA;gBAC3Cb,aAAa,CAAC,YAAY,EAAEW,OAAO,MAAM,CAAC;gBAC1CV,OAAO,IAAO,CAAA;wBAAES,aAAa;4BAAEC;4BAAQC,OAAOC;wBAAQ;oBAAE,CAAA;YAC1D,CAAA;IACF;AACF;AAGO,MAAM1C,aAAa;IACxB,sBAAsB;IACtB2C,eAAe,CAACC,OACdC,OAAOC,SAASC,IAAI,EAAEC,iBAAiB,CAACJ;IAE1CK,iBAAiB,CAACL,OAChBC,OAAOC,SAASI,aAAa,CAAC,CAAC,iBAAiB,EAAEN,KAAK,EAAE,CAAC,GAAGO,iBAAiB;IAEhFC,kBAAkB,CAACR,OACjBC,OAAOC,SAASC,IAAI,EAAEM,GAAG,CAACL,iBAAiB,CAACJ;IAE9C,mBAAmB;IACnBU,eAAe,CAACC,WAAsBC,KAAaC,SAAiB,KAAK;QACvEZ,OAAOU,WAAWG,oBAAoB,CACpCb,OAAOc,gBAAgB,CAACH,MACxBX,OAAOe,gBAAgB,CAAC;YAAEH;QAAO;IAErC;IAEAI,kBAAkB,CAACN;QACjBV,OAAOU,WAAWF,GAAG,CAACS,gBAAgB;IACxC;AACF"}