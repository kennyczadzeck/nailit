2d58ed5f291f843bb8b32677ea44dcbd
/**
 * Feature: Authentication
 * All authentication-related tests (BDD, integration, unit)
 * Based on NailedIt MVP Product Requirements
 */ "use strict";
// Mock NextAuth and navigation
jest.mock('next-auth/react', ()=>({
        signIn: jest.fn(),
        signOut: jest.fn(),
        useSession: jest.fn(),
        SessionProvider: ({ children })=>children
    }));
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn(()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn()
            })),
        useSearchParams: jest.fn(()=>new URLSearchParams()),
        usePathname: jest.fn(()=>'/')
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _react2 = require("next-auth/react");
const _navigation = require("next/navigation");
const _fixtures = require("../../fixtures");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock components for testing
const MockSignInPage = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Sign In to NailIt"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>(0, _react2.signIn)('google'),
                children: "Continue with Google"
            })
        ]
    });
const MockHomePage = ()=>{
    const { data: session, status } = (0, _react2.useSession)();
    if (status === 'loading') return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: "Loading..."
    });
    if (session?.user) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("h1", {
                    children: [
                        "Welcome back, ",
                        session.user.name,
                        "!"
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                    children: "Your Projects"
                })
            ]
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Track your home project progress with NailIt"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>(0, _react2.signIn)('google'),
                children: "Get started with Google"
            })
        ]
    });
};
describe('Feature: Authentication', ()=>{
    const mockPush = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        _navigation.useRouter.mockReturnValue({
            push: mockPush
        });
    });
    /**
   * BDD Tests: User Story Implementation
   */ describe('BDD: User Stories', ()=>{
        describe('User Story: Signup', ()=>{
            test('Given homeowner does not have account, When they click signup CTA, Then they are prompted to login with Google', ()=>{
                // Given: homeowner does not have a Nailit account
                ;
                _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
                // When: they click the signup CTA
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSignInPage, {}));
                const signupButton = _react1.screen.getByText('Continue with Google');
                _react1.fireEvent.click(signupButton);
                // Then: they will be prompted to 'login with Google' as their identity provider
                expect(_react2.signIn).toHaveBeenCalledWith('google');
            });
        });
        describe('User Story: Login', ()=>{
            test('Given homeowner has account but no active session, When they click login CTA, Then they login with Google', ()=>{
                // Given: homeowner does have an account but no active Nailit session
                ;
                _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
                // When: they click the login CTA
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSignInPage, {}));
                const loginButton = _react1.screen.getByText('Continue with Google');
                _react1.fireEvent.click(loginButton);
                // Then: they will need to login with Google
                expect(_react2.signIn).toHaveBeenCalledWith('google');
            });
        });
        describe('User Story: Value Proposition', ()=>{
            test('Given I am not authenticated, When I visit homepage, Then I see value proposition', ()=>{
                // Given: User is not authenticated
                ;
                _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
                // When: I visit the homepage
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
                // Then: I should see the value proposition
                expect(_react1.screen.getByText('Track your home project progress with NailIt')).toBeInTheDocument();
                expect(_react1.screen.getByText('Get started with Google')).toBeInTheDocument();
            });
        });
    });
    /**
   * Integration Tests: Authentication Flow
   */ describe('Integration: Authentication Flow', ()=>{
        test('Given I am authenticated, When I visit homepage, Then I see dashboard', ()=>{
            // Given: User is authenticated
            ;
            _react2.useSession.mockReturnValue((0, _fixtures.createAuthenticatedSession)(_fixtures.testUsers.john));
            // When: I visit the homepage
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            // Then: I should see my dashboard
            expect(_react1.screen.getByText('Welcome back, John Homeowner!')).toBeInTheDocument();
            expect(_react1.screen.getByText('Your Projects')).toBeInTheDocument();
        });
        test('Given session expires, When I access protected content, Then I see loading state', ()=>{
            // Given: Session has expired (loading state)
            ;
            _react2.useSession.mockReturnValue({
                data: null,
                status: 'loading'
            });
            // When: I try to access protected content  
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            // Then: I should see loading state
            expect(_react1.screen.getByText('Loading...')).toBeInTheDocument();
        });
    });
    /**
   * Unit Tests: Authentication Components
   */ describe('Unit: Authentication Components', ()=>{
        test('SignIn component renders and handles Google OAuth', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSignInPage, {}));
            expect(_react1.screen.getByText('Sign In to NailIt')).toBeInTheDocument();
            expect(_react1.screen.getByText('Continue with Google')).toBeInTheDocument();
        });
        test('Homepage adapts to authentication state', ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            expect(_react1.screen.getByText(/Get started with Google/)).toBeInTheDocument();
            _react2.useSession.mockReturnValue((0, _fixtures.createAuthenticatedSession)(_fixtures.testUsers.john));
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            expect(_react1.screen.getByText(/Welcome back/)).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,