{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/features/authentication/authentication.test.tsx"],"sourcesContent":["/**\n * Feature: Authentication\n * All authentication-related tests (BDD, integration, unit)\n * Based on NailedIt MVP Product Requirements\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { signIn, useSession } from 'next-auth/react'\nimport { useRouter } from 'next/navigation'\n\n// Use centralized fixtures\nimport { \n  testUsers, \n  createAuthenticatedSession,\n  createUnauthenticatedSession\n} from '../../fixtures'\n\n// Mock NextAuth and navigation\njest.mock('next-auth/react', () => ({\n  signIn: jest.fn(),\n  signOut: jest.fn(),\n  useSession: jest.fn(),\n  SessionProvider: ({ children }: { children: React.ReactNode }) => children,\n}))\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(() => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n  })),\n  useSearchParams: jest.fn(() => new URLSearchParams()),\n  usePathname: jest.fn(() => '/'),\n}))\n\n// Mock components for testing\nconst MockSignInPage = () => (\n  <div>\n    <h1>Sign In to NailIt</h1>\n    <button onClick={() => signIn('google')}>Continue with Google</button>\n  </div>\n)\n\nconst MockHomePage = () => {\n  const { data: session, status } = useSession()\n  \n  if (status === 'loading') return <div>Loading...</div>\n  \n  if (session?.user) {\n    return (\n      <div>\n        <h1>Welcome back, {session.user.name}!</h1>\n        <h2>Your Projects</h2>\n      </div>\n    )\n  }\n  \n  return (\n    <div>\n      <h1>Track your home project progress with NailIt</h1>\n      <button onClick={() => signIn('google')}>Get started with Google</button>\n    </div>\n  )\n}\n\ndescribe('Feature: Authentication', () => {\n  const mockPush = jest.fn()\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    ;(useRouter as jest.Mock).mockReturnValue({ push: mockPush })\n  })\n\n  /**\n   * BDD Tests: User Story Implementation\n   */\n  describe('BDD: User Stories', () => {\n    describe('User Story: Signup', () => {\n      test('Given homeowner does not have account, When they click signup CTA, Then they are prompted to login with Google', () => {\n        // Given: homeowner does not have a Nailit account\n        ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n        \n        // When: they click the signup CTA\n        render(<MockSignInPage />)\n        const signupButton = screen.getByText('Continue with Google')\n        fireEvent.click(signupButton)\n        \n        // Then: they will be prompted to 'login with Google' as their identity provider\n        expect(signIn).toHaveBeenCalledWith('google')\n      })\n    })\n\n    describe('User Story: Login', () => {\n      test('Given homeowner has account but no active session, When they click login CTA, Then they login with Google', () => {\n        // Given: homeowner does have an account but no active Nailit session\n        ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n        \n        // When: they click the login CTA\n        render(<MockSignInPage />)\n        const loginButton = screen.getByText('Continue with Google')\n        fireEvent.click(loginButton)\n        \n        // Then: they will need to login with Google\n        expect(signIn).toHaveBeenCalledWith('google')\n      })\n    })\n\n    describe('User Story: Value Proposition', () => {\n      test('Given I am not authenticated, When I visit homepage, Then I see value proposition', () => {\n        // Given: User is not authenticated\n        ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n\n        // When: I visit the homepage\n        render(<MockHomePage />)\n\n        // Then: I should see the value proposition\n        expect(screen.getByText('Track your home project progress with NailIt')).toBeInTheDocument()\n        expect(screen.getByText('Get started with Google')).toBeInTheDocument()\n      })\n    })\n  })\n\n  /**\n   * Integration Tests: Authentication Flow\n   */\n  describe('Integration: Authentication Flow', () => {\n    test('Given I am authenticated, When I visit homepage, Then I see dashboard', () => {\n      // Given: User is authenticated\n      ;(useSession as jest.Mock).mockReturnValue(createAuthenticatedSession(testUsers.john))\n\n      // When: I visit the homepage\n      render(<MockHomePage />)\n\n      // Then: I should see my dashboard\n      expect(screen.getByText('Welcome back, John Homeowner!')).toBeInTheDocument()\n      expect(screen.getByText('Your Projects')).toBeInTheDocument()\n    })\n\n    test('Given session expires, When I access protected content, Then I see loading state', () => {\n      // Given: Session has expired (loading state)\n      ;(useSession as jest.Mock).mockReturnValue({\n        data: null,\n        status: 'loading'\n      })\n\n      // When: I try to access protected content  \n      render(<MockHomePage />)\n\n      // Then: I should see loading state\n      expect(screen.getByText('Loading...')).toBeInTheDocument()\n    })\n  })\n\n  /**\n   * Unit Tests: Authentication Components\n   */\n  describe('Unit: Authentication Components', () => {\n    test('SignIn component renders and handles Google OAuth', () => {\n      render(<MockSignInPage />)\n      \n      expect(screen.getByText('Sign In to NailIt')).toBeInTheDocument()\n      expect(screen.getByText('Continue with Google')).toBeInTheDocument()\n    })\n\n    test('Homepage adapts to authentication state', () => {\n      const { rerender } = render(<MockHomePage />)\n      \n      // Test unauthenticated state\n      ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n      rerender(<MockHomePage />)\n      expect(screen.getByText(/Get started with Google/)).toBeInTheDocument()\n      \n      // Test authenticated state\n      ;(useSession as jest.Mock).mockReturnValue(createAuthenticatedSession(testUsers.john))\n      rerender(<MockHomePage />)\n      expect(screen.getByText(/Welcome back/)).toBeInTheDocument()\n    })\n  })\n}) "],"names":["jest","mock","signIn","fn","signOut","useSession","SessionProvider","children","useRouter","push","replace","back","useSearchParams","URLSearchParams","usePathname","MockSignInPage","div","h1","button","onClick","MockHomePage","data","session","status","user","name","h2","describe","mockPush","beforeEach","clearAllMocks","mockReturnValue","test","createUnauthenticatedSession","render","signupButton","screen","getByText","fireEvent","click","expect","toHaveBeenCalledWith","loginButton","toBeInTheDocument","createAuthenticatedSession","testUsers","john","rerender"],"mappings":"AAAA;;;;CAIC;AAcD,+BAA+B;AAC/BA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,QAAQF,KAAKG,EAAE;QACfC,SAASJ,KAAKG,EAAE;QAChBE,YAAYL,KAAKG,EAAE;QACnBG,iBAAiB,CAAC,EAAEC,QAAQ,EAAiC,GAAKA;IACpE,CAAA;AAEAP,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCO,WAAWR,KAAKG,EAAE,CAAC,IAAO,CAAA;gBACxBM,MAAMT,KAAKG,EAAE;gBACbO,SAASV,KAAKG,EAAE;gBAChBQ,MAAMX,KAAKG,EAAE;YACf,CAAA;QACAS,iBAAiBZ,KAAKG,EAAE,CAAC,IAAM,IAAIU;QACnCC,aAAad,KAAKG,EAAE,CAAC,IAAM;IAC7B,CAAA;;;;;8DA5BkB;wBACwB;wBACP;4BACT;0BAOnB;;;;;;AAoBP,8BAA8B;AAC9B,MAAMY,iBAAiB,kBACrB,sBAACC;;0BACC,qBAACC;0BAAG;;0BACJ,qBAACC;gBAAOC,SAAS,IAAMjB,IAAAA,cAAM,EAAC;0BAAW;;;;AAI7C,MAAMkB,eAAe;IACnB,MAAM,EAAEC,MAAMC,OAAO,EAAEC,MAAM,EAAE,GAAGlB,IAAAA,kBAAU;IAE5C,IAAIkB,WAAW,WAAW,qBAAO,qBAACP;kBAAI;;IAEtC,IAAIM,SAASE,MAAM;QACjB,qBACE,sBAACR;;8BACC,sBAACC;;wBAAG;wBAAeK,QAAQE,IAAI,CAACC,IAAI;wBAAC;;;8BACrC,qBAACC;8BAAG;;;;IAGV;IAEA,qBACE,sBAACV;;0BACC,qBAACC;0BAAG;;0BACJ,qBAACC;gBAAOC,SAAS,IAAMjB,IAAAA,cAAM,EAAC;0BAAW;;;;AAG/C;AAEAyB,SAAS,2BAA2B;IAClC,MAAMC,WAAW5B,KAAKG,EAAE;IAExB0B,WAAW;QACT7B,KAAK8B,aAAa;QAChBtB,qBAAS,CAAeuB,eAAe,CAAC;YAAEtB,MAAMmB;QAAS;IAC7D;IAEA;;GAEC,GACDD,SAAS,qBAAqB;QAC5BA,SAAS,sBAAsB;YAC7BK,KAAK,kHAAkH;gBACrH,kDAAkD;;gBAChD3B,kBAAU,CAAe0B,eAAe,CAACE,IAAAA,sCAA4B;gBAEvE,kCAAkC;gBAClCC,IAAAA,cAAM,gBAAC,qBAACnB;gBACR,MAAMoB,eAAeC,cAAM,CAACC,SAAS,CAAC;gBACtCC,iBAAS,CAACC,KAAK,CAACJ;gBAEhB,gFAAgF;gBAChFK,OAAOtC,cAAM,EAAEuC,oBAAoB,CAAC;YACtC;QACF;QAEAd,SAAS,qBAAqB;YAC5BK,KAAK,6GAA6G;gBAChH,qEAAqE;;gBACnE3B,kBAAU,CAAe0B,eAAe,CAACE,IAAAA,sCAA4B;gBAEvE,iCAAiC;gBACjCC,IAAAA,cAAM,gBAAC,qBAACnB;gBACR,MAAM2B,cAAcN,cAAM,CAACC,SAAS,CAAC;gBACrCC,iBAAS,CAACC,KAAK,CAACG;gBAEhB,4CAA4C;gBAC5CF,OAAOtC,cAAM,EAAEuC,oBAAoB,CAAC;YACtC;QACF;QAEAd,SAAS,iCAAiC;YACxCK,KAAK,qFAAqF;gBACxF,mCAAmC;;gBACjC3B,kBAAU,CAAe0B,eAAe,CAACE,IAAAA,sCAA4B;gBAEvE,6BAA6B;gBAC7BC,IAAAA,cAAM,gBAAC,qBAACd;gBAER,2CAA2C;gBAC3CoB,OAAOJ,cAAM,CAACC,SAAS,CAAC,iDAAiDM,iBAAiB;gBAC1FH,OAAOJ,cAAM,CAACC,SAAS,CAAC,4BAA4BM,iBAAiB;YACvE;QACF;IACF;IAEA;;GAEC,GACDhB,SAAS,oCAAoC;QAC3CK,KAAK,yEAAyE;YAC5E,+BAA+B;;YAC7B3B,kBAAU,CAAe0B,eAAe,CAACa,IAAAA,oCAA0B,EAACC,mBAAS,CAACC,IAAI;YAEpF,6BAA6B;YAC7BZ,IAAAA,cAAM,gBAAC,qBAACd;YAER,kCAAkC;YAClCoB,OAAOJ,cAAM,CAACC,SAAS,CAAC,kCAAkCM,iBAAiB;YAC3EH,OAAOJ,cAAM,CAACC,SAAS,CAAC,kBAAkBM,iBAAiB;QAC7D;QAEAX,KAAK,oFAAoF;YACvF,6CAA6C;;YAC3C3B,kBAAU,CAAe0B,eAAe,CAAC;gBACzCV,MAAM;gBACNE,QAAQ;YACV;YAEA,4CAA4C;YAC5CW,IAAAA,cAAM,gBAAC,qBAACd;YAER,mCAAmC;YACnCoB,OAAOJ,cAAM,CAACC,SAAS,CAAC,eAAeM,iBAAiB;QAC1D;IACF;IAEA;;GAEC,GACDhB,SAAS,mCAAmC;QAC1CK,KAAK,qDAAqD;YACxDE,IAAAA,cAAM,gBAAC,qBAACnB;YAERyB,OAAOJ,cAAM,CAACC,SAAS,CAAC,sBAAsBM,iBAAiB;YAC/DH,OAAOJ,cAAM,CAACC,SAAS,CAAC,yBAAyBM,iBAAiB;QACpE;QAEAX,KAAK,2CAA2C;YAC9C,MAAM,EAAEe,QAAQ,EAAE,GAAGb,IAAAA,cAAM,gBAAC,qBAACd;YAG3Bf,kBAAU,CAAe0B,eAAe,CAACE,IAAAA,sCAA4B;YACvEc,uBAAS,qBAAC3B;YACVoB,OAAOJ,cAAM,CAACC,SAAS,CAAC,4BAA4BM,iBAAiB;YAGnEtC,kBAAU,CAAe0B,eAAe,CAACa,IAAAA,oCAA0B,EAACC,mBAAS,CAACC,IAAI;YACpFC,uBAAS,qBAAC3B;YACVoB,OAAOJ,cAAM,CAACC,SAAS,CAAC,iBAAiBM,iBAAiB;QAC5D;IACF;AACF"}