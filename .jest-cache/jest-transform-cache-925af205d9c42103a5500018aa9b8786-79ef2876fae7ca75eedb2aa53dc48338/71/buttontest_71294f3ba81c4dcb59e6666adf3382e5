a94884e8a405ba8fdafca2ec53a0e1a1
/**
 * Feature: Button Component
 * All button component tests (BDD, unit, integration)
 * Comprehensive testing of UI component behavior
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _Button = require("../../../app/components/ui/Button");
const _testUtils = require("../../helpers/testUtils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Feature: Button Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    /**
   * BDD Tests: User Experience Stories
   */ describe('BDD: User Stories', ()=>{
        _testUtils.bddHelpers.userStory('Primary Button Interaction', ()=>{
            test('Given I see a primary button, When I click it, Then the action is triggered', ()=>{
                // Given: I see a primary button
                const mockOnClick = jest.fn();
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    variant: "primary",
                    onClick: mockOnClick,
                    children: "Click me"
                }));
                // When: I click the button
                const button = _react1.screen.getByRole('button', {
                    name: /click me/i
                });
                _react1.fireEvent.click(button);
                // Then: the action should be triggered
                expect(mockOnClick).toHaveBeenCalledTimes(1);
            });
        });
        _testUtils.bddHelpers.userStory('Secondary Button Styling', ()=>{
            test('Given I see a secondary button, When I view it, Then it has the correct appearance', ()=>{
                // Given: I see a secondary button
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    variant: "secondary",
                    children: "Secondary Action"
                }));
                // When: I view the button
                const button = _react1.screen.getByRole('button', {
                    name: /secondary action/i
                });
                // Then: it should have the correct styling
                expect(button).toBeInTheDocument();
                expect(button).toHaveClass('bg-[#1A73E8]') // secondary variant styles
                ;
            });
        });
        _testUtils.bddHelpers.userStory('Disabled Button State', ()=>{
            test('Given I see a disabled button, When I try to click it, Then no action occurs', ()=>{
                // Given: I see a disabled button
                const mockOnClick = jest.fn();
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    disabled: true,
                    onClick: mockOnClick,
                    children: "Disabled"
                }));
                // When: I try to click the button
                const button = _react1.screen.getByRole('button', {
                    name: /disabled/i
                });
                _react1.fireEvent.click(button);
                // Then: no action should occur
                expect(mockOnClick).not.toHaveBeenCalled();
                expect(button).toBeDisabled();
            });
        });
        _testUtils.bddHelpers.userStory('Button Size Variants', ()=>{
            test('Given I need different button sizes, When I specify size, Then correct styling is applied', ()=>{
                // Given: I need different button sizes
                const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    size: "sm",
                    children: "Small"
                }));
                // When: I specify small size
                let button = _react1.screen.getByRole('button');
                expect(button).toHaveClass('px-3', 'py-1.5', 'text-sm');
                // When: I specify large size
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    size: "lg",
                    children: "Large"
                }));
                button = _react1.screen.getByRole('button');
                expect(button).toHaveClass('px-6', 'py-3', 'text-base');
            });
        });
        _testUtils.bddHelpers.userStory('Button Type Attribute', ()=>{
            test('Given I need form submission, When I set type to submit, Then button acts as submit button', ()=>{
                // Given: I need form submission
                const mockSubmit = jest.fn();
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
                    onSubmit: mockSubmit,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                        type: "submit",
                        children: "Submit Form"
                    })
                }));
                // When: I set type to submit and click
                const button = _react1.screen.getByRole('button', {
                    name: /submit form/i
                });
                expect(button).toHaveAttribute('type', 'submit');
            });
        });
        _testUtils.bddHelpers.userStory('Button Variants', ()=>{
            test('Given I need different button styles, When I specify variant, Then correct styling is applied', ()=>{
                // Given: I need different button styles
                const variants = [
                    {
                        variant: 'primary',
                        expectedClass: 'bg-[#34A853]'
                    },
                    {
                        variant: 'secondary',
                        expectedClass: 'bg-[#1A73E8]'
                    },
                    {
                        variant: 'outline',
                        expectedClass: 'border-gray-300'
                    },
                    {
                        variant: 'ghost',
                        expectedClass: 'text-gray-700'
                    }
                ];
                variants.forEach(({ variant, expectedClass })=>{
                    const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                        variant: variant,
                        children: "Test"
                    }));
                    const button = _react1.screen.getByRole('button');
                    expect(button).toHaveClass(expectedClass);
                    // Clean up for next iteration
                    rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {}));
                });
            });
        });
    });
    /**
   * Unit Tests: Component Props and Behavior
   */ describe('Unit: Component Props', ()=>{
        test('renders with default props', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Default Button"
            }));
            const button = _react1.screen.getByRole('button', {
                name: /default button/i
            });
            expect(button).toBeInTheDocument();
            expect(button).toHaveClass('bg-[#34A853]') // default primary variant
            ;
            expect(button).not.toBeDisabled();
        });
        test('applies custom className', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                className: "custom-class",
                children: "Custom"
            }));
            const button = _react1.screen.getByRole('button', {
                name: /custom/i
            });
            expect(button).toHaveClass('custom-class');
        });
        test('forwards additional props to button element', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                "data-testid": "test-button",
                "aria-label": "Test",
                children: "Button"
            }));
            const button = _react1.screen.getByTestId('test-button');
            expect(button).toHaveAttribute('aria-label', 'Test');
        });
        test('handles all variant types', ()=>{
            const variants = [
                'primary',
                'secondary',
                'outline',
                'ghost'
            ];
            variants.forEach((variant)=>{
                const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    variant: variant,
                    children: "Test"
                }));
                const button = _react1.screen.getByRole('button');
                expect(button).toBeInTheDocument();
                // Clean up for next iteration
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {}));
            });
        });
        test('handles all size types', ()=>{
            const sizes = [
                'sm',
                'md',
                'lg'
            ];
            sizes.forEach((size)=>{
                const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    size: size,
                    children: "Test"
                }));
                const button = _react1.screen.getByRole('button');
                expect(button).toBeInTheDocument();
                // Clean up for next iteration  
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {}));
            });
        });
    });
    /**
   * Integration Tests: Real-world Usage
   */ describe('Integration: Real-world Usage', ()=>{
        test('works in authenticated context', ()=>{
            const mockOnClick = jest.fn();
            (0, _testUtils.renderWithAuth)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                onClick: mockOnClick,
                children: "Authenticated Action"
            }), {
                authenticated: true
            });
            const button = _react1.screen.getByRole('button', {
                name: /authenticated action/i
            });
            _react1.fireEvent.click(button);
            expect(mockOnClick).toHaveBeenCalledTimes(1);
        });
        test('integrates with form validation', ()=>{
            const mockSubmit = jest.fn((e)=>e.preventDefault());
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                onSubmit: mockSubmit,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        required: true,
                        "data-testid": "required-input"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                        type: "submit",
                        children: "Submit"
                    })
                ]
            }));
            const input = _react1.screen.getByTestId('required-input');
            const button = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            // Test form submission with valid input
            _react1.fireEvent.change(input, {
                target: {
                    value: 'valid input'
                }
            });
            _react1.fireEvent.click(button);
            expect(mockSubmit).toHaveBeenCalled();
        });
        test('handles disabled state properly', ()=>{
            const DisabledButton = ()=>{
                const [disabled, setDisabled] = _react.default.useState(false);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                            disabled: disabled,
                            onClick: ()=>setDisabled(!disabled),
                            "data-testid": "toggle-button",
                            children: "Toggle State"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: ()=>setDisabled(!disabled),
                            children: "Toggle Disabled"
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(DisabledButton, {}));
            const button = _react1.screen.getByTestId('toggle-button');
            const toggleButton = _react1.screen.getByRole('button', {
                name: /toggle disabled/i
            });
            // Initially not disabled
            expect(button).not.toBeDisabled();
            // Toggle to disabled
            _react1.fireEvent.click(toggleButton);
            expect(button).toBeDisabled();
            // The disabled styles are applied via CSS classes, so we just verify the disabled state
            expect(button).toHaveAttribute('disabled');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,