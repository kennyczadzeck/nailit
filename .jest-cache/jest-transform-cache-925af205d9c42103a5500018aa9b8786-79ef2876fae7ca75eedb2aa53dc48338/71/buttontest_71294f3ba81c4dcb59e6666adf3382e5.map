{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/features/components/button.test.tsx"],"sourcesContent":["/**\n * Feature: Button Component\n * All button component tests (BDD, unit, integration)\n * Comprehensive testing of UI component behavior\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { Button } from '../../../app/components/ui/Button'\nimport { bddHelpers, renderWithAuth } from '../../helpers/testUtils'\n\ndescribe('Feature: Button Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  /**\n   * BDD Tests: User Experience Stories\n   */\n  describe('BDD: User Stories', () => {\n    bddHelpers.userStory('Primary Button Interaction', () => {\n      test('Given I see a primary button, When I click it, Then the action is triggered', () => {\n        // Given: I see a primary button\n        const mockOnClick = jest.fn()\n        render(<Button variant=\"primary\" onClick={mockOnClick}>Click me</Button>)\n        \n        // When: I click the button\n        const button = screen.getByRole('button', { name: /click me/i })\n        fireEvent.click(button)\n        \n        // Then: the action should be triggered\n        expect(mockOnClick).toHaveBeenCalledTimes(1)\n      })\n    })\n\n    bddHelpers.userStory('Secondary Button Styling', () => {\n      test('Given I see a secondary button, When I view it, Then it has the correct appearance', () => {\n        // Given: I see a secondary button\n        render(<Button variant=\"secondary\">Secondary Action</Button>)\n        \n        // When: I view the button\n        const button = screen.getByRole('button', { name: /secondary action/i })\n        \n        // Then: it should have the correct styling\n        expect(button).toBeInTheDocument()\n        expect(button).toHaveClass('bg-[#1A73E8]') // secondary variant styles\n      })\n    })\n\n    bddHelpers.userStory('Disabled Button State', () => {\n      test('Given I see a disabled button, When I try to click it, Then no action occurs', () => {\n        // Given: I see a disabled button\n        const mockOnClick = jest.fn()\n        render(<Button disabled onClick={mockOnClick}>Disabled</Button>)\n        \n        // When: I try to click the button\n        const button = screen.getByRole('button', { name: /disabled/i })\n        fireEvent.click(button)\n        \n        // Then: no action should occur\n        expect(mockOnClick).not.toHaveBeenCalled()\n        expect(button).toBeDisabled()\n      })\n    })\n\n    bddHelpers.userStory('Button Size Variants', () => {\n      test('Given I need different button sizes, When I specify size, Then correct styling is applied', () => {\n        // Given: I need different button sizes\n        const { rerender } = render(<Button size=\"sm\">Small</Button>)\n        \n        // When: I specify small size\n        let button = screen.getByRole('button')\n        expect(button).toHaveClass('px-3', 'py-1.5', 'text-sm')\n        \n        // When: I specify large size\n        rerender(<Button size=\"lg\">Large</Button>)\n        button = screen.getByRole('button')\n        expect(button).toHaveClass('px-6', 'py-3', 'text-base')\n      })\n    })\n\n    bddHelpers.userStory('Button Type Attribute', () => {\n      test('Given I need form submission, When I set type to submit, Then button acts as submit button', () => {\n        // Given: I need form submission\n        const mockSubmit = jest.fn()\n        render(\n          <form onSubmit={mockSubmit}>\n            <Button type=\"submit\">Submit Form</Button>\n          </form>\n        )\n        \n        // When: I set type to submit and click\n        const button = screen.getByRole('button', { name: /submit form/i })\n        expect(button).toHaveAttribute('type', 'submit')\n      })\n    })\n\n    bddHelpers.userStory('Button Variants', () => {\n      test('Given I need different button styles, When I specify variant, Then correct styling is applied', () => {\n        // Given: I need different button styles\n        const variants = [\n          { variant: 'primary' as const, expectedClass: 'bg-[#34A853]' },\n          { variant: 'secondary' as const, expectedClass: 'bg-[#1A73E8]' },\n          { variant: 'outline' as const, expectedClass: 'border-gray-300' },\n          { variant: 'ghost' as const, expectedClass: 'text-gray-700' }\n        ]\n        \n        variants.forEach(({ variant, expectedClass }) => {\n          const { rerender } = render(<Button variant={variant}>Test</Button>)\n          const button = screen.getByRole('button')\n          expect(button).toHaveClass(expectedClass)\n          \n          // Clean up for next iteration\n          rerender(<div />)\n        })\n      })\n    })\n  })\n\n  /**\n   * Unit Tests: Component Props and Behavior\n   */\n  describe('Unit: Component Props', () => {\n    test('renders with default props', () => {\n      render(<Button>Default Button</Button>)\n      \n      const button = screen.getByRole('button', { name: /default button/i })\n      expect(button).toBeInTheDocument()\n      expect(button).toHaveClass('bg-[#34A853]') // default primary variant\n      expect(button).not.toBeDisabled()\n    })\n\n    test('applies custom className', () => {\n      render(<Button className=\"custom-class\">Custom</Button>)\n      \n      const button = screen.getByRole('button', { name: /custom/i })\n      expect(button).toHaveClass('custom-class')\n    })\n\n    test('forwards additional props to button element', () => {\n      render(<Button data-testid=\"test-button\" aria-label=\"Test\">Button</Button>)\n      \n      const button = screen.getByTestId('test-button')\n      expect(button).toHaveAttribute('aria-label', 'Test')\n    })\n\n    test('handles all variant types', () => {\n      const variants = ['primary', 'secondary', 'outline', 'ghost'] as const\n      \n      variants.forEach(variant => {\n        const { rerender } = render(<Button variant={variant}>Test</Button>)\n        const button = screen.getByRole('button')\n        expect(button).toBeInTheDocument()\n        \n        // Clean up for next iteration\n        rerender(<div />)\n      })\n    })\n\n    test('handles all size types', () => {\n      const sizes = ['sm', 'md', 'lg'] as const\n      \n      sizes.forEach(size => {\n        const { rerender } = render(<Button size={size}>Test</Button>)\n        const button = screen.getByRole('button')\n        expect(button).toBeInTheDocument()\n        \n        // Clean up for next iteration  \n        rerender(<div />)\n      })\n    })\n  })\n\n  /**\n   * Integration Tests: Real-world Usage\n   */\n  describe('Integration: Real-world Usage', () => {\n    test('works in authenticated context', () => {\n      const mockOnClick = jest.fn()\n      \n      renderWithAuth(\n        <Button onClick={mockOnClick}>Authenticated Action</Button>,\n        { authenticated: true }\n      )\n      \n      const button = screen.getByRole('button', { name: /authenticated action/i })\n      fireEvent.click(button)\n      \n      expect(mockOnClick).toHaveBeenCalledTimes(1)\n    })\n\n    test('integrates with form validation', () => {\n      const mockSubmit = jest.fn(e => e.preventDefault())\n      \n      render(\n        <form onSubmit={mockSubmit}>\n          <input required data-testid=\"required-input\" />\n          <Button type=\"submit\">Submit</Button>\n        </form>\n      )\n      \n      const input = screen.getByTestId('required-input')\n      const button = screen.getByRole('button', { name: /submit/i })\n      \n      // Test form submission with valid input\n      fireEvent.change(input, { target: { value: 'valid input' } })\n      fireEvent.click(button)\n      \n      expect(mockSubmit).toHaveBeenCalled()\n    })\n\n    test('handles disabled state properly', () => {\n      const DisabledButton = () => {\n        const [disabled, setDisabled] = React.useState(false)\n        \n        return (\n          <div>\n            <Button \n              disabled={disabled} \n              onClick={() => setDisabled(!disabled)}\n              data-testid=\"toggle-button\"\n            >\n              Toggle State\n            </Button>\n            <button onClick={() => setDisabled(!disabled)}>\n              Toggle Disabled\n            </button>\n          </div>\n        )\n      }\n      \n      render(<DisabledButton />)\n      \n      const button = screen.getByTestId('toggle-button')\n      const toggleButton = screen.getByRole('button', { name: /toggle disabled/i })\n      \n      // Initially not disabled\n      expect(button).not.toBeDisabled()\n      \n      // Toggle to disabled\n      fireEvent.click(toggleButton)\n      expect(button).toBeDisabled()\n      // The disabled styles are applied via CSS classes, so we just verify the disabled state\n      expect(button).toHaveAttribute('disabled')\n    })\n  })\n}) "],"names":["describe","beforeEach","jest","clearAllMocks","bddHelpers","userStory","test","mockOnClick","fn","render","Button","variant","onClick","button","screen","getByRole","name","fireEvent","click","expect","toHaveBeenCalledTimes","toBeInTheDocument","toHaveClass","disabled","not","toHaveBeenCalled","toBeDisabled","rerender","size","mockSubmit","form","onSubmit","type","toHaveAttribute","variants","expectedClass","forEach","div","className","data-testid","aria-label","getByTestId","sizes","renderWithAuth","authenticated","e","preventDefault","input","required","change","target","value","DisabledButton","setDisabled","React","useState","toggleButton"],"mappings":"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"}