3cccb065231b5935ec6143a0e861d60e
/**
 * Centralized Prisma Mocking Utilities
 * Standardized mocking patterns for database operations
 */ // Mock Prisma client structure
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createMockPrisma () {
        return createMockPrisma;
    },
    get givenDatabaseFails () {
        return givenDatabaseFails;
    },
    get givenDatabaseHas () {
        return givenDatabaseHas;
    },
    get mockPrisma () {
        return mockPrisma;
    },
    get setupMockPrisma () {
        return setupMockPrisma;
    },
    get setupPrismaMocks () {
        return setupPrismaMocks;
    }
});
const createMockPrisma = ()=>({
        project: {
            count: jest.fn(),
            findMany: jest.fn(),
            findUnique: jest.fn(),
            findFirst: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            delete: jest.fn(),
            deleteMany: jest.fn()
        },
        user: {
            findUnique: jest.fn(),
            findFirst: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            delete: jest.fn()
        },
        flaggedItem: {
            findMany: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            delete: jest.fn()
        },
        timelineEntry: {
            findMany: jest.fn(),
            create: jest.fn()
        },
        emailSettings: {
            findUnique: jest.fn(),
            create: jest.fn(),
            update: jest.fn()
        }
    });
const mockPrisma = createMockPrisma();
const setupPrismaMocks = {
    // Project mocks
    projectCount: (count)=>{
        mockPrisma.project.count.mockResolvedValue(count);
    },
    projectsList: (projects)=>{
        mockPrisma.project.findMany.mockResolvedValue(projects);
        mockPrisma.project.count.mockResolvedValue(projects.length);
    },
    projectsEmpty: ()=>{
        mockPrisma.project.findMany.mockResolvedValue([]);
        mockPrisma.project.count.mockResolvedValue(0);
    },
    projectCreate: (project)=>{
        mockPrisma.project.create.mockResolvedValue(project);
    },
    projectCreateError: (error)=>{
        mockPrisma.project.create.mockRejectedValue(error);
    },
    // User mocks
    userFound: (user)=>{
        mockPrisma.user.findUnique.mockResolvedValue(user);
    },
    userNotFound: ()=>{
        mockPrisma.user.findUnique.mockResolvedValue(null);
    },
    // Database error scenarios
    databaseError: (error = new Error('Database connection failed'))=>{
        mockPrisma.project.findMany.mockRejectedValue(error);
        mockPrisma.project.count.mockRejectedValue(error);
        mockPrisma.user.findUnique.mockRejectedValue(error);
    },
    // Reset all mocks
    reset: ()=>{
        Object.values(mockPrisma).forEach((table)=>{
            Object.values(table).forEach((method)=>{
                if (jest.isMockFunction(method)) {
                    method.mockReset();
                }
            });
        });
    }
};
const givenDatabaseHas = {
    projects: (projects)=>{
        setupPrismaMocks.projectsList(projects);
    },
    noProjects: ()=>{
        setupPrismaMocks.projectsEmpty();
    },
    user: (user)=>{
        setupPrismaMocks.userFound(user);
    },
    noUser: ()=>{
        setupPrismaMocks.userNotFound();
    }
};
const givenDatabaseFails = {
    withError: (error)=>{
        setupPrismaMocks.databaseError(error);
    },
    onProjectCreation: ()=>{
        setupPrismaMocks.projectCreateError(new Error('Failed to create project'));
    }
};
const setupMockPrisma = ()=>{
    // Mock the Prisma module
    jest.doMock('../../../app/lib/prisma', ()=>({
            prisma: mockPrisma
        }));
    // Reset mocks before each test
    beforeEach(()=>{
        setupPrismaMocks.reset();
    });
    return mockPrisma;
};

//# sourceMappingURL=data:application/json;base64,