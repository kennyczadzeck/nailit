{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/helpers/mockPrisma.ts"],"sourcesContent":["/**\n * Centralized Prisma Mocking Utilities\n * Standardized mocking patterns for database operations\n */\n\n// Mock Prisma client structure\nexport const createMockPrisma = () => ({\n  project: {\n    count: jest.fn(),\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n    findFirst: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn(),\n  },\n  user: {\n    findUnique: jest.fn(),\n    findFirst: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  flaggedItem: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  timelineEntry: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n  },\n  emailSettings: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n  },\n})\n\n// Global mock Prisma instance\nexport const mockPrisma = createMockPrisma()\n\n// Setup Prisma mocks for common scenarios\nexport const setupPrismaMocks = {\n  // Project mocks\n  projectCount: (count: number) => {\n    mockPrisma.project.count.mockResolvedValue(count)\n  },\n\n  projectsList: (projects: any[]) => {\n    mockPrisma.project.findMany.mockResolvedValue(projects)\n    mockPrisma.project.count.mockResolvedValue(projects.length)\n  },\n\n  projectsEmpty: () => {\n    mockPrisma.project.findMany.mockResolvedValue([])\n    mockPrisma.project.count.mockResolvedValue(0)\n  },\n\n  projectCreate: (project: any) => {\n    mockPrisma.project.create.mockResolvedValue(project)\n  },\n\n  projectCreateError: (error: Error) => {\n    mockPrisma.project.create.mockRejectedValue(error)\n  },\n\n  // User mocks\n  userFound: (user: any) => {\n    mockPrisma.user.findUnique.mockResolvedValue(user)\n  },\n\n  userNotFound: () => {\n    mockPrisma.user.findUnique.mockResolvedValue(null)\n  },\n\n  // Database error scenarios\n  databaseError: (error: Error = new Error('Database connection failed')) => {\n    mockPrisma.project.findMany.mockRejectedValue(error)\n    mockPrisma.project.count.mockRejectedValue(error)\n    mockPrisma.user.findUnique.mockRejectedValue(error)\n  },\n\n  // Reset all mocks\n  reset: () => {\n    Object.values(mockPrisma).forEach((table) => {\n      Object.values(table).forEach((method) => {\n        if (jest.isMockFunction(method)) {\n          method.mockReset()\n        }\n      })\n    })\n  },\n}\n\n// BDD-style mock helpers\nexport const givenDatabaseHas = {\n  projects: (projects: any[]) => {\n    setupPrismaMocks.projectsList(projects)\n  },\n\n  noProjects: () => {\n    setupPrismaMocks.projectsEmpty()\n  },\n\n  user: (user: any) => {\n    setupPrismaMocks.userFound(user)\n  },\n\n  noUser: () => {\n    setupPrismaMocks.userNotFound()\n  },\n}\n\nexport const givenDatabaseFails = {\n  withError: (error?: Error) => {\n    setupPrismaMocks.databaseError(error)\n  },\n\n  onProjectCreation: () => {\n    setupPrismaMocks.projectCreateError(new Error('Failed to create project'))\n  },\n}\n\n// Mock setup for Jest tests\nexport const setupMockPrisma = () => {\n  // Mock the Prisma module\n  jest.doMock('../../../app/lib/prisma', () => ({\n    prisma: mockPrisma,\n  }))\n\n  // Reset mocks before each test\n  beforeEach(() => {\n    setupPrismaMocks.reset()\n  })\n\n  return mockPrisma\n} "],"names":["createMockPrisma","givenDatabaseFails","givenDatabaseHas","mockPrisma","setupMockPrisma","setupPrismaMocks","project","count","jest","fn","findMany","findUnique","findFirst","create","update","delete","deleteMany","user","flaggedItem","timelineEntry","emailSettings","projectCount","mockResolvedValue","projectsList","projects","length","projectsEmpty","projectCreate","projectCreateError","error","mockRejectedValue","userFound","userNotFound","databaseError","Error","reset","Object","values","forEach","table","method","isMockFunction","mockReset","noProjects","noUser","withError","onProjectCreation","doMock","prisma","beforeEach"],"mappings":"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"}