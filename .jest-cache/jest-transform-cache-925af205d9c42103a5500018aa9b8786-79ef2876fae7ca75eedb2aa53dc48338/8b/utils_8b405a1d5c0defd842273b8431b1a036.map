{"version":3,"names":["cn","cov_17rhpdfa3w","f","s","formatDate","formatRelativeTime","inputs","_tailwindmerge","twMerge","_clsx","clsx","date","d","b","Date","toLocaleDateString","year","month","day","now","diffInHours","Math","floor","getTime","diffInDays"],"sources":["/Users/kennyc/code/personal/nailit/app/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n}\n\nexport function formatRelativeTime(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffInHours = Math.floor((now.getTime() - d.getTime()) / (1000 * 60 * 60));\n  \n  if (diffInHours < 1) {\n    return 'Just now';\n  } else if (diffInHours < 24) {\n    return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;\n  } else {\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;\n  }\n} "],"mappingsgBA,GAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,EAAA;;MAIAI,WAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,UAAA;;MASAC,mBAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,kBAAA;;;;;kCAhBsB;;;kCACd;AAEjB,SAASL,GAAG,GAAGM,MAAoB;EAAA;EAAAL,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACxC,OAAO,IAAAI,cAAA,CAAAC,OAAO,EAAC,IAAAC,KAAA,CAAAC,IAAI,EAACJ,MAAA;AACtB;AAEO,SAASF,WAAWO,IAAmB;EAAA;EAAAV,cAAA,GAAAC,CAAA;EAC5C,MAAMU,CAAA;EAAA;EAAA,CAAAX,cAAA,GAAAE,CAAA,QAAI,OAAOQ,IAAA,KAAS;EAAA;EAAA,CAAAV,cAAA,GAAAY,CAAA,UAAW,IAAIC,IAAA,CAAKH,IAAA;EAAA;EAAA,CAAAV,cAAA,GAAAY,CAAA,UAAQF,IAAA;EAAA;EAAAV,cAAA,GAAAE,CAAA;EACtD,OAAOS,CAAA,CAAEG,kBAAkB,CAAC,SAAS;IACnCC,IAAA,EAAM;IACNC,KAAA,EAAO;IACPC,GAAA,EAAK;EACP;AACF;AAEO,SAASb,mBAAmBM,IAAmB;EAAA;EAAAV,cAAA,GAAAC,CAAA;EACpD,MAAMU,CAAA;EAAA;EAAA,CAAAX,cAAA,GAAAE,CAAA,QAAI,OAAOQ,IAAA,KAAS;EAAA;EAAA,CAAAV,cAAA,GAAAY,CAAA,UAAW,IAAIC,IAAA,CAAKH,IAAA;EAAA;EAAA,CAAAV,cAAA,GAAAY,CAAA,UAAQF,IAAA;EACtD,MAAMQ,GAAA;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAM,IAAIW,IAAA;EAChB,MAAMM,WAAA;EAAA;EAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAckB,IAAA,CAAKC,KAAK,CAAC,CAACH,GAAA,CAAII,OAAO,KAAKX,CAAA,CAAEW,OAAO,EAAC,KAAM,OAAO,KAAK,EAAC;EAAA;EAAAtB,cAAA,GAAAE,CAAA;EAE7E,IAAIiB,WAAA,GAAc,GAAG;IAAA;IAAAnB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACnB,OAAO;EACT,OAAO;IAAA;IAAAF,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IAAA,IAAIiB,WAAA,GAAc,IAAI;MAAA;MAAAnB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC3B,OAAO,GAAGiB,WAAA,QAAmBA,WAAA,GAAc;MAAA;MAAA,CAAAnB,cAAA,GAAAY,CAAA,UAAI;MAAA;MAAA,CAAAZ,cAAA,GAAAY,CAAA,UAAM,SAAQ;IAC/D,OAAO;MAAA;MAAAZ,cAAA,GAAAY,CAAA;MACL,MAAMW,UAAA;MAAA;MAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAakB,IAAA,CAAKC,KAAK,CAACF,WAAA,GAAc;MAAA;MAAAnB,cAAA,GAAAE,CAAA;MAC5C,OAAO,GAAGqB,UAAA,OAAiBA,UAAA,GAAa;MAAA;MAAA,CAAAvB,cAAA,GAAAY,CAAA,UAAI;MAAA;MAAA,CAAAZ,cAAA,GAAAY,CAAA,UAAM,SAAQ;IAC5D;EAAA;AACF","ignoreList":[]}