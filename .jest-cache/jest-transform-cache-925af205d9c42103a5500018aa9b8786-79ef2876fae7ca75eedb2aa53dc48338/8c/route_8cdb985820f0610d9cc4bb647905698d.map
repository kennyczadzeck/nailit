{"version":3,"names":["cov_19827odaet","actualCoverage","s","GET","f","console","log","session","_nextauth","getServerSession","_route","authOptions","user","id","b","_server","NextResponse","json","error","status","projects","_prisma","prisma","project","findMany","where","userId","length","success","projectCount","message","code","stack"],"sources":["/Users/kennyc/code/personal/nailit/app/api/projects-simple/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '../auth/[...nextauth]/route'\nimport { prisma } from '../../lib/prisma'\n\n// GET /api/projects-simple - Get projects without complex includes\nexport async function GET() {\n  try {\n    console.log('=== Simple Projects Endpoint ===');\n    \n    const session = await getServerSession(authOptions)\n    console.log('Session:', session);\n    \n    if (!session?.user?.id) {\n      console.log('No session or user ID');\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    console.log('Fetching projects for user:', session.user.id);\n    \n    // Try simple query first\n    const projects = await prisma.project.findMany({\n      where: {\n        userId: session.user.id\n      }\n    });\n    \n    console.log('Found projects:', projects.length);\n\n    return NextResponse.json({\n      success: true,\n      projectCount: projects.length,\n      projects: projects,\n      userId: session.user.id\n    });\n    \n  } catch (error: any) {\n    console.error('Error fetching simple projects:', error)\n    return NextResponse.json(\n      { \n        error: 'Failed to fetch projects',\n        message: error.message,\n        code: error.code,\n        stack: error.stack\n      },\n      { status: 500 }\n    )\n  }\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BADgB;;;;;;WAAAC,GAAA;;;;;kCANoB;;;kCACT;;;kCACL;;;kCACL;AAGhB,eAAeA,IAAA;EAAA;EAAAH,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACpB,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACFG,OAAA,CAAQC,GAAG,CAAC;IAEZ,MAAMC,OAAA;IAAA;IAAA,CAAAP,cAAA,GAAAE,CAAA,OAAU,MAAM,IAAAM,SAAA,CAAAC,gBAAgB,EAACC,MAAA,CAAAC,WAAW;IAAA;IAAAX,cAAA,GAAAE,CAAA;IAClDG,OAAA,CAAQC,GAAG,CAAC,YAAYC,OAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAExB,IAAI,CAACK,OAAA,EAASK,IAAA,EAAMC,EAAA,EAAI;MAAA;MAAAb,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MACtBG,OAAA,CAAQC,GAAG,CAAC;MAAA;MAAAN,cAAA,GAAAE,CAAA;MACZ,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,KAAA,EAAO;MAAe,GAAG;QAAEC,MAAA,EAAQ;MAAI;IACpE;IAAA;IAAA;MAAAnB,cAAA,GAAAc,CAAA;IAAA;IAAAd,cAAA,GAAAE,CAAA;IAEAG,OAAA,CAAQC,GAAG,CAAC,+BAA+BC,OAAA,CAAQK,IAAI,CAACC,EAAE;IAE1D;IACA,MAAMO,QAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAW,MAAMmB,OAAA,CAAAC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAAC;MAC7CC,KAAA,EAAO;QACLC,MAAA,EAAQnB,OAAA,CAAQK,IAAI,CAACC;MACvB;IACF;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAEAG,OAAA,CAAQC,GAAG,CAAC,mBAAmBc,QAAA,CAASO,MAAM;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAE9C,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACvBW,OAAA,EAAS;MACTC,YAAA,EAAcT,QAAA,CAASO,MAAM;MAC7BP,QAAA,EAAUA,QAAA;MACVM,MAAA,EAAQnB,OAAA,CAAQK,IAAI,CAACC;IACvB;EAEF,EAAE,OAAOK,KAAA,EAAY;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IACnBG,OAAA,CAAQa,KAAK,CAAC,mCAAmCA,KAAA;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IACjD,OAAOa,OAAA,CAAAC,YAAY,CAACC,IAAI,CACtB;MACEC,KAAA,EAAO;MACPY,OAAA,EAASZ,KAAA,CAAMY,OAAO;MACtBC,IAAA,EAAMb,KAAA,CAAMa,IAAI;MAChBC,KAAA,EAAOd,KAAA,CAAMc;IACf,GACA;MAAEb,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}