48fba94f85285a58d0269ae071e7e60a
"use strict";

/* istanbul ignore next */
function cov_pdpho3i09() {
  var path = "/Users/kennyc/code/personal/nailit/app/api/timeline/route.ts";
  var hash = "3b046d0e57799fd4eb3ea55c64a49a9d3cf19202";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kennyc/code/personal/nailit/app/api/timeline/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 43
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 33
        },
        end: {
          line: 15,
          column: 53
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 55
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 22,
          column: 15
        }
      },
      "10": {
        start: {
          line: 24,
          column: 32
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "11": {
        start: {
          line: 41,
          column: 35
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "12": {
        start: {
          line: 41,
          column: 65
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "13": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 61
        }
      },
      "14": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 65
        }
      },
      "15": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "16": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 26
        }
      },
      "17": {
        start: {
          line: 70,
          column: 19
        },
        end: {
          line: 70,
          column: 49
        }
      },
      "18": {
        start: {
          line: 71,
          column: 21
        },
        end: {
          line: 71,
          column: 63
        }
      },
      "19": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "20": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 23
        }
      },
      "21": {
        start: {
          line: 74,
          column: 11
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "22": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 27
        }
      },
      "23": {
        start: {
          line: 76,
          column: 11
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "24": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 38
        }
      },
      "25": {
        start: {
          line: 78,
          column: 11
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "26": {
        start: {
          line: 79,
          column: 22
        },
        end: {
          line: 79,
          column: 46
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 60
        }
      },
      "28": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 48
        }
      },
      "29": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 63
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 55
          },
          end: {
            line: 41,
            column: 56
          }
        },
        loc: {
          start: {
            line: 41,
            column: 65
          },
          end: {
            line: 56,
            column: 13
          }
        },
        line: 41
      },
      "3": {
        name: "formatRelativeTime",
        decl: {
          start: {
            line: 68,
            column: 9
          },
          end: {
            line: 68,
            column: 27
          }
        },
        loc: {
          start: {
            line: 68,
            column: 34
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 68
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 36
          }
        }, {
          start: {
            line: 48,
            column: 40
          },
          end: {
            line: 48,
            column: 42
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 55
          }
        }, {
          start: {
            line: 54,
            column: 59
          },
          end: {
            line: 54,
            column: 63
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: 74,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }],
        line: 72
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: 78,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: 81,
            column: 11
          },
          end: {
            line: 84,
            column: 5
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 31
          },
          end: {
            line: 80,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 45
          },
          end: {
            line: 80,
            column: 47
          }
        }, {
          start: {
            line: 80,
            column: 50
          },
          end: {
            line: 80,
            column: 53
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 33
          },
          end: {
            line: 83,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 48
          },
          end: {
            line: 83,
            column: 50
          }
        }, {
          start: {
            line: 83,
            column: 53
          },
          end: {
            line: 83,
            column: 56
          }
        }],
        line: 83
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/kennyc/code/personal/nailit/app/api/timeline/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '../../lib/prisma'\n\n// GET /api/timeline - Get all timeline entries for a project\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const projectId = searchParams.get('projectId')\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      )\n    }\n\n    const timelineEntries = await prisma.timelineEntry.findMany({\n      where: {\n        projectId\n      },\n      include: {\n        flaggedItem: {\n          select: {\n            emailFrom: true,\n            originalEmail: true\n          }\n        }\n      },\n      orderBy: {\n        date: 'desc'\n      }\n    })\n\n    // Transform data for frontend\n    const transformedEntries = timelineEntries.map(entry => ({\n      id: entry.id,\n      title: entry.title,\n      description: entry.description,\n      category: entry.category.toLowerCase(),\n      date: entry.date.toISOString().split('T')[0],\n      time: formatRelativeTime(entry.date),\n      impact: entry.impact || '',\n      cost: entry.cost,\n      scheduleImpact: entry.scheduleImpact,\n      scopeDetails: entry.scopeDetails,\n      verified: entry.verified,\n      fromFlaggedItem: !!entry.flaggedItemId,\n      emailFrom: entry.flaggedItem?.emailFrom || null,\n      createdAt: entry.createdAt.toISOString()\n    }))\n\n    return NextResponse.json(transformedEntries)\n  } catch (error) {\n    console.error('Error fetching timeline entries:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch timeline entries' },\n      { status: 500 }\n    )\n  }\n}\n\n// Helper function for relative time formatting\nfunction formatRelativeTime(date: Date): string {\n  const now = new Date()\n  const diffMs = now.getTime() - date.getTime()\n  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24))\n\n  if (diffDays === 0) {\n    return 'Today'\n  } else if (diffDays === 1) {\n    return 'Yesterday'\n  } else if (diffDays < 7) {\n    return `${diffDays} days ago`\n  } else if (diffDays < 30) {\n    const weeks = Math.floor(diffDays / 7)\n    return `${weeks} week${weeks === 1 ? '' : 's'} ago`\n  } else {\n    const months = Math.floor(diffDays / 30)\n    return `${months} month${months === 1 ? '' : 's'} ago`\n  }\n} "],
      names: ["GET", "request", "searchParams", "URL", "url", "projectId", "get", "NextResponse", "json", "error", "status", "timelineEntries", "prisma", "timelineEntry", "findMany", "where", "include", "flaggedItem", "select", "emailFrom", "originalEmail", "orderBy", "date", "transformedEntries", "map", "entry", "id", "title", "description", "category", "toLowerCase", "toISOString", "split", "time", "formatRelativeTime", "impact", "cost", "scheduleImpact", "scopeDetails", "verified", "fromFlaggedItem", "flaggedItemId", "createdAt", "console", "now", "Date", "diffMs", "getTime", "diffDays", "Math", "floor", "weeks", "months"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;wBACnB;AAGhB,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIF,QAAQG,GAAG;QAC5C,MAAMC,YAAYH,aAAaI,GAAG,CAAC;QAEnC,IAAI,CAACD,WAAW;YACd,OAAOE,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAyB,GAClC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMC,kBAAkB,MAAMC,cAAM,CAACC,aAAa,CAACC,QAAQ,CAAC;YAC1DC,OAAO;gBACLV;YACF;YACAW,SAAS;gBACPC,aAAa;oBACXC,QAAQ;wBACNC,WAAW;wBACXC,eAAe;oBACjB;gBACF;YACF;YACAC,SAAS;gBACPC,MAAM;YACR;QACF;QAEA,8BAA8B;QAC9B,MAAMC,qBAAqBZ,gBAAgBa,GAAG,CAACC,CAAAA,QAAU,CAAA;gBACvDC,IAAID,MAAMC,EAAE;gBACZC,OAAOF,MAAME,KAAK;gBAClBC,aAAaH,MAAMG,WAAW;gBAC9BC,UAAUJ,MAAMI,QAAQ,CAACC,WAAW;gBACpCR,MAAMG,MAAMH,IAAI,CAACS,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;gBAC5CC,MAAMC,mBAAmBT,MAAMH,IAAI;gBACnCa,QAAQV,MAAMU,MAAM,IAAI;gBACxBC,MAAMX,MAAMW,IAAI;gBAChBC,gBAAgBZ,MAAMY,cAAc;gBACpCC,cAAcb,MAAMa,YAAY;gBAChCC,UAAUd,MAAMc,QAAQ;gBACxBC,iBAAiB,CAAC,CAACf,MAAMgB,aAAa;gBACtCtB,WAAWM,MAAMR,WAAW,EAAEE,aAAa;gBAC3CuB,WAAWjB,MAAMiB,SAAS,CAACX,WAAW;YACxC,CAAA;QAEA,OAAOxB,oBAAY,CAACC,IAAI,CAACe;IAC3B,EAAE,OAAOd,OAAO;QACdkC,QAAQlC,KAAK,CAAC,oCAAoCA;QAClD,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAmC,GAC5C;YAAEC,QAAQ;QAAI;IAElB;AACF;AAEA,+CAA+C;AAC/C,SAASwB,mBAAmBZ,IAAU;IACpC,MAAMsB,MAAM,IAAIC;IAChB,MAAMC,SAASF,IAAIG,OAAO,KAAKzB,KAAKyB,OAAO;IAC3C,MAAMC,WAAWC,KAAKC,KAAK,CAACJ,SAAU,CAAA,OAAO,KAAK,KAAK,EAAC;IAExD,IAAIE,aAAa,GAAG;QAClB,OAAO;IACT,OAAO,IAAIA,aAAa,GAAG;QACzB,OAAO;IACT,OAAO,IAAIA,WAAW,GAAG;QACvB,OAAO,GAAGA,SAAS,SAAS,CAAC;IAC/B,OAAO,IAAIA,WAAW,IAAI;QACxB,MAAMG,QAAQF,KAAKC,KAAK,CAACF,WAAW;QACpC,OAAO,GAAGG,MAAM,KAAK,EAAEA,UAAU,IAAI,KAAK,IAAI,IAAI,CAAC;IACrD,OAAO;QACL,MAAMC,SAASH,KAAKC,KAAK,CAACF,WAAW;QACrC,OAAO,GAAGI,OAAO,MAAM,EAAEA,WAAW,IAAI,KAAK,IAAI,IAAI,CAAC;IACxD;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3b046d0e57799fd4eb3ea55c64a49a9d3cf19202"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pdpho3i09 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pdpho3i09();
cov_pdpho3i09().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_pdpho3i09().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_pdpho3i09().f[0]++;
    cov_pdpho3i09().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_pdpho3i09().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_pdpho3i09().s[4]++, require("../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_pdpho3i09().f[1]++;
  cov_pdpho3i09().s[5]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_pdpho3i09().s[6]++, new URL(request.url));
    const projectId =
    /* istanbul ignore next */
    (cov_pdpho3i09().s[7]++, searchParams.get('projectId'));
    /* istanbul ignore next */
    cov_pdpho3i09().s[8]++;
    if (!projectId) {
      /* istanbul ignore next */
      cov_pdpho3i09().b[0][0]++;
      cov_pdpho3i09().s[9]++;
      return _server.NextResponse.json({
        error: 'Project ID is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_pdpho3i09().b[0][1]++;
    }
    const timelineEntries =
    /* istanbul ignore next */
    (cov_pdpho3i09().s[10]++, await _prisma.prisma.timelineEntry.findMany({
      where: {
        projectId
      },
      include: {
        flaggedItem: {
          select: {
            emailFrom: true,
            originalEmail: true
          }
        }
      },
      orderBy: {
        date: 'desc'
      }
    }));
    // Transform data for frontend
    const transformedEntries =
    /* istanbul ignore next */
    (cov_pdpho3i09().s[11]++, timelineEntries.map(entry => {
      /* istanbul ignore next */
      cov_pdpho3i09().f[2]++;
      cov_pdpho3i09().s[12]++;
      return {
        id: entry.id,
        title: entry.title,
        description: entry.description,
        category: entry.category.toLowerCase(),
        date: entry.date.toISOString().split('T')[0],
        time: formatRelativeTime(entry.date),
        impact:
        /* istanbul ignore next */
        (cov_pdpho3i09().b[1][0]++, entry.impact) ||
        /* istanbul ignore next */
        (cov_pdpho3i09().b[1][1]++, ''),
        cost: entry.cost,
        scheduleImpact: entry.scheduleImpact,
        scopeDetails: entry.scopeDetails,
        verified: entry.verified,
        fromFlaggedItem: !!entry.flaggedItemId,
        emailFrom:
        /* istanbul ignore next */
        (cov_pdpho3i09().b[2][0]++, entry.flaggedItem?.emailFrom) ||
        /* istanbul ignore next */
        (cov_pdpho3i09().b[2][1]++, null),
        createdAt: entry.createdAt.toISOString()
      };
    }));
    /* istanbul ignore next */
    cov_pdpho3i09().s[13]++;
    return _server.NextResponse.json(transformedEntries);
  } catch (error) {
    /* istanbul ignore next */
    cov_pdpho3i09().s[14]++;
    console.error('Error fetching timeline entries:', error);
    /* istanbul ignore next */
    cov_pdpho3i09().s[15]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch timeline entries'
    }, {
      status: 500
    });
  }
}
// Helper function for relative time formatting
function formatRelativeTime(date) {
  /* istanbul ignore next */
  cov_pdpho3i09().f[3]++;
  const now =
  /* istanbul ignore next */
  (cov_pdpho3i09().s[16]++, new Date());
  const diffMs =
  /* istanbul ignore next */
  (cov_pdpho3i09().s[17]++, now.getTime() - date.getTime());
  const diffDays =
  /* istanbul ignore next */
  (cov_pdpho3i09().s[18]++, Math.floor(diffMs / (1000 * 60 * 60 * 24)));
  /* istanbul ignore next */
  cov_pdpho3i09().s[19]++;
  if (diffDays === 0) {
    /* istanbul ignore next */
    cov_pdpho3i09().b[3][0]++;
    cov_pdpho3i09().s[20]++;
    return 'Today';
  } else {
    /* istanbul ignore next */
    cov_pdpho3i09().b[3][1]++;
    cov_pdpho3i09().s[21]++;
    if (diffDays === 1) {
      /* istanbul ignore next */
      cov_pdpho3i09().b[4][0]++;
      cov_pdpho3i09().s[22]++;
      return 'Yesterday';
    } else {
      /* istanbul ignore next */
      cov_pdpho3i09().b[4][1]++;
      cov_pdpho3i09().s[23]++;
      if (diffDays < 7) {
        /* istanbul ignore next */
        cov_pdpho3i09().b[5][0]++;
        cov_pdpho3i09().s[24]++;
        return `${diffDays} days ago`;
      } else {
        /* istanbul ignore next */
        cov_pdpho3i09().b[5][1]++;
        cov_pdpho3i09().s[25]++;
        if (diffDays < 30) {
          /* istanbul ignore next */
          cov_pdpho3i09().b[6][0]++;
          const weeks =
          /* istanbul ignore next */
          (cov_pdpho3i09().s[26]++, Math.floor(diffDays / 7));
          /* istanbul ignore next */
          cov_pdpho3i09().s[27]++;
          return `${weeks} week${weeks === 1 ?
          /* istanbul ignore next */
          (cov_pdpho3i09().b[7][0]++, '') :
          /* istanbul ignore next */
          (cov_pdpho3i09().b[7][1]++, 's')} ago`;
        } else {
          /* istanbul ignore next */
          cov_pdpho3i09().b[6][1]++;
          const months =
          /* istanbul ignore next */
          (cov_pdpho3i09().s[28]++, Math.floor(diffDays / 30));
          /* istanbul ignore next */
          cov_pdpho3i09().s[29]++;
          return `${months} month${months === 1 ?
          /* istanbul ignore next */
          (cov_pdpho3i09().b[8][0]++, '') :
          /* istanbul ignore next */
          (cov_pdpho3i09().b[8][1]++, 's')} ago`;
        }
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,