{"version":3,"names":["cov_pdpho3i09","actualCoverage","s","GET","request","f","searchParams","URL","url","projectId","get","b","_server","NextResponse","json","error","status","timelineEntries","_prisma","prisma","timelineEntry","findMany","where","include","flaggedItem","select","emailFrom","originalEmail","orderBy","date","transformedEntries","map","entry","id","title","description","category","toLowerCase","toISOString","split","time","formatRelativeTime","impact","cost","scheduleImpact","scopeDetails","verified","fromFlaggedItem","flaggedItemId","createdAt","console","now","Date","diffMs","getTime","diffDays","Math","floor","weeks","months"],"sources":["/Users/kennyc/code/personal/nailit/app/api/timeline/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '../../lib/prisma'\n\n// GET /api/timeline - Get all timeline entries for a project\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const projectId = searchParams.get('projectId')\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      )\n    }\n\n    const timelineEntries = await prisma.timelineEntry.findMany({\n      where: {\n        projectId\n      },\n      include: {\n        flaggedItem: {\n          select: {\n            emailFrom: true,\n            originalEmail: true\n          }\n        }\n      },\n      orderBy: {\n        date: 'desc'\n      }\n    })\n\n    // Transform data for frontend\n    const transformedEntries = timelineEntries.map(entry => ({\n      id: entry.id,\n      title: entry.title,\n      description: entry.description,\n      category: entry.category.toLowerCase(),\n      date: entry.date.toISOString().split('T')[0],\n      time: formatRelativeTime(entry.date),\n      impact: entry.impact || '',\n      cost: entry.cost,\n      scheduleImpact: entry.scheduleImpact,\n      scopeDetails: entry.scopeDetails,\n      verified: entry.verified,\n      fromFlaggedItem: !!entry.flaggedItemId,\n      emailFrom: entry.flaggedItem?.emailFrom || null,\n      createdAt: entry.createdAt.toISOString()\n    }))\n\n    return NextResponse.json(transformedEntries)\n  } catch (error) {\n    console.error('Error fetching timeline entries:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch timeline entries' },\n      { status: 500 }\n    )\n  }\n}\n\n// Helper function for relative time formatting\nfunction formatRelativeTime(date: Date): string {\n  const now = new Date()\n  const diffMs = now.getTime() - date.getTime()\n  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24))\n\n  if (diffDays === 0) {\n    return 'Today'\n  } else if (diffDays === 1) {\n    return 'Yesterday'\n  } else if (diffDays < 7) {\n    return `${diffDays} days ago`\n  } else if (diffDays < 30) {\n    const weeks = Math.floor(diffDays / 7)\n    return `${weeks} week${weeks === 1 ? '' : 's'} ago`\n  } else {\n    const months = Math.floor(diffDays / 30)\n    return `${months} month${months === 1 ? '' : 's'} ago`\n  }\n} "],"mappings":"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","ignoreList":[]}