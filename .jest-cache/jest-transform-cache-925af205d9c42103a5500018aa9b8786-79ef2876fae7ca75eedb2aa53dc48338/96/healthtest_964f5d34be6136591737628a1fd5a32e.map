{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/e2e/smoke/health.test.ts"],"sourcesContent":["/**\n * Smoke Tests for NailIt Application\n * These tests run against deployed environments to verify basic functionality\n */\n\ndescribe('ðŸ”¥ Smoke Tests - Health Check', () => {\n  const baseUrl = process.env.TEST_URL || 'http://localhost:3000'\n\n  describe('Health Endpoint', () => {\n    it('should return healthy status', async () => {\n      const response = await fetch(`${baseUrl}/api/health`)\n      const data = await response.json()\n      \n      expect(response.status).toBe(200)\n      expect(data.status).toBe('healthy')\n      expect(data.database).toBe('connected')\n      expect(data.services.api).toBe('operational')\n    })\n\n    it('should include system information', async () => {\n      const response = await fetch(`${baseUrl}/api/health`)\n      const data = await response.json()\n      \n      expect(data).toHaveProperty('timestamp')\n      expect(data).toHaveProperty('version')\n      expect(data).toHaveProperty('environment')\n      expect(data).toHaveProperty('uptime')\n      expect(data).toHaveProperty('memory')\n    })\n  })\n\n  describe('Critical API Endpoints', () => {\n    it('should have accessible projects API', async () => {\n      const response = await fetch(`${baseUrl}/api/projects`)\n      \n      // Should either be 200 (with auth) or 401 (without auth)\n      // Both indicate the endpoint is accessible\n      expect([200, 401]).toContain(response.status)\n    })\n\n    it('should serve static assets', async () => {\n      const response = await fetch(`${baseUrl}/favicon.ico`)\n      \n      expect(response.status).toBe(200)\n    })\n  })\n\n  describe('Application Availability', () => {\n    it('should respond to root path', async () => {\n      const response = await fetch(baseUrl)\n      \n      expect(response.status).toBe(200)\n      expect(response.headers.get('content-type')).toContain('text/html')\n    })\n\n    it('should have reasonable response time', async () => {\n      const start = Date.now()\n      const response = await fetch(`${baseUrl}/api/health`)\n      const duration = Date.now() - start\n      \n      expect(response.status).toBe(200)\n      expect(duration).toBeLessThan(5000) // Should respond within 5 seconds\n    })\n  })\n}) "],"names":["describe","baseUrl","process","env","TEST_URL","it","response","fetch","data","json","expect","status","toBe","database","services","api","toHaveProperty","toContain","headers","get","start","Date","now","duration","toBeLessThan"],"mappings":"AAAA;;;CAGC;AAEDA,SAAS,iCAAiC;IACxC,MAAMC,UAAUC,QAAQC,GAAG,CAACC,QAAQ,IAAI;IAExCJ,SAAS,mBAAmB;QAC1BK,GAAG,gCAAgC;YACjC,MAAMC,WAAW,MAAMC,MAAM,GAAGN,QAAQ,WAAW,CAAC;YACpD,MAAMO,OAAO,MAAMF,SAASG,IAAI;YAEhCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOF,KAAKG,MAAM,EAAEC,IAAI,CAAC;YACzBF,OAAOF,KAAKK,QAAQ,EAAED,IAAI,CAAC;YAC3BF,OAAOF,KAAKM,QAAQ,CAACC,GAAG,EAAEH,IAAI,CAAC;QACjC;QAEAP,GAAG,qCAAqC;YACtC,MAAMC,WAAW,MAAMC,MAAM,GAAGN,QAAQ,WAAW,CAAC;YACpD,MAAMO,OAAO,MAAMF,SAASG,IAAI;YAEhCC,OAAOF,MAAMQ,cAAc,CAAC;YAC5BN,OAAOF,MAAMQ,cAAc,CAAC;YAC5BN,OAAOF,MAAMQ,cAAc,CAAC;YAC5BN,OAAOF,MAAMQ,cAAc,CAAC;YAC5BN,OAAOF,MAAMQ,cAAc,CAAC;QAC9B;IACF;IAEAhB,SAAS,0BAA0B;QACjCK,GAAG,uCAAuC;YACxC,MAAMC,WAAW,MAAMC,MAAM,GAAGN,QAAQ,aAAa,CAAC;YAEtD,yDAAyD;YACzD,2CAA2C;YAC3CS,OAAO;gBAAC;gBAAK;aAAI,EAAEO,SAAS,CAACX,SAASK,MAAM;QAC9C;QAEAN,GAAG,8BAA8B;YAC/B,MAAMC,WAAW,MAAMC,MAAM,GAAGN,QAAQ,YAAY,CAAC;YAErDS,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;QAC/B;IACF;IAEAZ,SAAS,4BAA4B;QACnCK,GAAG,+BAA+B;YAChC,MAAMC,WAAW,MAAMC,MAAMN;YAE7BS,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOJ,SAASY,OAAO,CAACC,GAAG,CAAC,iBAAiBF,SAAS,CAAC;QACzD;QAEAZ,GAAG,wCAAwC;YACzC,MAAMe,QAAQC,KAAKC,GAAG;YACtB,MAAMhB,WAAW,MAAMC,MAAM,GAAGN,QAAQ,WAAW,CAAC;YACpD,MAAMsB,WAAWF,KAAKC,GAAG,KAAKF;YAE9BV,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOa,UAAUC,YAAY,CAAC,MAAM,kCAAkC;;QACxE;IACF;AACF"}