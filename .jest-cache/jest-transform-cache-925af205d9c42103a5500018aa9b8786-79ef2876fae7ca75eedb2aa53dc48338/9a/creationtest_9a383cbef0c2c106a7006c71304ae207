a8e651004e9e32120d6d811aecc5ce9a
/**
 * Feature: Project Creation
 * All project creation related tests (BDD, integration, unit)
 * Based on NailedIt MVP Product Requirements - Create New Project
 */ "use strict";
// Mock NextAuth and Router
jest.mock('next-auth/react', ()=>({
        useSession: jest.fn()
    }));
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _react2 = require("next-auth/react");
const _navigation = require("next/navigation");
const _fixtures = require("../../fixtures");
const _testUtils = require("../../helpers/testUtils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock fetch globally
global.fetch = jest.fn();
describe('Feature: Project Creation', ()=>{
    const mockUseSession = _react2.useSession;
    const mockUseRouter = _navigation.useRouter;
    const mockFetch = fetch;
    beforeEach(()=>{
        jest.clearAllMocks();
        const mockRouter = _testUtils.routerHelpers.createMockRouter();
        mockUseRouter.mockReturnValue(mockRouter);
        mockUseSession.mockReturnValue({
            data: {
                user: _fixtures.testUsers.john
            },
            status: 'authenticated',
            update: jest.fn()
        });
    });
    /**
   * BDD Tests: User Story Implementation
   */ describe('BDD: User Stories', ()=>{
        _testUtils.bddHelpers.userStory('Project Name (US-04)', ()=>{
            test('Given I want to create new project, When I enter project name that reflects scope, Then project is created with that name', async ()=>{
                // Given: I want to create a new project
                const MockProjectForm = ()=>{
                    const [name, setName] = _react.default.useState('');
                    const [isSubmitting, setIsSubmitting] = _react.default.useState(false);
                    const handleSubmit = async (e)=>{
                        e.preventDefault();
                        setIsSubmitting(true);
                        try {
                            const response = await fetch('/api/projects', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    name,
                                    contractor: 'Test Contractor'
                                })
                            });
                            if (response.ok) {
                                const router = _testUtils.routerHelpers.createMockRouter();
                                router.push('/projects/new-project-123');
                            }
                        } finally{
                            setIsSubmitting(false);
                        }
                    };
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                        onSubmit: handleSubmit,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                placeholder: "Enter project name that reflects the project's scope",
                                value: name,
                                onChange: (e)=>setName(e.target.value),
                                required: true
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                disabled: isSubmitting,
                                children: isSubmitting ? 'Creating...' : 'Create Project'
                            })
                        ]
                    });
                };
                // Mock successful API response using centralized fixtures
                mockFetch.mockResolvedValue(_testUtils.apiHelpers.createMockResponse({
                    id: 'new-project-123',
                    name: _fixtures.testProjects.kitchenReno.name,
                    contractor: 'Test Contractor',
                    redirectUrl: '/projects/new-project-123'
                }, 201));
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockProjectForm, {}));
                // When: I enter a project name that reflects the project's scope
                const nameInput = _react1.screen.getByPlaceholderText(/Enter project name/);
                _react1.fireEvent.change(nameInput, {
                    target: {
                        value: _fixtures.testProjects.kitchenReno.name
                    }
                });
                const submitButton = _react1.screen.getByRole('button', {
                    name: /Create Project/
                });
                _react1.fireEvent.click(submitButton);
                // Then: the project should be created with that name
                await (0, _react1.waitFor)(()=>{
                    expect(mockFetch).toHaveBeenCalledWith('/api/projects', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: _fixtures.testProjects.kitchenReno.name,
                            contractor: 'Test Contractor'
                        })
                    });
                });
            });
        });
        _testUtils.bddHelpers.userStory('Add General Contractor (US-05)', ()=>{
            test('Given I am creating project, When I add general contractor, Then contractor is associated with project', async ()=>{
                // Given: I am creating a project
                const MockContractorForm = ()=>{
                    const [contractor, setContractor] = _react.default.useState('');
                    const [isSubmitting, setIsSubmitting] = _react.default.useState(false);
                    const handleSubmit = async (e)=>{
                        e.preventDefault();
                        setIsSubmitting(true);
                        const response = await fetch('/api/projects', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: _fixtures.testProjects.kitchenReno.name,
                                contractor
                            })
                        });
                        setIsSubmitting(false);
                    };
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                        onSubmit: handleSubmit,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                placeholder: "General contractor name (required)",
                                value: contractor,
                                onChange: (e)=>setContractor(e.target.value),
                                required: true
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                disabled: isSubmitting,
                                children: isSubmitting ? 'Adding...' : 'Add Contractor'
                            })
                        ]
                    });
                };
                mockFetch.mockResolvedValue(_testUtils.apiHelpers.createMockResponse({
                    id: 'new-project-123',
                    name: _fixtures.testProjects.kitchenReno.name,
                    contractor: _fixtures.testProjects.kitchenReno.contractor
                }, 201));
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockContractorForm, {}));
                // When: I add a general contractor
                const contractorInput = _react1.screen.getByPlaceholderText(/General contractor name/);
                _react1.fireEvent.change(contractorInput, {
                    target: {
                        value: _fixtures.testProjects.kitchenReno.contractor
                    }
                });
                const submitButton = _react1.screen.getByRole('button', {
                    name: /Add Contractor/
                });
                _react1.fireEvent.click(submitButton);
                // Then: the contractor should be associated with the project
                await (0, _react1.waitFor)(()=>{
                    expect(mockFetch).toHaveBeenCalledWith('/api/projects', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: _fixtures.testProjects.kitchenReno.name,
                            contractor: _fixtures.testProjects.kitchenReno.contractor
                        })
                    });
                });
            });
        });
        _testUtils.bddHelpers.userStory('Add Architect/Designer (US-06)', ()=>{
            test('Given I am creating project, When I optionally add architect, Then architect is included in project', async ()=>{
                // Given: I am creating a project
                const MockArchitectForm = ()=>{
                    const [architect, setArchitect] = _react.default.useState('');
                    const handleSubmit = async (e)=>{
                        e.preventDefault();
                        await fetch('/api/projects', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: _fixtures.testProjects.kitchenReno.name,
                                contractor: _fixtures.testProjects.kitchenReno.contractor,
                                architect: architect || undefined
                            })
                        });
                    };
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                        onSubmit: handleSubmit,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                placeholder: "Architect/Designer (optional)",
                                value: architect,
                                onChange: (e)=>setArchitect(e.target.value)
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                children: "Add to Project"
                            })
                        ]
                    });
                };
                mockFetch.mockResolvedValue(_testUtils.apiHelpers.createMockResponse({
                    id: 'new-project-123',
                    name: _fixtures.testProjects.kitchenReno.name,
                    contractor: _fixtures.testProjects.kitchenReno.contractor,
                    architect: _fixtures.testProjects.kitchenReno.architect
                }, 201));
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockArchitectForm, {}));
                // When: I optionally add an architect
                const architectInput = _react1.screen.getByPlaceholderText(/Architect\/Designer/);
                _react1.fireEvent.change(architectInput, {
                    target: {
                        value: _fixtures.testProjects.kitchenReno.architect
                    }
                });
                const submitButton = _react1.screen.getByRole('button', {
                    name: /Add to Project/
                });
                _react1.fireEvent.click(submitButton);
                // Then: the architect should be included in the project
                await (0, _react1.waitFor)(()=>{
                    expect(mockFetch).toHaveBeenCalledWith('/api/projects', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: _fixtures.testProjects.kitchenReno.name,
                            contractor: _fixtures.testProjects.kitchenReno.contractor,
                            architect: _fixtures.testProjects.kitchenReno.architect
                        })
                    });
                });
            });
            test('Given I am creating project, When I skip adding architect, Then project is created without architect', async ()=>{
                // Given: I am creating a project and skip architect
                const MockSkipArchitectForm = ()=>{
                    const handleSubmit = async (e)=>{
                        e.preventDefault();
                        await fetch('/api/projects', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: _fixtures.testProjects.kitchenReno.name,
                                contractor: _fixtures.testProjects.kitchenReno.contractor,
                                architect: undefined
                            })
                        });
                    };
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                        onSubmit: handleSubmit,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                placeholder: "Architect/Designer (optional)"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                children: "Skip Architect"
                            })
                        ]
                    });
                };
                mockFetch.mockResolvedValue(_testUtils.apiHelpers.createMockResponse({
                    id: 'new-project-123',
                    name: _fixtures.testProjects.kitchenReno.name,
                    contractor: _fixtures.testProjects.kitchenReno.contractor
                }, 201));
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSkipArchitectForm, {}));
                // When: I skip adding an architect
                const submitButton = _react1.screen.getByRole('button', {
                    name: /Skip Architect/
                });
                _react1.fireEvent.click(submitButton);
                // Then: the project should be created without an architect
                await (0, _react1.waitFor)(()=>{
                    expect(mockFetch).toHaveBeenCalledWith('/api/projects', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: _fixtures.testProjects.kitchenReno.name,
                            contractor: _fixtures.testProjects.kitchenReno.contractor,
                            architect: undefined
                        })
                    });
                });
            });
        });
        _testUtils.bddHelpers.userStory('Add Project Manager (US-07)', ()=>{
            test('Given I am creating project, When I optionally add project manager, Then PM is included in project', async ()=>{
                // Given: I am creating a project  
                const MockPMForm = ()=>{
                    const [projectManager, setProjectManager] = _react.default.useState('');
                    const handleSubmit = async (e)=>{
                        e.preventDefault();
                        await fetch('/api/projects', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: _fixtures.testProjects.deckAddition.name,
                                contractor: _fixtures.testProjects.deckAddition.contractor,
                                projectManager: projectManager || undefined
                            })
                        });
                    };
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                        onSubmit: handleSubmit,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                type: "text",
                                placeholder: "Project Manager (optional)",
                                value: projectManager,
                                onChange: (e)=>setProjectManager(e.target.value)
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                children: "Add PM to Project"
                            })
                        ]
                    });
                };
                mockFetch.mockResolvedValue(_testUtils.apiHelpers.createMockResponse({
                    id: 'new-project-123',
                    name: _fixtures.testProjects.deckAddition.name,
                    contractor: _fixtures.testProjects.deckAddition.contractor,
                    projectManager: _fixtures.testProjects.deckAddition.projectManager
                }, 201));
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockPMForm, {}));
                // When: I optionally add a project manager
                const pmInput = _react1.screen.getByPlaceholderText(/Project Manager/);
                _react1.fireEvent.change(pmInput, {
                    target: {
                        value: _fixtures.testProjects.deckAddition.projectManager
                    }
                });
                const submitButton = _react1.screen.getByRole('button', {
                    name: /Add PM to Project/
                });
                _react1.fireEvent.click(submitButton);
                // Then: the project manager should be included in the project
                await (0, _react1.waitFor)(()=>{
                    expect(mockFetch).toHaveBeenCalledWith('/api/projects', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: _fixtures.testProjects.deckAddition.name,
                            contractor: _fixtures.testProjects.deckAddition.contractor,
                            projectManager: _fixtures.testProjects.deckAddition.projectManager
                        })
                    });
                });
            });
        });
    });
    /**
   * Integration Tests: Error Handling and Validation
   */ describe('Integration: Error Handling', ()=>{
        test('Given invalid project data, When I submit form, Then validation errors are shown', async ()=>{
            // Given: I have a form with validation
            const MockValidationForm = ()=>{
                const [error, setError] = _react.default.useState('');
                const handleSubmit = async (e)=>{
                    e.preventDefault();
                    try {
                        const response = await fetch('/api/projects', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                name: '',
                                contractor: ''
                            })
                        });
                        if (!response.ok) {
                            const errorData = await response.json();
                            setError(errorData.error);
                        }
                    } catch (err) {
                        setError('Network error');
                    }
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                    onSubmit: handleSubmit,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            type: "submit",
                            children: "Submit Invalid Data"
                        }),
                        error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            role: "alert",
                            children: error
                        })
                    ]
                });
            };
            // Mock validation error response
            mockFetch.mockResolvedValue(_testUtils.apiHelpers.createErrorResponse('Validation failed', 400));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockValidationForm, {}));
            // When: I submit invalid data
            const submitButton = _react1.screen.getByRole('button', {
                name: /Submit Invalid Data/
            });
            _react1.fireEvent.click(submitButton);
            // Then: validation errors should be shown
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByRole('alert')).toHaveTextContent('Validation failed');
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,