{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/features/projects/creation.test.tsx"],"sourcesContent":["/**\n * Feature: Project Creation\n * All project creation related tests (BDD, integration, unit)\n * Based on NailedIt MVP Product Requirements - Create New Project\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { useSession } from 'next-auth/react'\nimport { useRouter } from 'next/navigation'\n\n// Use centralized fixtures and helpers\nimport {\n  testUsers,\n  testProjects,\n  createAuthenticatedSession,\n} from '../../fixtures'\nimport { apiHelpers, routerHelpers, bddHelpers } from '../../helpers/testUtils'\n\n// Mock NextAuth and Router\njest.mock('next-auth/react', () => ({\n  useSession: jest.fn(),\n}))\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}))\n\n// Mock fetch globally\nglobal.fetch = jest.fn()\n\ndescribe('Feature: Project Creation', () => {\n  const mockUseSession = useSession as jest.MockedFunction<typeof useSession>\n  const mockUseRouter = useRouter as jest.MockedFunction<typeof useRouter>\n  const mockFetch = fetch as jest.MockedFunction<typeof fetch>\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    const mockRouter = routerHelpers.createMockRouter()\n    mockUseRouter.mockReturnValue(mockRouter as any)\n    mockUseSession.mockReturnValue({\n      data: { user: testUsers.john },\n      status: 'authenticated',\n      update: jest.fn()\n    } as any)\n  })\n\n  /**\n   * BDD Tests: User Story Implementation\n   */\n  describe('BDD: User Stories', () => {\n    bddHelpers.userStory('Project Name (US-04)', () => {\n      test('Given I want to create new project, When I enter project name that reflects scope, Then project is created with that name', async () => {\n        // Given: I want to create a new project\n        const MockProjectForm = () => {\n          const [name, setName] = React.useState('')\n          const [isSubmitting, setIsSubmitting] = React.useState(false)\n\n          const handleSubmit = async (e: React.FormEvent) => {\n            e.preventDefault()\n            setIsSubmitting(true)\n            \n            try {\n              const response = await fetch('/api/projects', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ name, contractor: 'Test Contractor' }),\n              })\n              \n              if (response.ok) {\n                const router = routerHelpers.createMockRouter()\n                router.push('/projects/new-project-123')\n              }\n            } finally {\n              setIsSubmitting(false)\n            }\n          }\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"text\"\n                placeholder=\"Enter project name that reflects the project's scope\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n              <button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? 'Creating...' : 'Create Project'}\n              </button>\n            </form>\n          )\n        }\n\n        // Mock successful API response using centralized fixtures\n        mockFetch.mockResolvedValue(apiHelpers.createMockResponse({\n          id: 'new-project-123',\n          name: testProjects.kitchenReno.name,\n          contractor: 'Test Contractor',\n          redirectUrl: '/projects/new-project-123'\n        }, 201))\n\n        render(<MockProjectForm />)\n\n        // When: I enter a project name that reflects the project's scope\n        const nameInput = screen.getByPlaceholderText(/Enter project name/)\n        fireEvent.change(nameInput, { target: { value: testProjects.kitchenReno.name } })\n\n        const submitButton = screen.getByRole('button', { name: /Create Project/ })\n        fireEvent.click(submitButton)\n\n        // Then: the project should be created with that name\n        await waitFor(() => {\n          expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.kitchenReno.name, \n              contractor: 'Test Contractor' \n            }),\n          })\n        })\n      })\n    })\n\n    bddHelpers.userStory('Add General Contractor (US-05)', () => {\n      test('Given I am creating project, When I add general contractor, Then contractor is associated with project', async () => {\n        // Given: I am creating a project\n        const MockContractorForm = () => {\n          const [contractor, setContractor] = React.useState('')\n          const [isSubmitting, setIsSubmitting] = React.useState(false)\n\n          const handleSubmit = async (e: React.FormEvent) => {\n            e.preventDefault()\n            setIsSubmitting(true)\n            \n            const response = await fetch('/api/projects', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ \n                name: testProjects.kitchenReno.name,\n                contractor \n              }),\n            })\n            \n            setIsSubmitting(false)\n          }\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"text\"\n                placeholder=\"General contractor name (required)\"\n                value={contractor}\n                onChange={(e) => setContractor(e.target.value)}\n                required\n              />\n              <button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? 'Adding...' : 'Add Contractor'}\n              </button>\n            </form>\n          )\n        }\n\n        mockFetch.mockResolvedValue(apiHelpers.createMockResponse({\n          id: 'new-project-123',\n          name: testProjects.kitchenReno.name,\n          contractor: testProjects.kitchenReno.contractor\n        }, 201))\n\n        render(<MockContractorForm />)\n\n        // When: I add a general contractor\n        const contractorInput = screen.getByPlaceholderText(/General contractor name/)\n        fireEvent.change(contractorInput, { target: { value: testProjects.kitchenReno.contractor } })\n\n        const submitButton = screen.getByRole('button', { name: /Add Contractor/ })\n        fireEvent.click(submitButton)\n\n        // Then: the contractor should be associated with the project\n        await waitFor(() => {\n          expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.kitchenReno.name,\n              contractor: testProjects.kitchenReno.contractor\n            }),\n          })\n        })\n      })\n    })\n\n    bddHelpers.userStory('Add Architect/Designer (US-06)', () => {\n      test('Given I am creating project, When I optionally add architect, Then architect is included in project', async () => {\n        // Given: I am creating a project\n        const MockArchitectForm = () => {\n          const [architect, setArchitect] = React.useState('')\n\n          const handleSubmit = async (e: React.FormEvent) => {\n            e.preventDefault()\n            \n            await fetch('/api/projects', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ \n                name: testProjects.kitchenReno.name,\n                contractor: testProjects.kitchenReno.contractor,\n                architect: architect || undefined\n              }),\n            })\n          }\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"text\"\n                placeholder=\"Architect/Designer (optional)\"\n                value={architect}\n                onChange={(e) => setArchitect(e.target.value)}\n              />\n              <button type=\"submit\">Add to Project</button>\n            </form>\n          )\n        }\n\n        mockFetch.mockResolvedValue(apiHelpers.createMockResponse({\n          id: 'new-project-123',\n          name: testProjects.kitchenReno.name,\n          contractor: testProjects.kitchenReno.contractor,\n          architect: testProjects.kitchenReno.architect\n        }, 201))\n\n        render(<MockArchitectForm />)\n\n        // When: I optionally add an architect\n        const architectInput = screen.getByPlaceholderText(/Architect\\/Designer/)\n        fireEvent.change(architectInput, { target: { value: testProjects.kitchenReno.architect } })\n\n        const submitButton = screen.getByRole('button', { name: /Add to Project/ })\n        fireEvent.click(submitButton)\n\n        // Then: the architect should be included in the project\n        await waitFor(() => {\n          expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.kitchenReno.name,\n              contractor: testProjects.kitchenReno.contractor,\n              architect: testProjects.kitchenReno.architect\n            }),\n          })\n        })\n      })\n\n      test('Given I am creating project, When I skip adding architect, Then project is created without architect', async () => {\n        // Given: I am creating a project and skip architect\n        const MockSkipArchitectForm = () => {\n          const handleSubmit = async (e: React.FormEvent) => {\n            e.preventDefault()\n            \n            await fetch('/api/projects', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ \n                name: testProjects.kitchenReno.name,\n                contractor: testProjects.kitchenReno.contractor,\n                architect: undefined\n              }),\n            })\n          }\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <input type=\"text\" placeholder=\"Architect/Designer (optional)\" />\n              <button type=\"submit\">Skip Architect</button>\n            </form>\n          )\n        }\n\n        mockFetch.mockResolvedValue(apiHelpers.createMockResponse({\n          id: 'new-project-123',\n          name: testProjects.kitchenReno.name,\n          contractor: testProjects.kitchenReno.contractor\n        }, 201))\n\n        render(<MockSkipArchitectForm />)\n\n        // When: I skip adding an architect\n        const submitButton = screen.getByRole('button', { name: /Skip Architect/ })\n        fireEvent.click(submitButton)\n\n        // Then: the project should be created without an architect\n        await waitFor(() => {\n          expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.kitchenReno.name,\n              contractor: testProjects.kitchenReno.contractor,\n              architect: undefined\n            }),\n          })\n        })\n      })\n    })\n\n    bddHelpers.userStory('Add Project Manager (US-07)', () => {\n      test('Given I am creating project, When I optionally add project manager, Then PM is included in project', async () => {\n        // Given: I am creating a project  \n        const MockPMForm = () => {\n          const [projectManager, setProjectManager] = React.useState('')\n\n          const handleSubmit = async (e: React.FormEvent) => {\n            e.preventDefault()\n            \n            await fetch('/api/projects', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ \n                name: testProjects.deckAddition.name,\n                contractor: testProjects.deckAddition.contractor,\n                projectManager: projectManager || undefined\n              }),\n            })\n          }\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"text\"\n                placeholder=\"Project Manager (optional)\"\n                value={projectManager}\n                onChange={(e) => setProjectManager(e.target.value)}\n              />\n              <button type=\"submit\">Add PM to Project</button>\n            </form>\n          )\n        }\n\n        mockFetch.mockResolvedValue(apiHelpers.createMockResponse({\n          id: 'new-project-123',\n          name: testProjects.deckAddition.name,\n          contractor: testProjects.deckAddition.contractor,\n          projectManager: testProjects.deckAddition.projectManager\n        }, 201))\n\n        render(<MockPMForm />)\n\n        // When: I optionally add a project manager\n        const pmInput = screen.getByPlaceholderText(/Project Manager/)\n        fireEvent.change(pmInput, { target: { value: testProjects.deckAddition.projectManager } })\n\n        const submitButton = screen.getByRole('button', { name: /Add PM to Project/ })\n        fireEvent.click(submitButton)\n\n        // Then: the project manager should be included in the project\n        await waitFor(() => {\n          expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.deckAddition.name,\n              contractor: testProjects.deckAddition.contractor,\n              projectManager: testProjects.deckAddition.projectManager\n            }),\n          })\n        })\n      })\n    })\n  })\n\n  /**\n   * Integration Tests: Error Handling and Validation\n   */\n  describe('Integration: Error Handling', () => {\n    test('Given invalid project data, When I submit form, Then validation errors are shown', async () => {\n      // Given: I have a form with validation\n      const MockValidationForm = () => {\n        const [error, setError] = React.useState('')\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault()\n          \n          try {\n            const response = await fetch('/api/projects', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ name: '', contractor: '' }), // Invalid data\n            })\n\n            if (!response.ok) {\n              const errorData = await response.json()\n              setError(errorData.error)\n            }\n          } catch (err) {\n            setError('Network error')\n          }\n        }\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <button type=\"submit\">Submit Invalid Data</button>\n            {error && <div role=\"alert\">{error}</div>}\n          </form>\n        )\n      }\n\n      // Mock validation error response\n      mockFetch.mockResolvedValue(apiHelpers.createErrorResponse('Validation failed', 400))\n\n      render(<MockValidationForm />)\n\n      // When: I submit invalid data\n      const submitButton = screen.getByRole('button', { name: /Submit Invalid Data/ })\n      fireEvent.click(submitButton)\n\n      // Then: validation errors should be shown\n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toHaveTextContent('Validation failed')\n      })\n    })\n  })\n}) "],"names":["jest","mock","useSession","fn","useRouter","global","fetch","describe","mockUseSession","mockUseRouter","mockFetch","beforeEach","clearAllMocks","mockRouter","routerHelpers","createMockRouter","mockReturnValue","data","user","testUsers","john","status","update","bddHelpers","userStory","test","MockProjectForm","name","setName","React","useState","isSubmitting","setIsSubmitting","handleSubmit","e","preventDefault","response","method","headers","body","JSON","stringify","contractor","ok","router","push","form","onSubmit","input","type","placeholder","value","onChange","target","required","button","disabled","mockResolvedValue","apiHelpers","createMockResponse","id","testProjects","kitchenReno","redirectUrl","render","nameInput","screen","getByPlaceholderText","fireEvent","change","submitButton","getByRole","click","waitFor","expect","toHaveBeenCalledWith","MockContractorForm","setContractor","contractorInput","MockArchitectForm","architect","setArchitect","undefined","architectInput","MockSkipArchitectForm","MockPMForm","projectManager","setProjectManager","deckAddition","pmInput","MockValidationForm","error","setError","errorData","json","err","div","role","createErrorResponse","toHaveTextContent"],"mappings":"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"}