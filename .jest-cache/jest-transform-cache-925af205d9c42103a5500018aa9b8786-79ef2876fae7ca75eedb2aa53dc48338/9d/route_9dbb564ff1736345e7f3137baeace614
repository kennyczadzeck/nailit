98b729c2d9c2db9d05dfa6fb77877ccc
"use strict";

/* istanbul ignore next */
function cov_2m399r5j6y() {
  var path = "/Users/kennyc/code/personal/nailit/app/api/flagged-items/route.ts";
  var hash = "8f33b2cfce5b7f0e142114565a7f2b2ff684df8e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kennyc/code/personal/nailit/app/api/flagged-items/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 43
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 33
        },
        end: {
          line: 15,
          column: 53
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 55
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 22,
          column: 15
        }
      },
      "10": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 32,
          column: 10
        }
      },
      "11": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "12": {
        start: {
          line: 34,
          column: 59
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "13": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 59
        }
      },
      "14": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 62
        }
      },
      "15": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "16": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 26
        }
      },
      "17": {
        start: {
          line: 62,
          column: 19
        },
        end: {
          line: 62,
          column: 49
        }
      },
      "18": {
        start: {
          line: 63,
          column: 22
        },
        end: {
          line: 63,
          column: 59
        }
      },
      "19": {
        start: {
          line: 64,
          column: 21
        },
        end: {
          line: 64,
          column: 47
        }
      },
      "20": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 26
        }
      },
      "22": {
        start: {
          line: 67,
          column: 11
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "23": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 68
        }
      },
      "24": {
        start: {
          line: 69,
          column: 11
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "25": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 27
        }
      },
      "26": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 50
          },
          end: {
            line: 34,
            column: 51
          }
        },
        loc: {
          start: {
            line: 34,
            column: 59
          },
          end: {
            line: 48,
            column: 13
          }
        },
        line: 34
      },
      "3": {
        name: "getRelativeTime",
        decl: {
          start: {
            line: 60,
            column: 9
          },
          end: {
            line: 60,
            column: 24
          }
        },
        loc: {
          start: {
            line: 60,
            column: 31
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 60
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 47,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 47,
            column: 53
          }
        }, {
          start: {
            line: 47,
            column: 57
          },
          end: {
            line: 47,
            column: 59
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: 67,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: 69,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 35
          },
          end: {
            line: 68,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 53
          },
          end: {
            line: 68,
            column: 55
          }
        }, {
          start: {
            line: 68,
            column: 58
          },
          end: {
            line: 68,
            column: 61
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: 71,
            column: 11
          },
          end: {
            line: 73,
            column: 5
          }
        }],
        line: 69
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/kennyc/code/personal/nailit/app/api/flagged-items/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { prisma } from '../../lib/prisma'\n\n// GET /api/flagged-items - Get all flagged items for a project\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const projectId = searchParams.get('projectId')\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'Project ID is required' },\n        { status: 400 }\n      )\n    }\n\n    const flaggedItems = await prisma.flaggedItem.findMany({\n      where: {\n        projectId,\n        status: 'PENDING' // Only show pending items\n      },\n      orderBy: {\n        emailDate: 'desc'\n      }\n    })\n\n    // Transform the data to match frontend expectations\n    const transformedItems = flaggedItems.map(item => ({\n      id: item.id,\n      category: item.category.toLowerCase(),\n      title: item.title,\n      description: item.description,\n      impact: item.impact,\n      date: item.emailDate.toISOString().split('T')[0],\n      time: getRelativeTime(item.emailDate),\n      emailFrom: item.emailFrom,\n      project: 'Kitchen Renovation', // TODO: Get from project relation\n      needsEmailResponse: item.needsEmailResponse,\n      aiConfidence: item.aiConfidence,\n      originalEmail: item.originalEmail,\n      detectedChanges: item.detectedChanges as string[] || []\n    }))\n\n    return NextResponse.json(transformedItems)\n  } catch (error) {\n    console.error('Error fetching flagged items:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch flagged items' },\n      { status: 500 }\n    )\n  }\n}\n\n// Helper function to get relative time\nfunction getRelativeTime(date: Date): string {\n  const now = new Date()\n  const diffMs = now.getTime() - date.getTime()\n  const diffHours = Math.floor(diffMs / (1000 * 60 * 60))\n  const diffDays = Math.floor(diffHours / 24)\n\n  if (diffHours < 1) {\n    return 'Just now'\n  } else if (diffHours < 24) {\n    return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`\n  } else if (diffDays === 1) {\n    return '1 day ago'\n  } else {\n    return `${diffDays} days ago`\n  }\n} "],
      names: ["GET", "request", "searchParams", "URL", "url", "projectId", "get", "NextResponse", "json", "error", "status", "flaggedItems", "prisma", "flaggedItem", "findMany", "where", "orderBy", "emailDate", "transformedItems", "map", "item", "id", "category", "toLowerCase", "title", "description", "impact", "date", "toISOString", "split", "time", "getRelativeTime", "emailFrom", "project", "needsEmailResponse", "aiConfidence", "originalEmail", "detectedChanges", "console", "now", "Date", "diffMs", "getTime", "diffHours", "Math", "floor", "diffDays"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;wBACnB;AAGhB,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIF,QAAQG,GAAG;QAC5C,MAAMC,YAAYH,aAAaI,GAAG,CAAC;QAEnC,IAAI,CAACD,WAAW;YACd,OAAOE,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAyB,GAClC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMC,eAAe,MAAMC,cAAM,CAACC,WAAW,CAACC,QAAQ,CAAC;YACrDC,OAAO;gBACLV;gBACAK,QAAQ,UAAU,0BAA0B;YAC9C;YACAM,SAAS;gBACPC,WAAW;YACb;QACF;QAEA,oDAAoD;QACpD,MAAMC,mBAAmBP,aAAaQ,GAAG,CAACC,CAAAA,OAAS,CAAA;gBACjDC,IAAID,KAAKC,EAAE;gBACXC,UAAUF,KAAKE,QAAQ,CAACC,WAAW;gBACnCC,OAAOJ,KAAKI,KAAK;gBACjBC,aAAaL,KAAKK,WAAW;gBAC7BC,QAAQN,KAAKM,MAAM;gBACnBC,MAAMP,KAAKH,SAAS,CAACW,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;gBAChDC,MAAMC,gBAAgBX,KAAKH,SAAS;gBACpCe,WAAWZ,KAAKY,SAAS;gBACzBC,SAAS;gBACTC,oBAAoBd,KAAKc,kBAAkB;gBAC3CC,cAAcf,KAAKe,YAAY;gBAC/BC,eAAehB,KAAKgB,aAAa;gBACjCC,iBAAiBjB,KAAKiB,eAAe,IAAgB,EAAE;YACzD,CAAA;QAEA,OAAO9B,oBAAY,CAACC,IAAI,CAACU;IAC3B,EAAE,OAAOT,OAAO;QACd6B,QAAQ7B,KAAK,CAAC,iCAAiCA;QAC/C,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAgC,GACzC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAEA,uCAAuC;AACvC,SAASqB,gBAAgBJ,IAAU;IACjC,MAAMY,MAAM,IAAIC;IAChB,MAAMC,SAASF,IAAIG,OAAO,KAAKf,KAAKe,OAAO;IAC3C,MAAMC,YAAYC,KAAKC,KAAK,CAACJ,SAAU,CAAA,OAAO,KAAK,EAAC;IACpD,MAAMK,WAAWF,KAAKC,KAAK,CAACF,YAAY;IAExC,IAAIA,YAAY,GAAG;QACjB,OAAO;IACT,OAAO,IAAIA,YAAY,IAAI;QACzB,OAAO,GAAGA,UAAU,KAAK,EAAEA,cAAc,IAAI,KAAK,IAAI,IAAI,CAAC;IAC7D,OAAO,IAAIG,aAAa,GAAG;QACzB,OAAO;IACT,OAAO;QACL,OAAO,GAAGA,SAAS,SAAS,CAAC;IAC/B;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8f33b2cfce5b7f0e142114565a7f2b2ff684df8e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2m399r5j6y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2m399r5j6y();
cov_2m399r5j6y().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2m399r5j6y().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2m399r5j6y().f[0]++;
    cov_2m399r5j6y().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_2m399r5j6y().s[3]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_2m399r5j6y().s[4]++, require("../../lib/prisma"));
async function GET(request) {
  /* istanbul ignore next */
  cov_2m399r5j6y().f[1]++;
  cov_2m399r5j6y().s[5]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2m399r5j6y().s[6]++, new URL(request.url));
    const projectId =
    /* istanbul ignore next */
    (cov_2m399r5j6y().s[7]++, searchParams.get('projectId'));
    /* istanbul ignore next */
    cov_2m399r5j6y().s[8]++;
    if (!projectId) {
      /* istanbul ignore next */
      cov_2m399r5j6y().b[0][0]++;
      cov_2m399r5j6y().s[9]++;
      return _server.NextResponse.json({
        error: 'Project ID is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2m399r5j6y().b[0][1]++;
    }
    const flaggedItems =
    /* istanbul ignore next */
    (cov_2m399r5j6y().s[10]++, await _prisma.prisma.flaggedItem.findMany({
      where: {
        projectId,
        status: 'PENDING' // Only show pending items
      },
      orderBy: {
        emailDate: 'desc'
      }
    }));
    // Transform the data to match frontend expectations
    const transformedItems =
    /* istanbul ignore next */
    (cov_2m399r5j6y().s[11]++, flaggedItems.map(item => {
      /* istanbul ignore next */
      cov_2m399r5j6y().f[2]++;
      cov_2m399r5j6y().s[12]++;
      return {
        id: item.id,
        category: item.category.toLowerCase(),
        title: item.title,
        description: item.description,
        impact: item.impact,
        date: item.emailDate.toISOString().split('T')[0],
        time: getRelativeTime(item.emailDate),
        emailFrom: item.emailFrom,
        project: 'Kitchen Renovation',
        needsEmailResponse: item.needsEmailResponse,
        aiConfidence: item.aiConfidence,
        originalEmail: item.originalEmail,
        detectedChanges:
        /* istanbul ignore next */
        (cov_2m399r5j6y().b[1][0]++, item.detectedChanges) ||
        /* istanbul ignore next */
        (cov_2m399r5j6y().b[1][1]++, [])
      };
    }));
    /* istanbul ignore next */
    cov_2m399r5j6y().s[13]++;
    return _server.NextResponse.json(transformedItems);
  } catch (error) {
    /* istanbul ignore next */
    cov_2m399r5j6y().s[14]++;
    console.error('Error fetching flagged items:', error);
    /* istanbul ignore next */
    cov_2m399r5j6y().s[15]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch flagged items'
    }, {
      status: 500
    });
  }
}
// Helper function to get relative time
function getRelativeTime(date) {
  /* istanbul ignore next */
  cov_2m399r5j6y().f[3]++;
  const now =
  /* istanbul ignore next */
  (cov_2m399r5j6y().s[16]++, new Date());
  const diffMs =
  /* istanbul ignore next */
  (cov_2m399r5j6y().s[17]++, now.getTime() - date.getTime());
  const diffHours =
  /* istanbul ignore next */
  (cov_2m399r5j6y().s[18]++, Math.floor(diffMs / (1000 * 60 * 60)));
  const diffDays =
  /* istanbul ignore next */
  (cov_2m399r5j6y().s[19]++, Math.floor(diffHours / 24));
  /* istanbul ignore next */
  cov_2m399r5j6y().s[20]++;
  if (diffHours < 1) {
    /* istanbul ignore next */
    cov_2m399r5j6y().b[2][0]++;
    cov_2m399r5j6y().s[21]++;
    return 'Just now';
  } else {
    /* istanbul ignore next */
    cov_2m399r5j6y().b[2][1]++;
    cov_2m399r5j6y().s[22]++;
    if (diffHours < 24) {
      /* istanbul ignore next */
      cov_2m399r5j6y().b[3][0]++;
      cov_2m399r5j6y().s[23]++;
      return `${diffHours} hour${diffHours === 1 ?
      /* istanbul ignore next */
      (cov_2m399r5j6y().b[4][0]++, '') :
      /* istanbul ignore next */
      (cov_2m399r5j6y().b[4][1]++, 's')} ago`;
    } else {
      /* istanbul ignore next */
      cov_2m399r5j6y().b[3][1]++;
      cov_2m399r5j6y().s[24]++;
      if (diffDays === 1) {
        /* istanbul ignore next */
        cov_2m399r5j6y().b[5][0]++;
        cov_2m399r5j6y().s[25]++;
        return '1 day ago';
      } else {
        /* istanbul ignore next */
        cov_2m399r5j6y().b[5][1]++;
        cov_2m399r5j6y().s[26]++;
        return `${diffDays} days ago`;
      }
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,