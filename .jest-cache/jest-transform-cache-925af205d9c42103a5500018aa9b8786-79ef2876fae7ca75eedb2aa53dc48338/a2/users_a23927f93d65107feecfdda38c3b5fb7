8d67cc8da9879aa65dff5970b31a0efe
/**
 * Centralized User Test Fixtures
 * Used across BDD, integration, and unit tests
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createAuthenticatedSession () {
        return createAuthenticatedSession;
    },
    get createTestUser () {
        return createTestUser;
    },
    get createUnauthenticatedSession () {
        return createUnauthenticatedSession;
    },
    get testUsers () {
        return testUsers;
    },
    get userScenarios () {
        return userScenarios;
    }
});
const testUsers = {
    // Primary test user - homeowner with projects
    john: {
        id: 'user-123',
        email: 'john.homeowner@example.com',
        name: 'John Homeowner',
        image: 'https://example.com/john.jpg',
        emailVerified: new Date('2024-01-01T00:00:00Z'),
        createdAt: new Date('2024-01-01T00:00:00Z'),
        updatedAt: new Date('2024-01-01T00:00:00Z')
    },
    // Secondary user - homeowner with no projects
    jane: {
        id: 'user-456',
        email: 'jane.newuser@example.com',
        name: 'Jane New User',
        image: 'https://example.com/jane.jpg',
        emailVerified: new Date('2024-01-15T00:00:00Z'),
        createdAt: new Date('2024-01-15T00:00:00Z'),
        updatedAt: new Date('2024-01-15T00:00:00Z')
    },
    // Test user for error scenarios
    error: {
        id: 'user-error',
        email: 'error@example.com',
        name: 'Error Test User',
        createdAt: new Date('2024-01-01T00:00:00Z'),
        updatedAt: new Date('2024-01-01T00:00:00Z')
    },
    // Unauthenticated user scenario
    unauthenticated: null
};
const userScenarios = {
    authenticated: {
        user: testUsers.john,
        status: 'authenticated'
    },
    unauthenticated: {
        user: null,
        status: 'unauthenticated'
    },
    newUser: {
        user: testUsers.jane,
        status: 'authenticated'
    }
};
const createTestUser = (overrides = {})=>({
        ...testUsers.john,
        ...overrides
    });
const createUnauthenticatedSession = ()=>({
        data: null,
        status: 'unauthenticated'
    });
const createAuthenticatedSession = (user = testUsers.john)=>({
        data: {
            user
        },
        status: 'authenticated'
    });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9rZW5ueWMvY29kZS9wZXJzb25hbC9uYWlsaXQvdGVzdHMvZml4dHVyZXMvdXNlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDZW50cmFsaXplZCBVc2VyIFRlc3QgRml4dHVyZXNcbiAqIFVzZWQgYWNyb3NzIEJERCwgaW50ZWdyYXRpb24sIGFuZCB1bml0IHRlc3RzXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBUZXN0VXNlciB7XG4gIGlkOiBzdHJpbmdcbiAgZW1haWw6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgaW1hZ2U/OiBzdHJpbmdcbiAgZW1haWxWZXJpZmllZD86IERhdGVcbiAgY3JlYXRlZEF0PzogRGF0ZVxuICB1cGRhdGVkQXQ/OiBEYXRlXG59XG5cbmV4cG9ydCBjb25zdCB0ZXN0VXNlcnMgPSB7XG4gIC8vIFByaW1hcnkgdGVzdCB1c2VyIC0gaG9tZW93bmVyIHdpdGggcHJvamVjdHNcbiAgam9objoge1xuICAgIGlkOiAndXNlci0xMjMnLFxuICAgIGVtYWlsOiAnam9obi5ob21lb3duZXJAZXhhbXBsZS5jb20nLFxuICAgIG5hbWU6ICdKb2huIEhvbWVvd25lcicsXG4gICAgaW1hZ2U6ICdodHRwczovL2V4YW1wbGUuY29tL2pvaG4uanBnJyxcbiAgICBlbWFpbFZlcmlmaWVkOiBuZXcgRGF0ZSgnMjAyNC0wMS0wMVQwMDowMDowMFonKSxcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCcyMDI0LTAxLTAxVDAwOjAwOjAwWicpLFxuICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoJzIwMjQtMDEtMDFUMDA6MDA6MDBaJyksXG4gIH0sXG5cbiAgLy8gU2Vjb25kYXJ5IHVzZXIgLSBob21lb3duZXIgd2l0aCBubyBwcm9qZWN0c1xuICBqYW5lOiB7XG4gICAgaWQ6ICd1c2VyLTQ1NicsXG4gICAgZW1haWw6ICdqYW5lLm5ld3VzZXJAZXhhbXBsZS5jb20nLCBcbiAgICBuYW1lOiAnSmFuZSBOZXcgVXNlcicsXG4gICAgaW1hZ2U6ICdodHRwczovL2V4YW1wbGUuY29tL2phbmUuanBnJyxcbiAgICBlbWFpbFZlcmlmaWVkOiBuZXcgRGF0ZSgnMjAyNC0wMS0xNVQwMDowMDowMFonKSxcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCcyMDI0LTAxLTE1VDAwOjAwOjAwWicpLFxuICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoJzIwMjQtMDEtMTVUMDA6MDA6MDBaJyksXG4gIH0sXG5cbiAgLy8gVGVzdCB1c2VyIGZvciBlcnJvciBzY2VuYXJpb3NcbiAgZXJyb3I6IHtcbiAgICBpZDogJ3VzZXItZXJyb3InLFxuICAgIGVtYWlsOiAnZXJyb3JAZXhhbXBsZS5jb20nLFxuICAgIG5hbWU6ICdFcnJvciBUZXN0IFVzZXInLFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoJzIwMjQtMDEtMDFUMDA6MDA6MDBaJyksXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgnMjAyNC0wMS0wMVQwMDowMDowMFonKSxcbiAgfSxcblxuICAvLyBVbmF1dGhlbnRpY2F0ZWQgdXNlciBzY2VuYXJpb1xuICB1bmF1dGhlbnRpY2F0ZWQ6IG51bGwsXG59IGFzIGNvbnN0XG5cbmV4cG9ydCBjb25zdCB1c2VyU2NlbmFyaW9zID0ge1xuICBhdXRoZW50aWNhdGVkOiB7XG4gICAgdXNlcjogdGVzdFVzZXJzLmpvaG4sXG4gICAgc3RhdHVzOiAnYXV0aGVudGljYXRlZCcgYXMgY29uc3QsXG4gIH0sXG4gIHVuYXV0aGVudGljYXRlZDoge1xuICAgIHVzZXI6IG51bGwsXG4gICAgc3RhdHVzOiAndW5hdXRoZW50aWNhdGVkJyBhcyBjb25zdCxcbiAgfSxcbiAgbmV3VXNlcjoge1xuICAgIHVzZXI6IHRlc3RVc2Vycy5qYW5lLFxuICAgIHN0YXR1czogJ2F1dGhlbnRpY2F0ZWQnIGFzIGNvbnN0LFxuICB9LFxufVxuXG4vLyBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgY3JlYXRpbmcgdXNlcnNcbmV4cG9ydCBjb25zdCBjcmVhdGVUZXN0VXNlciA9IChvdmVycmlkZXM6IFBhcnRpYWw8VGVzdFVzZXI+ID0ge30pOiBUZXN0VXNlciA9PiAoe1xuICAuLi50ZXN0VXNlcnMuam9obixcbiAgLi4ub3ZlcnJpZGVzLFxufSlcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVVuYXV0aGVudGljYXRlZFNlc3Npb24gPSAoKSA9PiAoe1xuICBkYXRhOiBudWxsLFxuICBzdGF0dXM6ICd1bmF1dGhlbnRpY2F0ZWQnIGFzIGNvbnN0LFxufSlcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUF1dGhlbnRpY2F0ZWRTZXNzaW9uID0gKHVzZXI6IFRlc3RVc2VyID0gdGVzdFVzZXJzLmpvaG4pID0+ICh7XG4gIGRhdGE6IHsgdXNlciB9LFxuICBzdGF0dXM6ICdhdXRoZW50aWNhdGVkJyBhcyBjb25zdCxcbn0pICJdLCJuYW1lcyI6WyJjcmVhdGVBdXRoZW50aWNhdGVkU2Vzc2lvbiIsImNyZWF0ZVRlc3RVc2VyIiwiY3JlYXRlVW5hdXRoZW50aWNhdGVkU2Vzc2lvbiIsInRlc3RVc2VycyIsInVzZXJTY2VuYXJpb3MiLCJqb2huIiwiaWQiLCJlbWFpbCIsIm5hbWUiLCJpbWFnZSIsImVtYWlsVmVyaWZpZWQiLCJEYXRlIiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0IiwiamFuZSIsImVycm9yIiwidW5hdXRoZW50aWNhdGVkIiwiYXV0aGVudGljYXRlZCIsInVzZXIiLCJzdGF0dXMiLCJuZXdVc2VyIiwib3ZlcnJpZGVzIiwiZGF0YSJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7Ozs7Ozs7OztRQTBFWUE7ZUFBQUE7O1FBVkFDO2VBQUFBOztRQUtBQztlQUFBQTs7UUF6REFDO2VBQUFBOztRQW9DQUM7ZUFBQUE7OztBQXBDTixNQUFNRCxZQUFZO0lBQ3ZCLDhDQUE4QztJQUM5Q0UsTUFBTTtRQUNKQyxJQUFJO1FBQ0pDLE9BQU87UUFDUEMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLGVBQWUsSUFBSUMsS0FBSztRQUN4QkMsV0FBVyxJQUFJRCxLQUFLO1FBQ3BCRSxXQUFXLElBQUlGLEtBQUs7SUFDdEI7SUFFQSw4Q0FBOEM7SUFDOUNHLE1BQU07UUFDSlIsSUFBSTtRQUNKQyxPQUFPO1FBQ1BDLE1BQU07UUFDTkMsT0FBTztRQUNQQyxlQUFlLElBQUlDLEtBQUs7UUFDeEJDLFdBQVcsSUFBSUQsS0FBSztRQUNwQkUsV0FBVyxJQUFJRixLQUFLO0lBQ3RCO0lBRUEsZ0NBQWdDO0lBQ2hDSSxPQUFPO1FBQ0xULElBQUk7UUFDSkMsT0FBTztRQUNQQyxNQUFNO1FBQ05JLFdBQVcsSUFBSUQsS0FBSztRQUNwQkUsV0FBVyxJQUFJRixLQUFLO0lBQ3RCO0lBRUEsZ0NBQWdDO0lBQ2hDSyxpQkFBaUI7QUFDbkI7QUFFTyxNQUFNWixnQkFBZ0I7SUFDM0JhLGVBQWU7UUFDYkMsTUFBTWYsVUFBVUUsSUFBSTtRQUNwQmMsUUFBUTtJQUNWO0lBQ0FILGlCQUFpQjtRQUNmRSxNQUFNO1FBQ05DLFFBQVE7SUFDVjtJQUNBQyxTQUFTO1FBQ1BGLE1BQU1mLFVBQVVXLElBQUk7UUFDcEJLLFFBQVE7SUFDVjtBQUNGO0FBR08sTUFBTWxCLGlCQUFpQixDQUFDb0IsWUFBK0IsQ0FBQyxDQUFDLEdBQWdCLENBQUE7UUFDOUUsR0FBR2xCLFVBQVVFLElBQUk7UUFDakIsR0FBR2dCLFNBQVM7SUFDZCxDQUFBO0FBRU8sTUFBTW5CLCtCQUErQixJQUFPLENBQUE7UUFDakRvQixNQUFNO1FBQ05ILFFBQVE7SUFDVixDQUFBO0FBRU8sTUFBTW5CLDZCQUE2QixDQUFDa0IsT0FBaUJmLFVBQVVFLElBQUksR0FBTSxDQUFBO1FBQzlFaUIsTUFBTTtZQUFFSjtRQUFLO1FBQ2JDLFFBQVE7SUFDVixDQUFBIn0=