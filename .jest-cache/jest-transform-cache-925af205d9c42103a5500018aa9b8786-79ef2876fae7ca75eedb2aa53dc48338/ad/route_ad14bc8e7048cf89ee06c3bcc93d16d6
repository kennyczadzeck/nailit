bf71d74cad0727d1cea8ea33200c5c3f
"use strict";

/* istanbul ignore next */
function cov_ofrpqfyx() {
  var path = "/Users/kennyc/code/personal/nailit/app/api/init-db/route.ts";
  var hash = "17bb6d531472d3fef181fe5e987b465df409660b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kennyc/code/personal/nailit/app/api/init-db/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 43
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "10": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 40
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "13": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 74
        }
      },
      "16": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 77
        }
      },
      "18": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 60
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "20": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 70
        }
      },
      "21": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "22": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 73
        }
      },
      "23": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "24": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 69
        }
      },
      "25": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "26": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 43
        }
      },
      "27": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "28": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 40
        }
      },
      "29": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "30": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 63
        }
      },
      "31": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "32": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "33": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "34": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 19
          }
        },
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 87,
            column: 15
          },
          end: {
            line: 87,
            column: 18
          }
        },
        loc: {
          start: {
            line: 87,
            column: 21
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 87
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/Users/kennyc/code/personal/nailit/app/api/init-db/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '../../lib/prisma';\n\nexport async function POST() {\n  try {\n    // Test basic connection\n    console.log('Testing database connection...');\n    await prisma.$connect();\n    console.log('Database connection successful');\n\n    // Check if tables exist by trying to query them\n    console.log('Checking if tables exist...');\n    \n    try {\n      // Test if tables exist by trying to count users\n      const userCount = await prisma.user.count();\n      console.log(`Tables exist. Current user count: ${userCount}`);\n      \n      return NextResponse.json({ \n        status: 'Already initialized',\n        userCount,\n        message: 'Database tables already exist',\n        timestamp: new Date().toISOString() \n      });\n    } catch (tableError: any) {\n      console.log('Tables do not exist, attempting to create them...');\n      console.log('Table error:', tableError.message);\n      \n      // Tables don't exist, try to create them using raw SQL\n      try {\n        console.log('Creating tables using Prisma schema...');\n        \n        // Use Prisma's $executeRaw to run the schema creation\n        // For now, we'll provide instructions since we can't run migrations in serverless\n        return NextResponse.json({ \n          status: 'Tables missing - setup required',\n          error: 'Database tables do not exist',\n          message: 'Tables need to be created',\n          instructions: [\n            '1. Run locally: npx prisma db push --accept-data-loss',\n            '2. Or use Neon Console to run SQL schema',\n            '3. Or create tables manually'\n          ],\n          neonConsole: 'Go to Neon Console \u2192 SQL Editor and run your schema',\n          tableError: tableError.message,\n          timestamp: new Date().toISOString()\n        }, { status: 424 }); // 424 Failed Dependency\n      } catch (creationError: any) {\n        console.error('Failed to create tables:', creationError);\n        return NextResponse.json({ \n          status: 'Table creation failed',\n          error: creationError.message,\n          timestamp: new Date().toISOString()\n        }, { status: 500 });\n      }\n    }\n    \n  } catch (connectionError: any) {\n    console.error('Database connection error:', connectionError);\n    \n    return NextResponse.json({ \n      status: 'Connection failed',\n      error: connectionError.message,\n      code: connectionError.code,\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nexport async function GET() {\n  // Same as POST but read-only check\n  try {\n    await prisma.$connect();\n    \n    try {\n      const userCount = await prisma.user.count();\n      return NextResponse.json({ \n        status: 'Connected and initialized',\n        userCount,\n        timestamp: new Date().toISOString() \n      });\n    } catch (tableError: any) {\n      return NextResponse.json({ \n        status: 'Connected but tables missing',\n        error: 'Tables do not exist',\n        code: tableError.code,\n        message: 'Use POST /api/init-db to initialize',\n        timestamp: new Date().toISOString()\n      }, { status: 424 });\n    }\n  } catch (error: any) {\n    return NextResponse.json({ \n      status: 'Connection failed',\n      error: error.message,\n      code: error.code,\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],
      names: ["GET", "POST", "console", "log", "prisma", "$connect", "userCount", "user", "count", "NextResponse", "json", "status", "message", "timestamp", "Date", "toISOString", "tableError", "error", "instructions", "neonConsole", "creationError", "connectionError", "code", "$disconnect"],
      mappings: ";;;;;;;;;;;QAuEsBA;eAAAA;;QApEAC;eAAAA;;;wBAHoB;wBACnB;AAEhB,eAAeA;IACpB,IAAI;QACF,wBAAwB;QACxBC,QAAQC,GAAG,CAAC;QACZ,MAAMC,cAAM,CAACC,QAAQ;QACrBH,QAAQC,GAAG,CAAC;QAEZ,gDAAgD;QAChDD,QAAQC,GAAG,CAAC;QAEZ,IAAI;YACF,gDAAgD;YAChD,MAAMG,YAAY,MAAMF,cAAM,CAACG,IAAI,CAACC,KAAK;YACzCN,QAAQC,GAAG,CAAC,CAAC,kCAAkC,EAAEG,WAAW;YAE5D,OAAOG,oBAAY,CAACC,IAAI,CAAC;gBACvBC,QAAQ;gBACRL;gBACAM,SAAS;gBACTC,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF,EAAE,OAAOC,YAAiB;YACxBd,QAAQC,GAAG,CAAC;YACZD,QAAQC,GAAG,CAAC,gBAAgBa,WAAWJ,OAAO;YAE9C,uDAAuD;YACvD,IAAI;gBACFV,QAAQC,GAAG,CAAC;gBAEZ,sDAAsD;gBACtD,kFAAkF;gBAClF,OAAOM,oBAAY,CAACC,IAAI,CAAC;oBACvBC,QAAQ;oBACRM,OAAO;oBACPL,SAAS;oBACTM,cAAc;wBACZ;wBACA;wBACA;qBACD;oBACDC,aAAa;oBACbH,YAAYA,WAAWJ,OAAO;oBAC9BC,WAAW,IAAIC,OAAOC,WAAW;gBACnC,GAAG;oBAAEJ,QAAQ;gBAAI,IAAI,wBAAwB;YAC/C,EAAE,OAAOS,eAAoB;gBAC3BlB,QAAQe,KAAK,CAAC,4BAA4BG;gBAC1C,OAAOX,oBAAY,CAACC,IAAI,CAAC;oBACvBC,QAAQ;oBACRM,OAAOG,cAAcR,OAAO;oBAC5BC,WAAW,IAAIC,OAAOC,WAAW;gBACnC,GAAG;oBAAEJ,QAAQ;gBAAI;YACnB;QACF;IAEF,EAAE,OAAOU,iBAAsB;QAC7BnB,QAAQe,KAAK,CAAC,8BAA8BI;QAE5C,OAAOZ,oBAAY,CAACC,IAAI,CAAC;YACvBC,QAAQ;YACRM,OAAOI,gBAAgBT,OAAO;YAC9BU,MAAMD,gBAAgBC,IAAI;YAC1BT,WAAW,IAAIC,OAAOC,WAAW;QACnC,GAAG;YAAEJ,QAAQ;QAAI;IACnB,SAAU;QACR,MAAMP,cAAM,CAACmB,WAAW;IAC1B;AACF;AAEO,eAAevB;IACpB,mCAAmC;IACnC,IAAI;QACF,MAAMI,cAAM,CAACC,QAAQ;QAErB,IAAI;YACF,MAAMC,YAAY,MAAMF,cAAM,CAACG,IAAI,CAACC,KAAK;YACzC,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBACvBC,QAAQ;gBACRL;gBACAO,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF,EAAE,OAAOC,YAAiB;YACxB,OAAOP,oBAAY,CAACC,IAAI,CAAC;gBACvBC,QAAQ;gBACRM,OAAO;gBACPK,MAAMN,WAAWM,IAAI;gBACrBV,SAAS;gBACTC,WAAW,IAAIC,OAAOC,WAAW;YACnC,GAAG;gBAAEJ,QAAQ;YAAI;QACnB;IACF,EAAE,OAAOM,OAAY;QACnB,OAAOR,oBAAY,CAACC,IAAI,CAAC;YACvBC,QAAQ;YACRM,OAAOA,MAAML,OAAO;YACpBU,MAAML,MAAMK,IAAI;YAChBT,WAAW,IAAIC,OAAOC,WAAW;QACnC,GAAG;YAAEJ,QAAQ;QAAI;IACnB,SAAU;QACR,MAAMP,cAAM,CAACmB,WAAW;IAC1B;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "17bb6d531472d3fef181fe5e987b465df409660b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ofrpqfyx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ofrpqfyx();
cov_ofrpqfyx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_ofrpqfyx().f[0]++;
  cov_ofrpqfyx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_ofrpqfyx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_ofrpqfyx().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_ofrpqfyx().f[1]++;
    cov_ofrpqfyx().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_ofrpqfyx().f[2]++;
    cov_ofrpqfyx().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_ofrpqfyx().s[6]++, require("next/server"));
const _prisma =
/* istanbul ignore next */
(cov_ofrpqfyx().s[7]++, require("../../lib/prisma"));
async function POST() {
  /* istanbul ignore next */
  cov_ofrpqfyx().f[3]++;
  cov_ofrpqfyx().s[8]++;
  try {
    /* istanbul ignore next */
    cov_ofrpqfyx().s[9]++;
    // Test basic connection
    console.log('Testing database connection...');
    /* istanbul ignore next */
    cov_ofrpqfyx().s[10]++;
    await _prisma.prisma.$connect();
    /* istanbul ignore next */
    cov_ofrpqfyx().s[11]++;
    console.log('Database connection successful');
    // Check if tables exist by trying to query them
    /* istanbul ignore next */
    cov_ofrpqfyx().s[12]++;
    console.log('Checking if tables exist...');
    /* istanbul ignore next */
    cov_ofrpqfyx().s[13]++;
    try {
      // Test if tables exist by trying to count users
      const userCount =
      /* istanbul ignore next */
      (cov_ofrpqfyx().s[14]++, await _prisma.prisma.user.count());
      /* istanbul ignore next */
      cov_ofrpqfyx().s[15]++;
      console.log(`Tables exist. Current user count: ${userCount}`);
      /* istanbul ignore next */
      cov_ofrpqfyx().s[16]++;
      return _server.NextResponse.json({
        status: 'Already initialized',
        userCount,
        message: 'Database tables already exist',
        timestamp: new Date().toISOString()
      });
    } catch (tableError) {
      /* istanbul ignore next */
      cov_ofrpqfyx().s[17]++;
      console.log('Tables do not exist, attempting to create them...');
      /* istanbul ignore next */
      cov_ofrpqfyx().s[18]++;
      console.log('Table error:', tableError.message);
      // Tables don't exist, try to create them using raw SQL
      /* istanbul ignore next */
      cov_ofrpqfyx().s[19]++;
      try {
        /* istanbul ignore next */
        cov_ofrpqfyx().s[20]++;
        console.log('Creating tables using Prisma schema...');
        // Use Prisma's $executeRaw to run the schema creation
        // For now, we'll provide instructions since we can't run migrations in serverless
        /* istanbul ignore next */
        cov_ofrpqfyx().s[21]++;
        return _server.NextResponse.json({
          status: 'Tables missing - setup required',
          error: 'Database tables do not exist',
          message: 'Tables need to be created',
          instructions: ['1. Run locally: npx prisma db push --accept-data-loss', '2. Or use Neon Console to run SQL schema', '3. Or create tables manually'],
          neonConsole: 'Go to Neon Console → SQL Editor and run your schema',
          tableError: tableError.message,
          timestamp: new Date().toISOString()
        }, {
          status: 424
        }); // 424 Failed Dependency
      } catch (creationError) {
        /* istanbul ignore next */
        cov_ofrpqfyx().s[22]++;
        console.error('Failed to create tables:', creationError);
        /* istanbul ignore next */
        cov_ofrpqfyx().s[23]++;
        return _server.NextResponse.json({
          status: 'Table creation failed',
          error: creationError.message,
          timestamp: new Date().toISOString()
        }, {
          status: 500
        });
      }
    }
  } catch (connectionError) {
    /* istanbul ignore next */
    cov_ofrpqfyx().s[24]++;
    console.error('Database connection error:', connectionError);
    /* istanbul ignore next */
    cov_ofrpqfyx().s[25]++;
    return _server.NextResponse.json({
      status: 'Connection failed',
      error: connectionError.message,
      code: connectionError.code,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  } finally {
    /* istanbul ignore next */
    cov_ofrpqfyx().s[26]++;
    await _prisma.prisma.$disconnect();
  }
}
async function GET() {
  /* istanbul ignore next */
  cov_ofrpqfyx().f[4]++;
  cov_ofrpqfyx().s[27]++;
  // Same as POST but read-only check
  try {
    /* istanbul ignore next */
    cov_ofrpqfyx().s[28]++;
    await _prisma.prisma.$connect();
    /* istanbul ignore next */
    cov_ofrpqfyx().s[29]++;
    try {
      const userCount =
      /* istanbul ignore next */
      (cov_ofrpqfyx().s[30]++, await _prisma.prisma.user.count());
      /* istanbul ignore next */
      cov_ofrpqfyx().s[31]++;
      return _server.NextResponse.json({
        status: 'Connected and initialized',
        userCount,
        timestamp: new Date().toISOString()
      });
    } catch (tableError) {
      /* istanbul ignore next */
      cov_ofrpqfyx().s[32]++;
      return _server.NextResponse.json({
        status: 'Connected but tables missing',
        error: 'Tables do not exist',
        code: tableError.code,
        message: 'Use POST /api/init-db to initialize',
        timestamp: new Date().toISOString()
      }, {
        status: 424
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_ofrpqfyx().s[33]++;
    return _server.NextResponse.json({
      status: 'Connection failed',
      error: error.message,
      code: error.code,
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  } finally {
    /* istanbul ignore next */
    cov_ofrpqfyx().s[34]++;
    await _prisma.prisma.$disconnect();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,