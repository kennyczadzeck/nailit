{"version":3,"names":["GET","cov_ofrpqfyx","f","s","POST","console","log","_prisma","prisma","$connect","userCount","user","count","_server","NextResponse","json","status","message","timestamp","Date","toISOString","tableError","error","instructions","neonConsole","creationError","connectionError","code","$disconnect"],"sources":["/Users/kennyc/code/personal/nailit/app/api/init-db/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '../../lib/prisma';\n\nexport async function POST() {\n  try {\n    // Test basic connection\n    console.log('Testing database connection...');\n    await prisma.$connect();\n    console.log('Database connection successful');\n\n    // Check if tables exist by trying to query them\n    console.log('Checking if tables exist...');\n    \n    try {\n      // Test if tables exist by trying to count users\n      const userCount = await prisma.user.count();\n      console.log(`Tables exist. Current user count: ${userCount}`);\n      \n      return NextResponse.json({ \n        status: 'Already initialized',\n        userCount,\n        message: 'Database tables already exist',\n        timestamp: new Date().toISOString() \n      });\n    } catch (tableError: any) {\n      console.log('Tables do not exist, attempting to create them...');\n      console.log('Table error:', tableError.message);\n      \n      // Tables don't exist, try to create them using raw SQL\n      try {\n        console.log('Creating tables using Prisma schema...');\n        \n        // Use Prisma's $executeRaw to run the schema creation\n        // For now, we'll provide instructions since we can't run migrations in serverless\n        return NextResponse.json({ \n          status: 'Tables missing - setup required',\n          error: 'Database tables do not exist',\n          message: 'Tables need to be created',\n          instructions: [\n            '1. Run locally: npx prisma db push --accept-data-loss',\n            '2. Or use Neon Console to run SQL schema',\n            '3. Or create tables manually'\n          ],\n          neonConsole: 'Go to Neon Console â†’ SQL Editor and run your schema',\n          tableError: tableError.message,\n          timestamp: new Date().toISOString()\n        }, { status: 424 }); // 424 Failed Dependency\n      } catch (creationError: any) {\n        console.error('Failed to create tables:', creationError);\n        return NextResponse.json({ \n          status: 'Table creation failed',\n          error: creationError.message,\n          timestamp: new Date().toISOString()\n        }, { status: 500 });\n      }\n    }\n    \n  } catch (connectionError: any) {\n    console.error('Database connection error:', connectionError);\n    \n    return NextResponse.json({ \n      status: 'Connection failed',\n      error: connectionError.message,\n      code: connectionError.code,\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nexport async function GET() {\n  // Same as POST but read-only check\n  try {\n    await prisma.$connect();\n    \n    try {\n      const userCount = await prisma.user.count();\n      return NextResponse.json({ \n        status: 'Connected and initialized',\n        userCount,\n        timestamp: new Date().toISOString() \n      });\n    } catch (tableError: any) {\n      return NextResponse.json({ \n        status: 'Connected but tables missing',\n        error: 'Tables do not exist',\n        code: tableError.code,\n        message: 'Use POST /api/init-db to initialize',\n        timestamp: new Date().toISOString()\n      }, { status: 424 });\n    }\n  } catch (error: any) {\n    return NextResponse.json({ \n      status: 'Connection failed',\n      error: error.message,\n      code: error.code,\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"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","ignoreList":[]}