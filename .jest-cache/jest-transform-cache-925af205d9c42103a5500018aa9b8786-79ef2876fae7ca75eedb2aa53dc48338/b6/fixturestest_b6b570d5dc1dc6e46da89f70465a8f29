52d39914f8c6f38f2b3e02a4c8a53ce4
/**
 * Test Fixtures Validation
 * Ensures our centralized fixtures work correctly
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _index = require("./index");
describe('Test Fixtures', ()=>{
    describe('User Fixtures', ()=>{
        test('should provide consistent test users', ()=>{
            expect(_index.testUsers.john).toMatchObject({
                id: 'user-123',
                name: 'John Homeowner',
                email: 'john.homeowner@example.com'
            });
            expect(_index.testUsers.jane).toMatchObject({
                id: 'user-456',
                name: 'Jane New User',
                email: 'jane.newuser@example.com'
            });
        });
        test('should create custom users with overrides', ()=>{
            const customUser = (0, _index.createTestUser)({
                name: 'Custom User',
                email: 'custom@example.com'
            });
            expect(customUser).toMatchObject({
                id: 'user-123',
                name: 'Custom User',
                email: 'custom@example.com'
            });
        });
    });
    describe('Project Fixtures', ()=>{
        test('should provide realistic project data', ()=>{
            expect(_index.testProjects.kitchenReno).toMatchObject({
                id: 'project-1',
                name: 'Kitchen Renovation',
                userId: 'user-123',
                contractor: 'Mike Johnson Construction',
                architect: 'Sarah Chen Design'
            });
        });
        test('should create projects with user scenarios', ()=>{
            const scenario = (0, _index.givenUserHasProjects)('user-123', 2);
            expect(scenario.userId).toBe('user-123');
            expect(scenario.count).toBe(2);
            expect(scenario.projects).toHaveLength(2);
            expect(scenario.projects[0]).toMatchObject({
                userId: 'user-123',
                name: 'Project 1'
            });
        });
        test('should provide project scenarios', ()=>{
            expect(_index.projectScenarios.userWithProjects.count).toBe(3);
            expect(_index.projectScenarios.userWithoutProjects.count).toBe(0);
            expect(_index.projectScenarios.userWithSingleProject.count).toBe(1);
        });
    });
    describe('API Response Fixtures', ()=>{
        test('should provide success responses', async ()=>{
            const response = _index.successResponses.projectsList;
            expect(response.status).toBe(200);
            const data = await response.json();
            expect(Array.isArray(data)).toBe(true);
        });
        test('should provide error responses', async ()=>{
            const response = _index.errorResponses.unauthorized;
            expect(response.status).toBe(401);
            const data = await response.json();
            expect(data).toHaveProperty('error');
        });
        test('should create custom responses', async ()=>{
            const customResponse = (0, _index.createSuccessResponse)({
                message: 'Custom success'
            }, 201);
            expect(customResponse.status).toBe(201);
            const data = await customResponse.json();
            expect(data).toEqual({
                message: 'Custom success'
            });
        });
    });
    describe('Mock Prisma Fixtures', ()=>{
        beforeEach(()=>{
            _index.setupPrismaMocks.reset();
        });
        test('should provide mock Prisma instance', ()=>{
            expect(_index.mockPrisma.project.findMany).toBeDefined();
            expect(_index.mockPrisma.user.findUnique).toBeDefined();
            expect(typeof _index.mockPrisma.project.findMany).toBe('function');
        });
        test('should setup database scenarios', async ()=>{
            const projects = [
                _index.testProjects.kitchenReno
            ];
            _index.givenDatabaseHas.projects(projects);
            // Test that the mocks are configured correctly
            const result = await _index.mockPrisma.project.findMany();
            const count = await _index.mockPrisma.project.count();
            expect(result).toEqual(projects);
            expect(count).toBe(1);
        });
        test('should reset mocks between tests', ()=>{
            // Setup some mock calls
            _index.givenDatabaseHas.projects([
                _index.testProjects.kitchenReno
            ]);
            // Reset should clear call history
            _index.setupPrismaMocks.reset();
            expect(_index.mockPrisma.project.findMany).not.toHaveBeenCalled();
            expect(_index.mockPrisma.project.count).not.toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,