{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/fixtures/fixtures.test.ts"],"sourcesContent":["/**\n * Test Fixtures Validation\n * Ensures our centralized fixtures work correctly\n */\n\nimport {\n  testUsers,\n  testProjects,\n  projectScenarios,\n  createTestUser,\n  createTestProject,\n  givenUserHasProjects,\n  successResponses,\n  errorResponses,\n  createSuccessResponse,\n  mockPrisma,\n  setupPrismaMocks,\n  givenDatabaseHas,\n} from './index'\n\ndescribe('Test Fixtures', () => {\n  describe('User Fixtures', () => {\n    test('should provide consistent test users', () => {\n      expect(testUsers.john).toMatchObject({\n        id: 'user-123',\n        name: 'John Homeowner',\n        email: 'john.homeowner@example.com',\n      })\n\n      expect(testUsers.jane).toMatchObject({\n        id: 'user-456', \n        name: 'Jane New User',\n        email: 'jane.newuser@example.com',\n      })\n    })\n\n    test('should create custom users with overrides', () => {\n      const customUser = createTestUser({ \n        name: 'Custom User',\n        email: 'custom@example.com'\n      })\n\n      expect(customUser).toMatchObject({\n        id: 'user-123', // Keeps base user ID\n        name: 'Custom User', // Override applied\n        email: 'custom@example.com', // Override applied\n      })\n    })\n  })\n\n  describe('Project Fixtures', () => {\n    test('should provide realistic project data', () => {\n      expect(testProjects.kitchenReno).toMatchObject({\n        id: 'project-1',\n        name: 'Kitchen Renovation',\n        userId: 'user-123',\n        contractor: 'Mike Johnson Construction',\n        architect: 'Sarah Chen Design',\n      })\n    })\n\n    test('should create projects with user scenarios', () => {\n      const scenario = givenUserHasProjects('user-123', 2)\n      \n      expect(scenario.userId).toBe('user-123')\n      expect(scenario.count).toBe(2)\n      expect(scenario.projects).toHaveLength(2)\n      expect(scenario.projects[0]).toMatchObject({\n        userId: 'user-123',\n        name: 'Project 1',\n      })\n    })\n\n    test('should provide project scenarios', () => {\n      expect(projectScenarios.userWithProjects.count).toBe(3)\n      expect(projectScenarios.userWithoutProjects.count).toBe(0)\n      expect(projectScenarios.userWithSingleProject.count).toBe(1)\n    })\n  })\n\n  describe('API Response Fixtures', () => {\n    test('should provide success responses', async () => {\n      const response = successResponses.projectsList\n      expect(response.status).toBe(200)\n      \n      const data = await response.json()\n      expect(Array.isArray(data)).toBe(true)\n    })\n\n    test('should provide error responses', async () => {\n      const response = errorResponses.unauthorized\n      expect(response.status).toBe(401)\n      \n      const data = await response.json()\n      expect(data).toHaveProperty('error')\n    })\n\n    test('should create custom responses', async () => {\n      const customResponse = createSuccessResponse({ message: 'Custom success' }, 201)\n      expect(customResponse.status).toBe(201)\n      \n      const data = await customResponse.json()\n      expect(data).toEqual({ message: 'Custom success' })\n    })\n  })\n\n  describe('Mock Prisma Fixtures', () => {\n    beforeEach(() => {\n      setupPrismaMocks.reset()\n    })\n\n    test('should provide mock Prisma instance', () => {\n      expect(mockPrisma.project.findMany).toBeDefined()\n      expect(mockPrisma.user.findUnique).toBeDefined()\n      expect(typeof mockPrisma.project.findMany).toBe('function')\n    })\n\n    test('should setup database scenarios', async () => {\n      const projects = [testProjects.kitchenReno]\n      givenDatabaseHas.projects(projects)\n\n      // Test that the mocks are configured correctly\n      const result = await mockPrisma.project.findMany()\n      const count = await mockPrisma.project.count()\n      \n      expect(result).toEqual(projects)\n      expect(count).toBe(1)\n    })\n\n    test('should reset mocks between tests', () => {\n      // Setup some mock calls\n      givenDatabaseHas.projects([testProjects.kitchenReno])\n      \n      // Reset should clear call history\n      setupPrismaMocks.reset()\n      \n      expect(mockPrisma.project.findMany).not.toHaveBeenCalled()\n      expect(mockPrisma.project.count).not.toHaveBeenCalled()\n    })\n  })\n}) "],"names":["describe","test","expect","testUsers","john","toMatchObject","id","name","email","jane","customUser","createTestUser","testProjects","kitchenReno","userId","contractor","architect","scenario","givenUserHasProjects","toBe","count","projects","toHaveLength","projectScenarios","userWithProjects","userWithoutProjects","userWithSingleProject","response","successResponses","projectsList","status","data","json","Array","isArray","errorResponses","unauthorized","toHaveProperty","customResponse","createSuccessResponse","message","toEqual","beforeEach","setupPrismaMocks","reset","mockPrisma","project","findMany","toBeDefined","user","findUnique","givenDatabaseHas","result","not","toHaveBeenCalled"],"mappings":"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"}