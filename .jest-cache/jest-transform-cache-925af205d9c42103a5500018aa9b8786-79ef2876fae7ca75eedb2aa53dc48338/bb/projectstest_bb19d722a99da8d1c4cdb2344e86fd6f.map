{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/features/api/projects.test.ts"],"sourcesContent":["/**\n * Feature: Projects API\n * All API-related tests for projects (integration, error handling, authentication)\n * Tests the actual API route with mocked dependencies\n */\n\nimport { GET } from '../../../app/api/projects/route'\n\n// Use centralized fixtures and helpers\nimport {\n  testUsers,\n  testProjects,\n  projectScenarios,\n} from '../../fixtures'\nimport { mockPrisma } from '../../helpers/mockPrisma'\n\n// Mock dependencies\njest.mock('../../../app/api/auth/[...nextauth]/route', () => ({\n  authOptions: {},\n}))\n\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}))\n\njest.mock('../../../app/lib/prisma', () => ({\n  prisma: {\n    project: {\n      count: jest.fn(),\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      deleteMany: jest.fn(),\n    },\n    user: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n  },\n}))\n\nimport { getServerSession } from 'next-auth'\nimport { prisma } from '../../../app/lib/prisma'\n\nconst mockGetServerSession = getServerSession as jest.MockedFunction<typeof getServerSession>\nconst mockPrismaProject = (prisma.project.count as jest.Mock)\n\ndescribe('Feature: Projects API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  /**\n   * BDD Tests: API Scenarios\n   */\n  describe('BDD: API User Stories', () => {\n    describe('User Story: Authenticated user retrieves projects', () => {\n      test('Given I am authenticated as user and have projects, When I make GET request, Then I receive 200 with projects', async () => {\n        // Given: I am authenticated and have projects (using centralized fixtures)\n        const authenticatedUser = { user: testUsers.john }\n        mockGetServerSession.mockResolvedValue(authenticatedUser as any)\n        \n        // Set up database with user's projects\n        const userProjects = projectScenarios.userWithProjects.projects\n        ;(prisma.project.count as jest.Mock).mockResolvedValue(userProjects.length)\n        ;(prisma.project.findMany as jest.Mock).mockResolvedValue(userProjects)\n\n        // When: I make a GET request to \"/api/projects\"\n        const response = await GET()\n        const data = await response.json()\n\n        // Then: I should receive a 200 status code with my projects\n        expect(response.status).toBe(200)\n        expect(data).toHaveLength(3)\n        \n        // And: each project should include required fields (flexible date checking)\n        data.forEach((project: any) => {\n          expect(project).toHaveProperty('id', expect.any(String))\n          expect(project).toHaveProperty('name', expect.any(String))\n          expect(project).toHaveProperty('user', expect.any(Object))\n          expect(project).toHaveProperty('emailSettings')\n          expect(project).toHaveProperty('_count.flaggedItems', expect.any(Number))\n          expect(project).toHaveProperty('_count.timelineEntries', expect.any(Number))\n          expect(project).toHaveProperty('userId', testUsers.john.id)\n        })\n\n        // And: first project should be kitchen renovation\n        expect(data[0]).toMatchObject({\n          id: 'project-1',\n          name: 'Kitchen Renovation',\n          contractor: 'Mike Johnson Construction',\n          architect: 'Sarah Chen Design',\n          userId: testUsers.john.id,\n        })\n      })\n\n      test('Given I am authenticated, When projects are fetched, Then correct database query is made', async () => {\n        // Given: I am authenticated as a user (using centralized fixtures)\n        mockGetServerSession.mockResolvedValue({ user: testUsers.john } as any)\n        ;(prisma.project.count as jest.Mock).mockResolvedValue(1)\n        ;(prisma.project.findMany as jest.Mock).mockResolvedValue([testProjects.kitchenReno])\n\n        // When: projects are fetched\n        await GET()\n\n        // Then: correct database query should be made\n        expect(prisma.project.findMany).toHaveBeenCalledWith({\n          where: { userId: testUsers.john.id },\n          include: expect.objectContaining({\n            user: true,\n            emailSettings: true,\n            _count: {\n              select: {\n                flaggedItems: {\n                  where: { status: 'PENDING' }\n                },\n                timelineEntries: true\n              }\n            }\n          }),\n          orderBy: [\n            { status: 'asc' },\n            { createdAt: 'desc' }\n          ]\n        })\n      })\n    })\n\n    describe('User Story: Unauthenticated user attempts to access projects', () => {\n      test('Given I am not authenticated, When I make GET request, Then I receive 401 with error message', async () => {\n        // Given: I am not authenticated\n        mockGetServerSession.mockResolvedValue(null)\n\n        // When: I make a GET request to \"/api/projects\"\n        const response = await GET()\n        const data = await response.json()\n\n        // Then: I should receive a 401 status code with error message\n        expect(response.status).toBe(401)\n        expect(data).toEqual({ error: 'Unauthorized' })\n      })\n    })\n\n    describe('User Story: Empty projects list', () => {\n      test('Given I am authenticated but have no projects, When I make GET request, Then I receive empty array', async () => {\n        // Given: I am authenticated but have no projects (using centralized fixtures)\n        mockGetServerSession.mockResolvedValue({ user: testUsers.jane } as any)\n        ;(prisma.project.count as jest.Mock).mockResolvedValue(0)\n        ;(prisma.project.findMany as jest.Mock).mockResolvedValue([])\n\n        // When: I make a GET request to \"/api/projects\"\n        const response = await GET()\n        const data = await response.json()\n\n        // Then: I should receive a 200 status code with empty array\n        expect(response.status).toBe(200)\n        expect(data).toEqual([])\n        expect(Array.isArray(data)).toBe(true)\n        expect(data).toHaveLength(0)\n      })\n    })\n  })\n\n  /**\n   * Integration Tests: Error Handling\n   */\n  describe('Integration: Error Handling', () => {\n    test('Given I am authenticated, When database fails, Then I receive 500 with error message', async () => {\n      // Given: I am authenticated but database encounters an error (using centralized fixtures)\n      mockGetServerSession.mockResolvedValue({ user: testUsers.john } as any)\n      ;(prisma.project.count as jest.Mock).mockRejectedValue(new Error('Database connection failed'))\n\n      // When: I make a GET request to \"/api/projects\"\n      const response = await GET()\n      const data = await response.json()\n\n      // Then: I should receive a 500 status code with appropriate error message\n      expect(response.status).toBe(500)\n      expect(data).toEqual({ error: 'Failed to fetch projects' })\n    })\n  })\n\n  /**\n   * Unit Tests: API Validation\n   */\n  describe('Unit: API Request Validation', () => {\n    test('Given valid session, When API processes request, Then session is validated correctly', async () => {\n      // Given: Valid session\n      const validSession = { user: testUsers.john }\n      mockGetServerSession.mockResolvedValue(validSession as any)\n      ;(prisma.project.count as jest.Mock).mockResolvedValue(0)\n      ;(prisma.project.findMany as jest.Mock).mockResolvedValue([])\n\n      // When: API processes request\n      await GET()\n\n      // Then: Session validation should be called\n      expect(mockGetServerSession).toHaveBeenCalledTimes(1)\n    })\n\n    test('Given database query, When projects exist, Then correct count is returned', async () => {\n      // Given: Database has projects\n      mockGetServerSession.mockResolvedValue({ user: testUsers.john } as any)\n      const projectCount = 5\n      ;(prisma.project.count as jest.Mock).mockResolvedValue(projectCount)\n      ;(prisma.project.findMany as jest.Mock).mockResolvedValue(Array(projectCount).fill(testProjects.kitchenReno))\n\n      // When: Projects are fetched\n      const response = await GET()\n      const data = await response.json()\n\n      // Then: Correct count should be returned\n      expect(data).toHaveLength(projectCount)\n      expect(prisma.project.count).toHaveBeenCalledWith({\n        where: { userId: testUsers.john.id }\n      })\n    })\n  })\n}) "],"names":["jest","mock","authOptions","getServerSession","fn","prisma","project","count","findMany","findUnique","findFirst","create","update","delete","deleteMany","user","mockGetServerSession","mockPrismaProject","describe","beforeEach","clearAllMocks","test","authenticatedUser","testUsers","john","mockResolvedValue","userProjects","projectScenarios","userWithProjects","projects","length","response","GET","data","json","expect","status","toBe","toHaveLength","forEach","toHaveProperty","any","String","Object","Number","id","toMatchObject","name","contractor","architect","userId","testProjects","kitchenReno","toHaveBeenCalledWith","where","include","objectContaining","emailSettings","_count","select","flaggedItems","timelineEntries","orderBy","createdAt","toEqual","error","jane","Array","isArray","mockRejectedValue","Error","validSession","toHaveBeenCalledTimes","projectCount","fill"],"mappings":"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"}