258c0efd9e26abcf00b97054cb77d62b
/**
 * Feature: Authentication (Logged Out Experience)
 * Based on NailedIt MVP Product Requirements
 */ "use strict";
// Mock NextAuth and navigation
jest.mock('next-auth/react', ()=>({
        signIn: jest.fn(),
        signOut: jest.fn(),
        useSession: jest.fn(),
        SessionProvider: ({ children })=>children
    }));
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn(()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn()
            })),
        useSearchParams: jest.fn(()=>new URLSearchParams()),
        usePathname: jest.fn(()=>'/')
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _react2 = require("next-auth/react");
const _navigation = require("next/navigation");
const _fixtures = require("../../fixtures");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock components - in real implementation these would be actual components
const MockSignInPage = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Sign In to NailIt"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>(0, _react2.signIn)('google'),
                children: "Continue with Google"
            })
        ]
    });
const MockWelcomePage = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "NailIt - Project Communication Monitoring"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                children: "Monitor your renovation project communications and get alerts for important changes"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("ul", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                        children: "Automatic email monitoring"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                        children: "AI-powered change detection"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                        children: "Project timeline tracking"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                children: "Get Started"
            })
        ]
    });
const MockDashboard = ({ user })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("h1", {
                children: [
                    "Welcome back, ",
                    user.name,
                    "!"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                children: "Your Projects"
            })
        ]
    });
const MockHomePage = ()=>{
    const { data: session, status } = (0, _react2.useSession)();
    if (status === 'loading') {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: "Loading..."
        });
    }
    if (session?.user) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
            user: session.user
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Track your home project progress with NailIt"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>(0, _react2.signIn)('google'),
                children: "Get started with Google"
            })
        ]
    });
};
describe('Feature: Authentication (Logged Out Experience)', ()=>{
    const mockPush = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        _navigation.useRouter.mockReturnValue({
            push: mockPush
        });
    });
    /**
   * User Story: Signup
   * "As a homeowner who does not have a Nailit account, I need to sign up for an account 
   * using Google as my identity provider so I can gain access to Nailit."
   */ describe('User Story: Signup', ()=>{
        test('Given homeowner does not have account, When they click signup CTA, Then they are prompted to login with Google', ()=>{
            // Given: homeowner does not have a Nailit account
            ;
            _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
            // When: they click the signup CTA
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSignInPage, {}));
            const signupButton = _react1.screen.getByText('Continue with Google');
            _react1.fireEvent.click(signupButton);
            // Then: they will be prompted to 'login with Google' as their identity provider
            expect(_react2.signIn).toHaveBeenCalledWith('google');
        });
    });
    /**
   * User Story: Login  
   * "As a homeowner with a Nailit account who hasn't authenticated, I need to authenticate 
   * with Google as my identity provider so that I can gain access to Nailit."
   */ describe('User Story: Login', ()=>{
        test('Given homeowner does have account but no active session, When they click login CTA, Then they login with Google', ()=>{
            // Given: homeowner does have an account but no active Nailit session
            ;
            _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
            // When: they click the login CTA
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSignInPage, {}));
            const loginButton = _react1.screen.getByText('Continue with Google');
            _react1.fireEvent.click(loginButton);
            // Then: they will need to login with Google
            expect(_react2.signIn).toHaveBeenCalledWith('google');
        });
        test('Given homeowner has active session, When they navigate to Nailit, Then they are redirected to dashboard', ()=>{
            // Given: homeowner does have an active Nailit session (using centralized fixtures)
            const mockSession = (0, _fixtures.createAuthenticatedSession)(_fixtures.testUsers.john);
            _react2.useSession.mockReturnValue(mockSession);
            // When: they navigate to Nailit
            // Then: they will be automatically redirected to their project dashboard
            expect(mockSession.status).toBe('authenticated');
            expect(mockSession.data.user).toBeDefined();
        });
    });
    /**
   * User Story: Value Prop
   * "As a potential homeowner of Nailit, I need to understand the value proposition 
   * and how it works, so I can decide whether or not I want to try it."
   */ describe('User Story: Value Proposition', ()=>{
        test('Given unfamiliar with Nailit, When I visit website, Then I understand value proposition', ()=>{
            // Given: I'm unfamiliar with Nailit
            ;
            _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
            // When: I visit the Nailit website
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWelcomePage, {}));
            // Then: I should understand the value proposition
            expect(_react1.screen.getByText(/Project Communication Monitoring/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Monitor your renovation project/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Automatic email monitoring/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/AI-powered change detection/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/Get Started/)).toBeInTheDocument();
        });
    });
});
describe('Authentication User Stories with Mock Components', ()=>{
    beforeEach(()=>{
        ;
        _navigation.useRouter.mockReturnValue({
            push: jest.fn()
        });
        jest.clearAllMocks();
    });
    describe('Value Proposition Display', ()=>{
        test('Given I am not authenticated, When I visit the homepage, Then I should see the value proposition', async ()=>{
            // Given: User is not authenticated (using centralized fixtures)
            ;
            _react2.useSession.mockReturnValue((0, _fixtures.createUnauthenticatedSession)());
            // When: I visit the homepage
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            // Then: I should see the value proposition
            expect(_react1.screen.getByText('Track your home project progress with NailIt')).toBeInTheDocument();
            expect(_react1.screen.getByText('Get started with Google')).toBeInTheDocument();
        });
    });
    describe('Authentication Status', ()=>{
        test('Given I am authenticated, When I visit the homepage, Then I should see my dashboard', async ()=>{
            // Given: User is authenticated (using centralized fixtures)
            ;
            _react2.useSession.mockReturnValue((0, _fixtures.createAuthenticatedSession)(_fixtures.testUsers.john));
            // When: I visit the homepage
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            // Then: I should see my dashboard
            expect(_react1.screen.getByText('Welcome back, John Homeowner!')).toBeInTheDocument();
            expect(_react1.screen.getByText('Your Projects')).toBeInTheDocument();
        });
        test('Given my session expires, When I try to access protected content, Then I should see the login prompt', async ()=>{
            // Given: Session has expired (loading state)
            ;
            _react2.useSession.mockReturnValue({
                data: null,
                status: 'loading'
            });
            // When: I try to access protected content  
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            // Then: I should see loading state (which will redirect to login)
            expect(_react1.screen.getByText('Loading...')).toBeInTheDocument();
        });
    });
    describe('User Profile Display', ()=>{
        test('Given I am authenticated with Google, When I view my profile area, Then I should see my Google account information', async ()=>{
            // Given: User is authenticated with Google account (using centralized fixtures)
            ;
            _react2.useSession.mockReturnValue((0, _fixtures.createAuthenticatedSession)(_fixtures.testUsers.john));
            // When: I view my profile area
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}));
            // Then: I should see my Google account information (flexible text matching)
            expect(_react1.screen.getByText(/Welcome back/)).toBeInTheDocument();
            expect(_react1.screen.getByText(/John Homeowner/)).toBeInTheDocument();
        // Note: Email display would be implemented in actual profile component
        });
    });
});

//# sourceMappingURL=data:application/json;base64,