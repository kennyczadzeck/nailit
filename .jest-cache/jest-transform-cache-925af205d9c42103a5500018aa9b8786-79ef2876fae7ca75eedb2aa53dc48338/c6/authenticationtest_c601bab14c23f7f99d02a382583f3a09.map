{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/bdd/features/authentication.test.tsx"],"sourcesContent":["/**\n * Feature: Authentication (Logged Out Experience)\n * Based on NailedIt MVP Product Requirements\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { signIn, useSession } from 'next-auth/react'\nimport { useRouter } from 'next/navigation'\n\n// Use centralized fixtures\nimport { \n  testUsers, \n  userScenarios,\n  createAuthenticatedSession,\n  createUnauthenticatedSession\n} from '../../fixtures'\n\n// Mock NextAuth and navigation\njest.mock('next-auth/react', () => ({\n  signIn: jest.fn(),\n  signOut: jest.fn(),\n  useSession: jest.fn(),\n  SessionProvider: ({ children }: { children: React.ReactNode }) => children,\n}))\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(() => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n  })),\n  useSearchParams: jest.fn(() => new URLSearchParams()),\n  usePathname: jest.fn(() => '/'),\n}))\n\n// Mock components - in real implementation these would be actual components\nconst MockSignInPage = () => (\n  <div>\n    <h1>Sign In to NailIt</h1>\n    <button onClick={() => signIn('google')}>Continue with Google</button>\n  </div>\n)\n\nconst MockWelcomePage = () => (\n  <div>\n    <h1>NailIt - Project Communication Monitoring</h1>\n    <p>Monitor your renovation project communications and get alerts for important changes</p>\n    <ul>\n      <li>Automatic email monitoring</li>\n      <li>AI-powered change detection</li>\n      <li>Project timeline tracking</li>\n    </ul>\n    <button>Get Started</button>\n  </div>\n)\n\nconst MockDashboard = ({ user }: { user: any }) => (\n  <div>\n    <h1>Welcome back, {user.name}!</h1>\n    <h2>Your Projects</h2>\n  </div>\n)\n\nconst MockHomePage = () => {\n  const { data: session, status } = useSession()\n  \n  if (status === 'loading') {\n    return <div>Loading...</div>\n  }\n  \n  if (session?.user) {\n    return <MockDashboard user={session.user} />\n  }\n  \n  return (\n    <div>\n      <h1>Track your home project progress with NailIt</h1>\n      <button onClick={() => signIn('google')}>Get started with Google</button>\n    </div>\n  )\n}\n\ndescribe('Feature: Authentication (Logged Out Experience)', () => {\n  const mockPush = jest.fn()\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    ;(useRouter as jest.Mock).mockReturnValue({ push: mockPush })\n  })\n\n  /**\n   * User Story: Signup\n   * \"As a homeowner who does not have a Nailit account, I need to sign up for an account \n   * using Google as my identity provider so I can gain access to Nailit.\"\n   */\n  describe('User Story: Signup', () => {\n    test('Given homeowner does not have account, When they click signup CTA, Then they are prompted to login with Google', () => {\n      // Given: homeowner does not have a Nailit account\n      ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n      \n      // When: they click the signup CTA\n      render(<MockSignInPage />)\n      const signupButton = screen.getByText('Continue with Google')\n      fireEvent.click(signupButton)\n      \n      // Then: they will be prompted to 'login with Google' as their identity provider\n      expect(signIn).toHaveBeenCalledWith('google')\n    })\n  })\n\n  /**\n   * User Story: Login  \n   * \"As a homeowner with a Nailit account who hasn't authenticated, I need to authenticate \n   * with Google as my identity provider so that I can gain access to Nailit.\"\n   */\n  describe('User Story: Login', () => {\n    test('Given homeowner does have account but no active session, When they click login CTA, Then they login with Google', () => {\n      // Given: homeowner does have an account but no active Nailit session\n      ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n      \n      // When: they click the login CTA\n      render(<MockSignInPage />)\n      const loginButton = screen.getByText('Continue with Google')\n      fireEvent.click(loginButton)\n      \n      // Then: they will need to login with Google\n      expect(signIn).toHaveBeenCalledWith('google')\n    })\n\n    test('Given homeowner has active session, When they navigate to Nailit, Then they are redirected to dashboard', () => {\n      // Given: homeowner does have an active Nailit session (using centralized fixtures)\n      const mockSession = createAuthenticatedSession(testUsers.john)\n      ;(useSession as jest.Mock).mockReturnValue(mockSession)\n      \n      // When: they navigate to Nailit\n      // Then: they will be automatically redirected to their project dashboard\n      expect(mockSession.status).toBe('authenticated')\n      expect(mockSession.data.user).toBeDefined()\n    })\n  })\n\n  /**\n   * User Story: Value Prop\n   * \"As a potential homeowner of Nailit, I need to understand the value proposition \n   * and how it works, so I can decide whether or not I want to try it.\"\n   */\n  describe('User Story: Value Proposition', () => {\n    test('Given unfamiliar with Nailit, When I visit website, Then I understand value proposition', () => {\n      // Given: I'm unfamiliar with Nailit\n      ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n      \n      // When: I visit the Nailit website\n      render(<MockWelcomePage />)\n      \n      // Then: I should understand the value proposition\n      expect(screen.getByText(/Project Communication Monitoring/)).toBeInTheDocument()\n      expect(screen.getByText(/Monitor your renovation project/)).toBeInTheDocument()\n      expect(screen.getByText(/Automatic email monitoring/)).toBeInTheDocument()\n      expect(screen.getByText(/AI-powered change detection/)).toBeInTheDocument()\n      expect(screen.getByText(/Get Started/)).toBeInTheDocument()\n    })\n  })\n})\n\ndescribe('Authentication User Stories with Mock Components', () => {\n  beforeEach(() => {\n    ;(useRouter as jest.Mock).mockReturnValue({ push: jest.fn() })\n    jest.clearAllMocks()\n  })\n\n  describe('Value Proposition Display', () => {\n    test('Given I am not authenticated, When I visit the homepage, Then I should see the value proposition', async () => {\n      // Given: User is not authenticated (using centralized fixtures)\n      ;(useSession as jest.Mock).mockReturnValue(createUnauthenticatedSession())\n\n      // When: I visit the homepage\n      render(<MockHomePage />)\n\n      // Then: I should see the value proposition\n      expect(screen.getByText('Track your home project progress with NailIt')).toBeInTheDocument()\n      expect(screen.getByText('Get started with Google')).toBeInTheDocument()\n    })\n  })\n\n  describe('Authentication Status', () => {\n    test('Given I am authenticated, When I visit the homepage, Then I should see my dashboard', async () => {\n      // Given: User is authenticated (using centralized fixtures)\n      ;(useSession as jest.Mock).mockReturnValue(createAuthenticatedSession(testUsers.john))\n\n      // When: I visit the homepage\n      render(<MockHomePage />)\n\n      // Then: I should see my dashboard\n      expect(screen.getByText('Welcome back, John Homeowner!')).toBeInTheDocument()\n      expect(screen.getByText('Your Projects')).toBeInTheDocument()\n    })\n\n    test('Given my session expires, When I try to access protected content, Then I should see the login prompt', async () => {\n      // Given: Session has expired (loading state)\n      ;(useSession as jest.Mock).mockReturnValue({\n        data: null,\n        status: 'loading'\n      })\n\n      // When: I try to access protected content  \n      render(<MockHomePage />)\n\n      // Then: I should see loading state (which will redirect to login)\n      expect(screen.getByText('Loading...')).toBeInTheDocument()\n    })\n  })\n\n  describe('User Profile Display', () => {\n    test('Given I am authenticated with Google, When I view my profile area, Then I should see my Google account information', async () => {\n      // Given: User is authenticated with Google account (using centralized fixtures)\n      ;(useSession as jest.Mock).mockReturnValue(createAuthenticatedSession(testUsers.john))\n\n      // When: I view my profile area\n      render(<MockHomePage />)\n\n      // Then: I should see my Google account information (flexible text matching)\n      expect(screen.getByText(/Welcome back/)).toBeInTheDocument()\n      expect(screen.getByText(/John Homeowner/)).toBeInTheDocument()\n      // Note: Email display would be implemented in actual profile component\n    })\n  })\n}) "],"names":["jest","mock","signIn","fn","signOut","useSession","SessionProvider","children","useRouter","push","replace","back","useSearchParams","URLSearchParams","usePathname","MockSignInPage","div","h1","button","onClick","MockWelcomePage","p","ul","li","MockDashboard","user","name","h2","MockHomePage","data","session","status","describe","mockPush","beforeEach","clearAllMocks","mockReturnValue","test","createUnauthenticatedSession","render","signupButton","screen","getByText","fireEvent","click","expect","toHaveBeenCalledWith","loginButton","mockSession","createAuthenticatedSession","testUsers","john","toBe","toBeDefined","toBeInTheDocument"],"mappings":"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"}