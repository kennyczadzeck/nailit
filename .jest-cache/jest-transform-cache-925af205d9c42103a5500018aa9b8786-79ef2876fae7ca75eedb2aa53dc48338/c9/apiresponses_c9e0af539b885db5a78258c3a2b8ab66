87f1d84f6fd96c853f33256ae7116587
/**
 * Centralized API Response Test Fixtures
 * Used for mocking HTTP responses in tests
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createErrorResponse () {
        return createErrorResponse;
    },
    get createMockFetch () {
        return createMockFetch;
    },
    get createSuccessResponse () {
        return createSuccessResponse;
    },
    get errorResponses () {
        return errorResponses;
    },
    get formResponses () {
        return formResponses;
    },
    get givenApiIsUnavailable () {
        return givenApiIsUnavailable;
    },
    get givenApiReturnsError () {
        return givenApiReturnsError;
    },
    get givenApiReturnsNoProjects () {
        return givenApiReturnsNoProjects;
    },
    get givenApiReturnsProjects () {
        return givenApiReturnsProjects;
    },
    get successResponses () {
        return successResponses;
    }
});
const _projects = require("./projects");
const successResponses = {
    // GET /api/projects responses
    projectsList: {
        status: 200,
        json: ()=>Promise.resolve(_projects.projectScenarios.userWithProjects.projects)
    },
    emptyProjectsList: {
        status: 200,
        json: ()=>Promise.resolve([])
    },
    singleProject: {
        status: 200,
        json: ()=>Promise.resolve(_projects.testProjects.kitchenReno)
    },
    // POST /api/projects responses  
    projectCreated: {
        status: 201,
        json: ()=>Promise.resolve({
                id: 'new-project-123',
                name: 'New Test Project',
                userId: 'user-123',
                contractor: 'Test Contractor',
                createdAt: new Date().toISOString()
            })
    },
    // DELETE /api/projects/[id] responses
    projectDeleted: {
        status: 200,
        json: ()=>Promise.resolve({
                success: true
            })
    },
    // Generic success
    success: {
        status: 200,
        json: ()=>Promise.resolve({
                success: true
            })
    }
};
const errorResponses = {
    // Authentication errors
    unauthorized: {
        status: 401,
        json: ()=>Promise.resolve({
                error: 'Unauthorized'
            })
    },
    // Authorization errors
    forbidden: {
        status: 403,
        json: ()=>Promise.resolve({
                error: 'Forbidden'
            })
    },
    // Not found errors
    notFound: {
        status: 404,
        json: ()=>Promise.resolve({
                error: 'Not found'
            })
    },
    // Validation errors
    badRequest: {
        status: 400,
        json: ()=>Promise.resolve({
                error: 'Validation failed',
                details: [
                    'Name is required'
                ]
            })
    },
    // Server errors
    internalError: {
        status: 500,
        json: ()=>Promise.resolve({
                error: 'Internal server error'
            })
    },
    // Database errors
    databaseError: {
        status: 500,
        json: ()=>Promise.resolve({
                error: 'Database connection failed'
            })
    },
    // Network errors
    networkError: {
        status: 0,
        json: ()=>Promise.reject(new Error('Network error'))
    }
};
const formResponses = {
    projectCreation: {
        success: {
            status: 201,
            json: ()=>Promise.resolve({
                    id: 'project-form-123',
                    name: 'Kitchen Renovation',
                    contractor: 'Mike Johnson Construction',
                    architect: 'Sarah Chen Design',
                    projectManager: 'Tom Wilson',
                    redirectUrl: '/projects/project-form-123'
                })
        },
        validationError: {
            status: 400,
            json: ()=>Promise.resolve({
                    error: 'Validation failed',
                    fieldErrors: {
                        name: [
                            'Project name is required'
                        ],
                        contractor: [
                            'Contractor is required'
                        ]
                    }
                })
        },
        duplicateName: {
            status: 409,
            json: ()=>Promise.resolve({
                    error: 'Project name already exists'
                })
        }
    }
};
const createSuccessResponse = (data, status = 200)=>({
        status,
        json: ()=>Promise.resolve(data)
    });
const createErrorResponse = (error, status = 500)=>({
        status,
        json: ()=>Promise.resolve({
                error
            })
    });
const createMockFetch = (response)=>{
    return jest.fn().mockResolvedValue(response);
};
const givenApiReturnsProjects = (projects = _projects.projectScenarios.userWithProjects.projects)=>{
    return createSuccessResponse(projects);
};
const givenApiReturnsNoProjects = ()=>{
    return createSuccessResponse([]);
};
const givenApiReturnsError = (status = 500, error = 'Internal server error')=>{
    return createErrorResponse(error, status);
};
const givenApiIsUnavailable = ()=>{
    return errorResponses.networkError;
};

//# sourceMappingURL=data:application/json;base64,