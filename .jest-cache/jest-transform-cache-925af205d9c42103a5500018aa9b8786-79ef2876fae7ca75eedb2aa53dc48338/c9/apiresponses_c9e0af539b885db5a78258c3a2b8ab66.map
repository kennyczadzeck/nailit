{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/fixtures/api-responses.ts"],"sourcesContent":["/**\n * Centralized API Response Test Fixtures\n * Used for mocking HTTP responses in tests\n */\n\nimport { testProjects, projectScenarios } from './projects'\nimport { testUsers } from './users'\n\n// Success responses\nexport const successResponses = {\n  // GET /api/projects responses\n  projectsList: {\n    status: 200,\n    json: () => Promise.resolve(projectScenarios.userWithProjects.projects),\n  },\n\n  emptyProjectsList: {\n    status: 200,\n    json: () => Promise.resolve([]),\n  },\n\n  singleProject: {\n    status: 200,\n    json: () => Promise.resolve(testProjects.kitchenReno),\n  },\n\n  // POST /api/projects responses  \n  projectCreated: {\n    status: 201,\n    json: () => Promise.resolve({\n      id: 'new-project-123',\n      name: 'New Test Project',\n      userId: 'user-123',\n      contractor: 'Test Contractor',\n      createdAt: new Date().toISOString(),\n    }),\n  },\n\n  // DELETE /api/projects/[id] responses\n  projectDeleted: {\n    status: 200,\n    json: () => Promise.resolve({ success: true }),\n  },\n\n  // Generic success\n  success: {\n    status: 200,\n    json: () => Promise.resolve({ success: true }),\n  },\n} as const\n\n// Error responses\nexport const errorResponses = {\n  // Authentication errors\n  unauthorized: {\n    status: 401,\n    json: () => Promise.resolve({ error: 'Unauthorized' }),\n  },\n\n  // Authorization errors\n  forbidden: {\n    status: 403,\n    json: () => Promise.resolve({ error: 'Forbidden' }),\n  },\n\n  // Not found errors\n  notFound: {\n    status: 404,\n    json: () => Promise.resolve({ error: 'Not found' }),\n  },\n\n  // Validation errors\n  badRequest: {\n    status: 400,\n    json: () => Promise.resolve({ \n      error: 'Validation failed',\n      details: ['Name is required']\n    }),\n  },\n\n  // Server errors\n  internalError: {\n    status: 500,\n    json: () => Promise.resolve({ error: 'Internal server error' }),\n  },\n\n  // Database errors\n  databaseError: {\n    status: 500,\n    json: () => Promise.resolve({ error: 'Database connection failed' }),\n  },\n\n  // Network errors\n  networkError: {\n    status: 0,\n    json: () => Promise.reject(new Error('Network error')),\n  },\n} as const\n\n// Form submission responses\nexport const formResponses = {\n  projectCreation: {\n    success: {\n      status: 201,\n      json: () => Promise.resolve({\n        id: 'project-form-123',\n        name: 'Kitchen Renovation',\n        contractor: 'Mike Johnson Construction',\n        architect: 'Sarah Chen Design',\n        projectManager: 'Tom Wilson',\n        redirectUrl: '/projects/project-form-123',\n      }),\n    },\n\n    validationError: {\n      status: 400,\n      json: () => Promise.resolve({\n        error: 'Validation failed',\n        fieldErrors: {\n          name: ['Project name is required'],\n          contractor: ['Contractor is required'],\n        },\n      }),\n    },\n\n    duplicateName: {\n      status: 409,\n      json: () => Promise.resolve({\n        error: 'Project name already exists',\n      }),\n    },\n  },\n} as const\n\n// Utility functions for creating custom responses\nexport const createSuccessResponse = <T>(data: T, status: number = 200) => ({\n  status,\n  json: () => Promise.resolve(data),\n})\n\nexport const createErrorResponse = (error: string, status: number = 500) => ({\n  status,\n  json: () => Promise.resolve({ error }),\n})\n\n// Mock fetch implementation\nexport const createMockFetch = (response: any) => {\n  return jest.fn().mockResolvedValue(response)\n}\n\n// BDD response helpers\nexport const givenApiReturnsProjects = (projects: any[] = projectScenarios.userWithProjects.projects) => {\n  return createSuccessResponse(projects)\n}\n\nexport const givenApiReturnsNoProjects = () => {\n  return createSuccessResponse([])\n}\n\nexport const givenApiReturnsError = (status: number = 500, error: string = 'Internal server error') => {\n  return createErrorResponse(error, status)\n}\n\nexport const givenApiIsUnavailable = () => {\n  return errorResponses.networkError\n} "],"names":["createErrorResponse","createMockFetch","createSuccessResponse","errorResponses","formResponses","givenApiIsUnavailable","givenApiReturnsError","givenApiReturnsNoProjects","givenApiReturnsProjects","successResponses","projectsList","status","json","Promise","resolve","projectScenarios","userWithProjects","projects","emptyProjectsList","singleProject","testProjects","kitchenReno","projectCreated","id","name","userId","contractor","createdAt","Date","toISOString","projectDeleted","success","unauthorized","error","forbidden","notFound","badRequest","details","internalError","databaseError","networkError","reject","Error","projectCreation","architect","projectManager","redirectUrl","validationError","fieldErrors","duplicateName","data","response","jest","fn","mockResolvedValue"],"mappings":"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"}