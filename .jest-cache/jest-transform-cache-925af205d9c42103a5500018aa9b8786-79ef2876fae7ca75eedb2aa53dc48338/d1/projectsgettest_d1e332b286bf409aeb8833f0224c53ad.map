{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/integration/api/projects-get.test.ts"],"sourcesContent":["/**\n * Integration Tests for Projects API (GET)\n * Tests the actual API route with mocked dependencies\n */\n\nimport { GET } from '../../../app/api/projects/route'\n\n// Use centralized fixtures\nimport {\n  testUsers,\n  testProjects,\n  projectScenarios,\n} from '../../fixtures'\n\n// Mock dependencies\njest.mock('../../../app/api/auth/[...nextauth]/route', () => ({\n  authOptions: {},\n}))\n\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}))\n\njest.mock('../../../app/lib/prisma', () => ({\n  prisma: {\n    project: {\n      count: jest.fn(),\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      deleteMany: jest.fn(),\n    },\n    user: {\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n  },\n}))\n\nimport { getServerSession } from 'next-auth'\nimport { prisma } from '../../../app/lib/prisma'\n\nconst mockGetServerSession = getServerSession as jest.MockedFunction<typeof getServerSession>\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>\n\ndescribe('Projects API Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  /**\n   * Scenario: Authenticated user retrieves projects\n   */\n  describe('Scenario: Authenticated user retrieves projects', () => {\n    test('Given I am authenticated as user and have projects, When I make GET request, Then I receive 200 with projects', async () => {\n      // Given: I am authenticated and have projects (using centralized fixtures)\n      const authenticatedUser = { user: testUsers.john }\n      mockGetServerSession.mockResolvedValue(authenticatedUser as any)\n      \n      // Set up database with user's projects\n      const userProjects = projectScenarios.userWithProjects.projects\n      mockPrisma.project.count.mockResolvedValue(userProjects.length)\n      mockPrisma.project.findMany.mockResolvedValue(userProjects)\n\n      // When: I make a GET request to \"/api/projects\"\n      const response = await GET()\n      const data = await response.json()\n\n      // Then: I should receive a 200 status code with my projects\n      expect(response.status).toBe(200)\n      expect(data).toHaveLength(3)\n      \n      // And: each project should include required fields (flexible date checking)\n      data.forEach((project: any) => {\n        expect(project).toHaveProperty('id', expect.any(String))\n        expect(project).toHaveProperty('name', expect.any(String))\n        expect(project).toHaveProperty('user', expect.any(Object))\n        expect(project).toHaveProperty('emailSettings')\n        expect(project).toHaveProperty('_count.flaggedItems', expect.any(Number))\n        expect(project).toHaveProperty('_count.timelineEntries', expect.any(Number))\n        expect(project).toHaveProperty('userId', testUsers.john.id)\n      })\n\n      // And: first project should be kitchen renovation\n      expect(data[0]).toMatchObject({\n        id: 'project-1',\n        name: 'Kitchen Renovation',\n        contractor: 'Mike Johnson Construction',\n        architect: 'Sarah Chen Design',\n        userId: testUsers.john.id,\n      })\n    })\n\n    test('Given I am authenticated, When projects are fetched, Then correct database query is made', async () => {\n      // Given: I am authenticated as a user (using centralized fixtures)\n      mockGetServerSession.mockResolvedValue({ user: testUsers.john } as any)\n      mockPrisma.project.count.mockResolvedValue(1)\n      mockPrisma.project.findMany.mockResolvedValue([testProjects.kitchenReno])\n\n      // When: projects are fetched\n      await GET()\n\n      // Then: correct database query should be made\n      expect(mockPrisma.project.findMany).toHaveBeenCalledWith({\n        where: { userId: testUsers.john.id },\n        include: expect.objectContaining({\n          user: true,\n          emailSettings: true,\n          _count: {\n            select: {\n              flaggedItems: {\n                where: { status: 'PENDING' }\n              },\n              timelineEntries: true\n            }\n          }\n        }),\n        orderBy: [\n          { status: 'asc' },\n          { createdAt: 'desc' }\n        ]\n      })\n    })\n  })\n\n  /**\n   * Scenario: Unauthenticated user attempts to access projects\n   */\n  describe('Scenario: Unauthenticated user attempts to access projects', () => {\n    test('Given I am not authenticated, When I make GET request, Then I receive 401 with error message', async () => {\n      // Given: I am not authenticated\n      mockGetServerSession.mockResolvedValue(null)\n\n      // When: I make a GET request to \"/api/projects\"\n      const response = await GET()\n      const data = await response.json()\n\n      // Then: I should receive a 401 status code with error message\n      expect(response.status).toBe(401)\n      expect(data).toEqual({ error: 'Unauthorized' })\n    })\n  })\n\n  /**\n   * Scenario: Empty projects list\n   */\n  describe('Scenario: Empty projects list', () => {\n    test('Given I am authenticated but have no projects, When I make GET request, Then I receive empty array', async () => {\n      // Given: I am authenticated but have no projects (using centralized fixtures)\n      mockGetServerSession.mockResolvedValue({ user: testUsers.jane } as any)\n      mockPrisma.project.count.mockResolvedValue(0)\n      mockPrisma.project.findMany.mockResolvedValue([])\n\n      // When: I make a GET request to \"/api/projects\"\n      const response = await GET()\n      const data = await response.json()\n\n      // Then: I should receive a 200 status code with empty array\n      expect(response.status).toBe(200)\n      expect(data).toEqual([])\n      expect(Array.isArray(data)).toBe(true)\n      expect(data).toHaveLength(0)\n    })\n  })\n\n  /**\n   * Scenario: Database error handling\n   */\n  describe('Scenario: Database error handling', () => {\n    test('Given I am authenticated, When database fails, Then I receive 500 with error message', async () => {\n      // Given: I am authenticated but database encounters an error (using centralized fixtures)\n      mockGetServerSession.mockResolvedValue({ user: testUsers.john } as any)\n      mockPrisma.project.count.mockRejectedValue(new Error('Database connection failed'))\n\n      // When: I make a GET request to \"/api/projects\"\n      const response = await GET()\n      const data = await response.json()\n\n      // Then: I should receive a 500 status code with appropriate error message\n      expect(response.status).toBe(500)\n      expect(data).toEqual({ error: 'Failed to fetch projects' })\n    })\n  })\n}) "],"names":["jest","mock","authOptions","getServerSession","fn","prisma","project","count","findMany","findUnique","findFirst","create","update","delete","deleteMany","user","mockGetServerSession","mockPrisma","describe","beforeEach","clearAllMocks","test","authenticatedUser","testUsers","john","mockResolvedValue","userProjects","projectScenarios","userWithProjects","projects","length","response","GET","data","json","expect","status","toBe","toHaveLength","forEach","toHaveProperty","any","String","Object","Number","id","toMatchObject","name","contractor","architect","userId","testProjects","kitchenReno","toHaveBeenCalledWith","where","include","objectContaining","emailSettings","_count","select","flaggedItems","timelineEntries","orderBy","createdAt","toEqual","error","jane","Array","isArray","mockRejectedValue","Error"],"mappings":"AAAA;;;CAGC;AAWD,oBAAoB;AACpBA,KAAKC,IAAI,CAAC,6CAA6C,IAAO,CAAA;QAC5DC,aAAa,CAAC;IAChB,CAAA;AAEAF,KAAKC,IAAI,CAAC,aAAa,IAAO,CAAA;QAC5BE,kBAAkBH,KAAKI,EAAE;IAC3B,CAAA;AAEAJ,KAAKC,IAAI,CAAC,2BAA2B,IAAO,CAAA;QAC1CI,QAAQ;YACNC,SAAS;gBACPC,OAAOP,KAAKI,EAAE;gBACdI,UAAUR,KAAKI,EAAE;gBACjBK,YAAYT,KAAKI,EAAE;gBACnBM,WAAWV,KAAKI,EAAE;gBAClBO,QAAQX,KAAKI,EAAE;gBACfQ,QAAQZ,KAAKI,EAAE;gBACfS,QAAQb,KAAKI,EAAE;gBACfU,YAAYd,KAAKI,EAAE;YACrB;YACAW,MAAM;gBACJN,YAAYT,KAAKI,EAAE;gBACnBM,WAAWV,KAAKI,EAAE;gBAClBO,QAAQX,KAAKI,EAAE;gBACfQ,QAAQZ,KAAKI,EAAE;gBACfS,QAAQb,KAAKI,EAAE;YACjB;QACF;IACF,CAAA;;;;uBAtCoB;0BAOb;0BAiC0B;wBACV;AAEvB,MAAMY,uBAAuBb,0BAAgB;AAC7C,MAAMc,aAAaZ,cAAM;AAEzBa,SAAS,kCAAkC;IACzCC,WAAW;QACTnB,KAAKoB,aAAa;IACpB;IAEA;;GAEC,GACDF,SAAS,mDAAmD;QAC1DG,KAAK,iHAAiH;YACpH,2EAA2E;YAC3E,MAAMC,oBAAoB;gBAAEP,MAAMQ,mBAAS,CAACC,IAAI;YAAC;YACjDR,qBAAqBS,iBAAiB,CAACH;YAEvC,uCAAuC;YACvC,MAAMI,eAAeC,0BAAgB,CAACC,gBAAgB,CAACC,QAAQ;YAC/DZ,WAAWX,OAAO,CAACC,KAAK,CAACkB,iBAAiB,CAACC,aAAaI,MAAM;YAC9Db,WAAWX,OAAO,CAACE,QAAQ,CAACiB,iBAAiB,CAACC;YAE9C,gDAAgD;YAChD,MAAMK,WAAW,MAAMC,IAAAA,UAAG;YAC1B,MAAMC,OAAO,MAAMF,SAASG,IAAI;YAEhC,4DAA4D;YAC5DC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOF,MAAMK,YAAY,CAAC;YAE1B,4EAA4E;YAC5EL,KAAKM,OAAO,CAAC,CAACjC;gBACZ6B,OAAO7B,SAASkC,cAAc,CAAC,MAAML,OAAOM,GAAG,CAACC;gBAChDP,OAAO7B,SAASkC,cAAc,CAAC,QAAQL,OAAOM,GAAG,CAACC;gBAClDP,OAAO7B,SAASkC,cAAc,CAAC,QAAQL,OAAOM,GAAG,CAACE;gBAClDR,OAAO7B,SAASkC,cAAc,CAAC;gBAC/BL,OAAO7B,SAASkC,cAAc,CAAC,uBAAuBL,OAAOM,GAAG,CAACG;gBACjET,OAAO7B,SAASkC,cAAc,CAAC,0BAA0BL,OAAOM,GAAG,CAACG;gBACpET,OAAO7B,SAASkC,cAAc,CAAC,UAAUjB,mBAAS,CAACC,IAAI,CAACqB,EAAE;YAC5D;YAEA,kDAAkD;YAClDV,OAAOF,IAAI,CAAC,EAAE,EAAEa,aAAa,CAAC;gBAC5BD,IAAI;gBACJE,MAAM;gBACNC,YAAY;gBACZC,WAAW;gBACXC,QAAQ3B,mBAAS,CAACC,IAAI,CAACqB,EAAE;YAC3B;QACF;QAEAxB,KAAK,4FAA4F;YAC/F,mEAAmE;YACnEL,qBAAqBS,iBAAiB,CAAC;gBAAEV,MAAMQ,mBAAS,CAACC,IAAI;YAAC;YAC9DP,WAAWX,OAAO,CAACC,KAAK,CAACkB,iBAAiB,CAAC;YAC3CR,WAAWX,OAAO,CAACE,QAAQ,CAACiB,iBAAiB,CAAC;gBAAC0B,sBAAY,CAACC,WAAW;aAAC;YAExE,6BAA6B;YAC7B,MAAMpB,IAAAA,UAAG;YAET,8CAA8C;YAC9CG,OAAOlB,WAAWX,OAAO,CAACE,QAAQ,EAAE6C,oBAAoB,CAAC;gBACvDC,OAAO;oBAAEJ,QAAQ3B,mBAAS,CAACC,IAAI,CAACqB,EAAE;gBAAC;gBACnCU,SAASpB,OAAOqB,gBAAgB,CAAC;oBAC/BzC,MAAM;oBACN0C,eAAe;oBACfC,QAAQ;wBACNC,QAAQ;4BACNC,cAAc;gCACZN,OAAO;oCAAElB,QAAQ;gCAAU;4BAC7B;4BACAyB,iBAAiB;wBACnB;oBACF;gBACF;gBACAC,SAAS;oBACP;wBAAE1B,QAAQ;oBAAM;oBAChB;wBAAE2B,WAAW;oBAAO;iBACrB;YACH;QACF;IACF;IAEA;;GAEC,GACD7C,SAAS,8DAA8D;QACrEG,KAAK,gGAAgG;YACnG,gCAAgC;YAChCL,qBAAqBS,iBAAiB,CAAC;YAEvC,gDAAgD;YAChD,MAAMM,WAAW,MAAMC,IAAAA,UAAG;YAC1B,MAAMC,OAAO,MAAMF,SAASG,IAAI;YAEhC,8DAA8D;YAC9DC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOF,MAAM+B,OAAO,CAAC;gBAAEC,OAAO;YAAe;QAC/C;IACF;IAEA;;GAEC,GACD/C,SAAS,iCAAiC;QACxCG,KAAK,sGAAsG;YACzG,8EAA8E;YAC9EL,qBAAqBS,iBAAiB,CAAC;gBAAEV,MAAMQ,mBAAS,CAAC2C,IAAI;YAAC;YAC9DjD,WAAWX,OAAO,CAACC,KAAK,CAACkB,iBAAiB,CAAC;YAC3CR,WAAWX,OAAO,CAACE,QAAQ,CAACiB,iBAAiB,CAAC,EAAE;YAEhD,gDAAgD;YAChD,MAAMM,WAAW,MAAMC,IAAAA,UAAG;YAC1B,MAAMC,OAAO,MAAMF,SAASG,IAAI;YAEhC,4DAA4D;YAC5DC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOF,MAAM+B,OAAO,CAAC,EAAE;YACvB7B,OAAOgC,MAAMC,OAAO,CAACnC,OAAOI,IAAI,CAAC;YACjCF,OAAOF,MAAMK,YAAY,CAAC;QAC5B;IACF;IAEA;;GAEC,GACDpB,SAAS,qCAAqC;QAC5CG,KAAK,wFAAwF;YAC3F,0FAA0F;YAC1FL,qBAAqBS,iBAAiB,CAAC;gBAAEV,MAAMQ,mBAAS,CAACC,IAAI;YAAC;YAC9DP,WAAWX,OAAO,CAACC,KAAK,CAAC8D,iBAAiB,CAAC,IAAIC,MAAM;YAErD,gDAAgD;YAChD,MAAMvC,WAAW,MAAMC,IAAAA,UAAG;YAC1B,MAAMC,OAAO,MAAMF,SAASG,IAAI;YAEhC,0EAA0E;YAC1EC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOF,MAAM+B,OAAO,CAAC;gBAAEC,OAAO;YAA2B;QAC3D;IACF;AACF"}