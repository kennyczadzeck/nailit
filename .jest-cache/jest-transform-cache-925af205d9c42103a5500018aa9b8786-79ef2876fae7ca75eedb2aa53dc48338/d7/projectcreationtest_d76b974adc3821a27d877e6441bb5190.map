{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/bdd/features/project-creation.test.tsx"],"sourcesContent":["/**\n * Feature: Project Creation \n * Based on NailedIt MVP Product Requirements - Create New Project\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { useSession } from 'next-auth/react'\nimport { useRouter } from 'next/navigation'\n\n// Use centralized fixtures\nimport {\n  testUsers,\n  testProjects,\n  createAuthenticatedSession,\n  createTestProject,\n  formResponses,\n  successResponses,\n  errorResponses,\n} from '../../fixtures'\n\n// Mock NextAuth and Router\njest.mock('next-auth/react', () => ({\n  useSession: jest.fn(),\n}))\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}))\n\n// Mock fetch globally\nglobal.fetch = jest.fn()\n\ndescribe('Feature: Create New Project', () => {\n  const mockPush = jest.fn()\n  const mockUseSession = useSession as jest.MockedFunction<typeof useSession>\n  const mockUseRouter = useRouter as jest.MockedFunction<typeof useRouter>\n  const mockFetch = fetch as jest.MockedFunction<typeof fetch>\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockUseRouter.mockReturnValue({ push: mockPush } as any)\n    mockUseSession.mockReturnValue({\n      data: { user: testUsers.john },\n      status: 'authenticated',\n      update: jest.fn()\n    } as any)\n  })\n\n  /**\n   * User Story: US-04 - Project Name\n   * \"As a homeowner who wants to initiate a new project in Nailit, \n   * I need to provide a project name that reflects the project's scope, \n   * so I can differentiate it from other projects.\"\n   */\n  describe('User Story: Project Name', () => {\n    test('Given I want to create new project, When I enter project name that reflects scope, Then project is created with that name', async () => {\n      // Given: I want to create a new project\n      const MockProjectForm = () => {\n        const [name, setName] = React.useState('')\n        const [isSubmitting, setIsSubmitting] = React.useState(false)\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault()\n          setIsSubmitting(true)\n          \n          try {\n            const response = await fetch('/api/projects', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ name, contractor: 'Test Contractor' }),\n            })\n            \n            if (response.ok) {\n              // Navigate to project detail page\n              mockPush('/projects/new-project-123')\n            }\n          } finally {\n            setIsSubmitting(false)\n          }\n        }\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter project name that reflects the project's scope\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n            <button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? 'Creating...' : 'Create Project'}\n            </button>\n          </form>\n        )\n      }\n\n      // Mock successful API response using centralized fixtures\n      mockFetch.mockResolvedValue(new Response(JSON.stringify({\n        id: 'new-project-123',\n        name: testProjects.kitchenReno.name,\n        contractor: 'Test Contractor',\n        redirectUrl: '/projects/new-project-123'\n      }), { status: 201 }))\n\n      render(<MockProjectForm />)\n\n      // When: I enter a project name that reflects the project's scope\n      const nameInput = screen.getByPlaceholderText(/Enter project name/)\n      fireEvent.change(nameInput, { target: { value: testProjects.kitchenReno.name } })\n\n      const submitButton = screen.getByRole('button', { name: /Create Project/ })\n      fireEvent.click(submitButton)\n\n      // Then: the project should be created with that name\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            name: testProjects.kitchenReno.name, \n            contractor: 'Test Contractor' \n          }),\n        })\n      })\n    })\n  })\n\n  /**\n   * User Story: US-05 - Add General Contractor\n   * \"As a homeowner who wants to initiate a new project in Nailit, \n   * I need to add a general contractor, so I know who is responsible for the overall project.\"\n   */\n  describe('User Story: Add General Contractor', () => {\n    test('Given I am creating project, When I add general contractor, Then contractor is associated with project', async () => {\n      // Given: I am creating a project\n      const MockContractorForm = () => {\n        const [contractor, setContractor] = React.useState('')\n        const [isSubmitting, setIsSubmitting] = React.useState(false)\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault()\n          setIsSubmitting(true)\n          \n          const response = await fetch('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.kitchenReno.name,\n              contractor \n            }),\n          })\n          \n          setIsSubmitting(false)\n        }\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"General contractor name (required)\"\n              value={contractor}\n              onChange={(e) => setContractor(e.target.value)}\n              required\n            />\n            <button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? 'Adding...' : 'Add Contractor'}\n            </button>\n          </form>\n        )\n      }\n\n      mockFetch.mockResolvedValue(new Response(JSON.stringify({\n        id: 'new-project-123',\n        name: testProjects.kitchenReno.name,\n        contractor: testProjects.kitchenReno.contractor\n      }), { status: 201 }))\n\n      render(<MockContractorForm />)\n\n      // When: I add a general contractor\n      const contractorInput = screen.getByPlaceholderText(/General contractor name/)\n      fireEvent.change(contractorInput, { target: { value: testProjects.kitchenReno.contractor } })\n\n      const submitButton = screen.getByRole('button', { name: /Add Contractor/ })\n      fireEvent.click(submitButton)\n\n      // Then: the contractor should be associated with the project\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            name: testProjects.kitchenReno.name,\n            contractor: testProjects.kitchenReno.contractor\n          }),\n        })\n      })\n    })\n  })\n\n  /**\n   * User Story: US-06 - Add Architect/Designer (Optional)\n   * \"As a homeowner who wants to initiate a new project in Nailit,\n   * I want to optionally add an architect or designer, \n   * so they can be included in the project communications.\"\n   */\n  describe('User Story: Add Architect/Designer (Optional)', () => {\n    test('Given I am creating project, When I optionally add architect, Then architect is included in project', async () => {\n      // Given: I am creating a project\n      const MockArchitectForm = () => {\n        const [architect, setArchitect] = React.useState('')\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault()\n          \n          await fetch('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.kitchenReno.name,\n              contractor: testProjects.kitchenReno.contractor,\n              architect: architect || undefined\n            }),\n          })\n        }\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Architect/Designer (optional)\"\n              value={architect}\n              onChange={(e) => setArchitect(e.target.value)}\n            />\n            <button type=\"submit\">Add to Project</button>\n          </form>\n        )\n      }\n\n      mockFetch.mockResolvedValue(new Response(JSON.stringify({\n        id: 'new-project-123',\n        name: testProjects.kitchenReno.name,\n        contractor: testProjects.kitchenReno.contractor,\n        architect: testProjects.kitchenReno.architect\n      }), { status: 201 }))\n\n      render(<MockArchitectForm />)\n\n      // When: I optionally add an architect\n      const architectInput = screen.getByPlaceholderText(/Architect\\/Designer/)\n      fireEvent.change(architectInput, { target: { value: testProjects.kitchenReno.architect } })\n\n      const submitButton = screen.getByRole('button', { name: /Add to Project/ })\n      fireEvent.click(submitButton)\n\n      // Then: the architect should be included in the project\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            name: testProjects.kitchenReno.name,\n            contractor: testProjects.kitchenReno.contractor,\n            architect: testProjects.kitchenReno.architect\n          }),\n        })\n      })\n    })\n\n    test('Given I am creating project, When I skip adding architect, Then project is created without architect', async () => {\n      // Given: I am creating a project and skip architect\n      const MockSkipArchitectForm = () => {\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault()\n          \n          await fetch('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.kitchenReno.name,\n              contractor: testProjects.kitchenReno.contractor,\n              architect: undefined\n            }),\n          })\n        }\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input type=\"text\" placeholder=\"Architect/Designer (optional)\" />\n            <button type=\"submit\">Skip Architect</button>\n          </form>\n        )\n      }\n\n      mockFetch.mockResolvedValue(new Response(JSON.stringify({\n        id: 'new-project-123',\n        name: testProjects.kitchenReno.name,\n        contractor: testProjects.kitchenReno.contractor\n      }), { status: 201 }))\n\n      render(<MockSkipArchitectForm />)\n\n      // When: I skip adding an architect\n      const submitButton = screen.getByRole('button', { name: /Skip Architect/ })\n      fireEvent.click(submitButton)\n\n      // Then: the project should be created without an architect\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            name: testProjects.kitchenReno.name,\n            contractor: testProjects.kitchenReno.contractor,\n            architect: undefined\n          }),\n        })\n      })\n    })\n  })\n\n  /**\n   * User Story: US-07 - Add Project Manager (Optional)\n   * \"As a homeowner who wants to initiate a new project in Nailit,\n   * I want to optionally add a project manager,\n   * so they can be included in the project communications.\"\n   */\n  describe('User Story: Add Project Manager (Optional)', () => {\n    test('Given I am creating project, When I optionally add project manager, Then PM is included in project', async () => {\n      // Given: I am creating a project  \n      const MockPMForm = () => {\n        const [projectManager, setProjectManager] = React.useState('')\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault()\n          \n          await fetch('/api/projects', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              name: testProjects.deckAddition.name,\n              contractor: testProjects.deckAddition.contractor,\n              projectManager: projectManager || undefined\n            }),\n          })\n        }\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Project Manager (optional)\"\n              value={projectManager}\n              onChange={(e) => setProjectManager(e.target.value)}\n            />\n            <button type=\"submit\">Add PM to Project</button>\n          </form>\n        )\n      }\n\n      mockFetch.mockResolvedValue(new Response(JSON.stringify({\n        id: 'new-project-123',\n        name: testProjects.deckAddition.name,\n        contractor: testProjects.deckAddition.contractor,\n        projectManager: testProjects.deckAddition.projectManager\n      }), { status: 201 }))\n\n      render(<MockPMForm />)\n\n      // When: I optionally add a project manager\n      const pmInput = screen.getByPlaceholderText(/Project Manager/)\n      fireEvent.change(pmInput, { target: { value: testProjects.deckAddition.projectManager } })\n\n      const submitButton = screen.getByRole('button', { name: /Add PM to Project/ })\n      fireEvent.click(submitButton)\n\n      // Then: the project manager should be included in the project\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/projects', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ \n            name: testProjects.deckAddition.name,\n            contractor: testProjects.deckAddition.contractor,\n            projectManager: testProjects.deckAddition.projectManager\n          }),\n        })\n      })\n    })\n  })\n\n  /**\n   * Error Handling and Validation\n   */\n  describe('Error Handling', () => {\n    test('Given invalid project data, When I submit form, Then validation errors are shown', async () => {\n      // Given: I have a form with validation\n      const MockValidationForm = () => {\n        const [error, setError] = React.useState('')\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault()\n          \n          try {\n            const response = await fetch('/api/projects', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ name: '', contractor: '' }), // Invalid data\n            })\n\n            if (!response.ok) {\n              const errorData = await response.json()\n              setError(errorData.error)\n            }\n          } catch (err) {\n            setError('Network error')\n          }\n        }\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <button type=\"submit\">Submit Invalid Data</button>\n            {error && <div role=\"alert\">{error}</div>}\n          </form>\n        )\n      }\n\n      // Mock validation error response\n      mockFetch.mockResolvedValue(new Response(JSON.stringify({\n        error: 'Validation failed',\n        fieldErrors: {\n          name: ['Project name is required'],\n          contractor: ['Contractor is required'],\n        }\n      }), { status: 400 }))\n\n      render(<MockValidationForm />)\n\n      // When: I submit invalid data\n      const submitButton = screen.getByRole('button', { name: /Submit Invalid Data/ })\n      fireEvent.click(submitButton)\n\n      // Then: validation errors should be shown\n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toHaveTextContent('Validation failed')\n      })\n    })\n  })\n}) "],"names":["jest","mock","useSession","fn","useRouter","global","fetch","describe","mockPush","mockUseSession","mockUseRouter","mockFetch","beforeEach","clearAllMocks","mockReturnValue","push","data","user","testUsers","john","status","update","test","MockProjectForm","name","setName","React","useState","isSubmitting","setIsSubmitting","handleSubmit","e","preventDefault","response","method","headers","body","JSON","stringify","contractor","ok","form","onSubmit","input","type","placeholder","value","onChange","target","required","button","disabled","mockResolvedValue","Response","id","testProjects","kitchenReno","redirectUrl","render","nameInput","screen","getByPlaceholderText","fireEvent","change","submitButton","getByRole","click","waitFor","expect","toHaveBeenCalledWith","MockContractorForm","setContractor","contractorInput","MockArchitectForm","architect","setArchitect","undefined","architectInput","MockSkipArchitectForm","MockPMForm","projectManager","setProjectManager","deckAddition","pmInput","MockValidationForm","error","setError","errorData","json","err","div","role","fieldErrors","toHaveTextContent"],"mappings":"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"}