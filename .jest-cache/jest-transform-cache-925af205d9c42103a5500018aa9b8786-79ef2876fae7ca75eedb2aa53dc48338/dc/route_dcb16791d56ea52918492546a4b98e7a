c2604d9fe5b0d7b82e6d25839eac278c
"use strict";

/* istanbul ignore next */
function cov_1muf7n92ss() {
  var path = "/Users/kennyc/code/personal/nailit/app/api/projects/route.ts";
  var hash = "4b2deafe5b482b5b0c13ce690b260d19f998e864";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kennyc/code/personal/nailit/app/api/projects/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 53
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "11": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 81
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "14": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "16": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 49
        }
      },
      "17": {
        start: {
          line: 44,
          column: 25
        },
        end: {
          line: 74,
          column: 10
        }
      },
      "18": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 51
        }
      },
      "19": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 57
        }
      },
      "20": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "21": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 48
        }
      },
      "22": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 305,
          column: 5
        }
      },
      "23": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 50
        }
      },
      "24": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 89,
          column: 81
        }
      },
      "25": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 91
        }
      },
      "26": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "27": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 53
        }
      },
      "28": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "29": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 55
        }
      },
      "30": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "31": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 40
        }
      },
      "32": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 52
        }
      },
      "33": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 62
        }
      },
      "34": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "35": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 52
        }
      },
      "36": {
        start: {
          line: 113,
          column: 112
        },
        end: {
          line: 113,
          column: 116
        }
      },
      "37": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 64
        }
      },
      "38": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "39": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "40": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "41": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "42": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "43": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "44": {
        start: {
          line: 143,
          column: 37
        },
        end: {
          line: 143,
          column: 101
        }
      },
      "45": {
        start: {
          line: 143,
          column: 64
        },
        end: {
          line: 143,
          column: 100
        }
      },
      "46": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "47": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 85
        }
      },
      "48": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 15
        }
      },
      "49": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "50": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "51": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 70
        }
      },
      "52": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 160,
          column: 19
        }
      },
      "53": {
        start: {
          line: 164,
          column: 34
        },
        end: {
          line: 164,
          column: 98
        }
      },
      "54": {
        start: {
          line: 164,
          column: 61
        },
        end: {
          line: 164,
          column: 97
        }
      },
      "55": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 54
        }
      },
      "56": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "57": {
        start: {
          line: 173,
          column: 47
        },
        end: {
          line: 177,
          column: 17
        }
      },
      "58": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "59": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 113
        }
      },
      "60": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "61": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 56
        }
      },
      "62": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 56
        }
      },
      "63": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 58
        }
      },
      "64": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 193,
          column: 15
        }
      },
      "65": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "66": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 50
        }
      },
      "67": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 46
        }
      },
      "68": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "69": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 55
        }
      },
      "70": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 206,
          column: 15
        }
      },
      "71": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 56
        }
      },
      "72": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 213,
          column: 15
        }
      },
      "73": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "74": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "75": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "76": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 60
        }
      },
      "77": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 228,
          column: 19
        }
      },
      "78": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 67
        }
      },
      "79": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 244,
          column: 10
        }
      },
      "80": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 65
        }
      },
      "81": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 91
        }
      },
      "82": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "83": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 56
        }
      },
      "84": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 18
          }
        },
        loc: {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 85,
            column: 15
          },
          end: {
            line: 85,
            column: 19
          }
        },
        loc: {
          start: {
            line: 85,
            column: 29
          },
          end: {
            line: 306,
            column: 1
          }
        },
        line: 85
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 143,
            column: 54
          },
          end: {
            line: 143,
            column: 55
          }
        },
        loc: {
          start: {
            line: 143,
            column: 64
          },
          end: {
            line: 143,
            column: 100
          }
        },
        line: 143
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 164,
            column: 51
          },
          end: {
            line: 164,
            column: 52
          }
        },
        loc: {
          start: {
            line: 164,
            column: 61
          },
          end: {
            line: 164,
            column: 97
          }
        },
        line: 164
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 173,
            column: 41
          },
          end: {
            line: 173,
            column: 42
          }
        },
        loc: {
          start: {
            line: 173,
            column: 47
          },
          end: {
            line: 177,
            column: 17
          }
        },
        line: 173
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 54,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 52,
            column: 45
          }
        }, {
          start: {
            line: 52,
            column: 49
          },
          end: {
            line: 54,
            column: 17
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 39
          },
          end: {
            line: 90,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 49
          },
          end: {
            line: 90,
            column: 56
          }
        }, {
          start: {
            line: 90,
            column: 59
          },
          end: {
            line: 90,
            column: 70
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "6": {
        loc: {
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 116,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 12
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: 116,
            column: 21
          },
          end: {
            line: 116,
            column: 31
          }
        }, {
          start: {
            line: 116,
            column: 35
          },
          end: {
            line: 116,
            column: 43
          }
        }, {
          start: {
            line: 116,
            column: 47
          },
          end: {
            line: 116,
            column: 55
          }
        }, {
          start: {
            line: 116,
            column: 59
          },
          end: {
            line: 116,
            column: 66
          }
        }, {
          start: {
            line: 116,
            column: 70
          },
          end: {
            line: 116,
            column: 82
          }
        }],
        line: 116
      },
      "7": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "8": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 24
          }
        }, {
          start: {
            line: 132,
            column: 28
          },
          end: {
            line: 132,
            column: 55
          }
        }, {
          start: {
            line: 132,
            column: 59
          },
          end: {
            line: 132,
            column: 83
          }
        }],
        line: 132
      },
      "9": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "10": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "11": {
        loc: {
          start: {
            line: 154,
            column: 16
          },
          end: {
            line: 154,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 16
          },
          end: {
            line: 154,
            column: 28
          }
        }, {
          start: {
            line: 154,
            column: 32
          },
          end: {
            line: 154,
            column: 45
          }
        }, {
          start: {
            line: 154,
            column: 49
          },
          end: {
            line: 154,
            column: 61
          }
        }],
        line: 154
      },
      "12": {
        loc: {
          start: {
            line: 182,
            column: 27
          },
          end: {
            line: 182,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 56
          },
          end: {
            line: 182,
            column: 95
          }
        }, {
          start: {
            line: 182,
            column: 98
          },
          end: {
            line: 182,
            column: 112
          }
        }],
        line: 182
      },
      "13": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "14": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "15": {
        loc: {
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 200,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 200,
            column: 48
          }
        }, {
          start: {
            line: 200,
            column: 52
          },
          end: {
            line: 200,
            column: 82
          }
        }],
        line: 200
      },
      "16": {
        loc: {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "17": {
        loc: {
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 237,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 237,
            column: 51
          }
        }, {
          start: {
            line: 237,
            column: 55
          },
          end: {
            line: 237,
            column: 59
          }
        }],
        line: 237
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0, 0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/kennyc/code/personal/nailit/app/api/projects/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '../auth/[...nextauth]/route'\nimport { prisma } from '../../lib/prisma'\n\n// GET /api/projects - Get all projects for authenticated user\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // First check if user has any projects\n    const projectCount = await prisma.project.count({\n      where: {\n        userId: session.user.id\n      }\n    });\n\n    // If no projects, return empty array immediately\n    if (projectCount === 0) {\n      return NextResponse.json([]);\n    }\n\n    // If projects exist, fetch with includes\n    const projects = await prisma.project.findMany({\n      where: {\n        userId: session.user.id\n      },\n      include: {\n        user: true,\n        emailSettings: true,\n        // Use dynamic access to bypass TypeScript issues\n        ...(prisma as any).teamMembers && { teamMembers: true },\n        _count: {\n          select: {\n            flaggedItems: {\n              where: { status: 'PENDING' }\n            },\n            timelineEntries: true\n          }\n        }\n      },\n      orderBy: [\n        {\n          status: 'asc' // ACTIVE comes before ARCHIVED alphabetically\n        },\n        {\n          createdAt: 'desc'\n        }\n      ]\n    })\n\n    return NextResponse.json(projects)\n  } catch (error) {\n    console.error('Error fetching projects:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch projects' },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/projects - Create a new project\nexport async function POST(request: NextRequest) {\n  console.log('=== PROJECT ENDPOINT HIT ===');\n  \n  try {\n    console.log('Step 1: Getting session...');\n    const session = await getServerSession(authOptions)\n    console.log('Session result:', session ? 'Found' : 'Not found', session?.user?.id);\n    \n    if (!session?.user?.id) {\n      console.log('Session validation failed');\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    console.log('Step 2: Parsing request body...');\n    let body;\n    try {\n      body = await request.json()\n      console.log('Body parsed successfully');\n    } catch (parseError) {\n      console.error('Body parsing failed:', parseError);\n      return NextResponse.json({ error: 'Invalid JSON body' }, { status: 400 });\n    }\n    \n    console.log('Step 3: Extracting fields...');\n    const {\n      name,\n      description,\n      teamMembers,\n      address,\n      addressLat,\n      addressLng,\n      budget,\n      startDate,\n      endDate,\n    } = body\n\n    console.log('Received project creation request:', body)\n    \n    // Validate required fields\n    if (!name || !startDate || !address || !endDate || !budget || !description) {\n      console.log('Missing required fields:', { \n        name: !!name, \n        startDate: !!startDate, \n        address: !!address,\n        endDate: !!endDate,\n        budget: !!budget,\n        description: !!description\n      })\n      return NextResponse.json(\n        { error: 'Missing required fields: name, startDate, address, endDate, budget, description' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team members\n    if (!teamMembers || !Array.isArray(teamMembers) || teamMembers.length === 0) {\n      console.log('Team members validation failed:', { teamMembers })\n      return NextResponse.json(\n        { error: 'At least one team member is required' },\n        { status: 400 }\n      )\n    }\n\n    // Check for general contractor\n    const hasGeneralContractor = teamMembers.some(member => \n      member.role === 'GENERAL_CONTRACTOR'\n    );\n\n    if (!hasGeneralContractor) {\n      console.log('No general contractor found in team members:', teamMembers)\n      return NextResponse.json(\n        { error: 'A General Contractor is required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team member structure\n    for (const member of teamMembers) {\n      if (!member.name || !member.email || !member.role) {\n        console.log('Team member validation failed:', member)\n        return NextResponse.json(\n          { error: 'All team members must have name, email, and role' },\n          { status: 400 }\n        )\n      }\n    }\n\n    // Get the general contractor info for backward compatibility\n    const generalContractor = teamMembers.find(member => member.role === 'GENERAL_CONTRACTOR');\n\n    console.log('=== PROJECT CREATION DEBUG ===');\n    console.log('Raw form data received:', {\n      name: typeof name + ': ' + name,\n      description: typeof description + ': ' + description,\n      address: typeof address + ': ' + address,\n      budget: typeof budget + ': ' + budget,\n      startDate: typeof startDate + ': ' + startDate,\n      endDate: typeof endDate + ': ' + endDate,\n      teamMembers: teamMembers.map(m => ({\n        name: typeof m.name + ': ' + m.name,\n        email: typeof m.email + ': ' + m.email,\n        role: typeof m.role + ': ' + m.role\n      }))\n    });\n\n    // Parse and validate budget\n    let parsedBudget: number;\n    try {\n      parsedBudget = typeof budget === 'string' ? parseFloat(budget.replace(/[,$]/g, '')) : Number(budget);\n      if (isNaN(parsedBudget)) {\n        throw new Error('Invalid budget value');\n      }\n      console.log('Parsed budget:', parsedBudget);\n    } catch (error) {\n      console.error('Budget parsing error:', error);\n      return NextResponse.json(\n        { error: 'Invalid budget format' },\n        { status: 400 }\n      )\n    }\n\n    // Parse and validate dates\n    let parsedStartDate: Date, parsedEndDate: Date;\n    try {\n      parsedStartDate = new Date(startDate);\n      parsedEndDate = new Date(endDate);\n      \n      if (isNaN(parsedStartDate.getTime()) || isNaN(parsedEndDate.getTime())) {\n        throw new Error('Invalid date values');\n      }\n      console.log('Parsed dates:', { startDate: parsedStartDate, endDate: parsedEndDate });\n    } catch (error) {\n      console.error('Date parsing error:', error);\n      return NextResponse.json(\n        { error: 'Invalid date format' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team member roles\n    const validRoles = ['GENERAL_CONTRACTOR', 'ARCHITECT_DESIGNER', 'PROJECT_MANAGER'];\n    for (const member of teamMembers) {\n      if (!validRoles.includes(member.role)) {\n        console.error('Invalid role:', member.role);\n        return NextResponse.json(\n          { error: `Invalid role: ${member.role}` },\n          { status: 400 }\n        )\n      }\n    }\n\n    console.log('All validations passed, creating project...');\n\n    // Create project first without nested creates\n    const project = await prisma.project.create({\n      data: {\n        name: String(name),\n        description: String(description),\n        contractor: generalContractor?.name || null,\n        address: String(address),\n        budget: parsedBudget,\n        startDate: parsedStartDate,\n        endDate: parsedEndDate,\n        userId: session.user.id\n      }\n    });\n\n    console.log('Project created successfully:', project.id);\n\n    // For now, let's just return the project without creating team members or email settings\n    // to isolate where the failure is happening\n    console.log('Returning project without creating related records for debugging...');\n    return NextResponse.json(project, { status: 201 })\n\n    /* TEMPORARILY COMMENTED OUT FOR DEBUGGING\n    // Create team members separately using correct model name\n    for (const member of teamMembers) {\n      console.log('Creating team member:', member);\n      try {\n        await (prisma as any).teamMember.create({\n          data: {\n            name: String(member.name),\n            email: String(member.email),\n            role: member.role,\n            projectId: project.id\n          }\n        });\n        console.log('Team member created successfully:', member.name);\n      } catch (error) {\n        console.error('Team member creation failed:', error);\n        throw new Error(`Failed to create team member ${member.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    // Create email settings separately\n    console.log('Creating email settings...');\n    try {\n      await prisma.emailSettings.create({\n        data: {\n          projectId: project.id,\n          monitoringEnabled: true,\n          gmailConnected: true,\n          emailFilters: {\n            contractorEmail: generalContractor?.email,\n            teamEmails: teamMembers.map(member => member.email),\n          },\n          notificationsEnabled: true,\n          weeklyReports: true,\n          highPriorityAlerts: true,\n        }\n      });\n      console.log('Email settings created successfully');\n    } catch (error) {\n      console.error('Email settings creation failed:', error);\n      throw new Error(`Failed to create email settings: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    console.log('Project creation completed successfully');\n\n    return NextResponse.json(project, { status: 201 })\n    */\n  } catch (error) {\n    console.error('Error creating project:', error)\n    return NextResponse.json(\n      { error: 'Failed to create project' },\n      { status: 500 }\n    )\n  }\n} "],
      names: ["GET", "POST", "session", "getServerSession", "authOptions", "user", "id", "NextResponse", "json", "error", "status", "projectCount", "prisma", "project", "count", "where", "userId", "projects", "findMany", "include", "emailSettings", "teamMembers", "_count", "select", "flaggedItems", "timelineEntries", "orderBy", "createdAt", "console", "request", "log", "body", "parseError", "name", "description", "address", "addressLat", "addressLng", "budget", "startDate", "endDate", "Array", "isArray", "length", "hasGeneralContractor", "some", "member", "role", "email", "generalContractor", "find", "map", "m", "parsedBudget", "parseFloat", "replace", "Number", "isNaN", "Error", "parsedStartDate", "parsedEndDate", "Date", "getTime", "validRoles", "includes", "create", "data", "String", "contractor"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4b2deafe5b482b5b0c13ce690b260d19f998e864"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1muf7n92ss = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1muf7n92ss();
cov_1muf7n92ss().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1muf7n92ss().f[0]++;
  cov_1muf7n92ss().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1muf7n92ss().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1muf7n92ss().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_1muf7n92ss().f[1]++;
    cov_1muf7n92ss().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_1muf7n92ss().f[2]++;
    cov_1muf7n92ss().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1muf7n92ss().s[6]++, require("next/server"));
const _nextauth =
/* istanbul ignore next */
(cov_1muf7n92ss().s[7]++, require("next-auth"));
const _route =
/* istanbul ignore next */
(cov_1muf7n92ss().s[8]++, require("../auth/[...nextauth]/route"));
const _prisma =
/* istanbul ignore next */
(cov_1muf7n92ss().s[9]++, require("../../lib/prisma"));
async function GET() {
  /* istanbul ignore next */
  cov_1muf7n92ss().f[3]++;
  cov_1muf7n92ss().s[10]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[11]++, await (0, _nextauth.getServerSession)(_route.authOptions));
    /* istanbul ignore next */
    cov_1muf7n92ss().s[12]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_1muf7n92ss().b[0][0]++;
      cov_1muf7n92ss().s[13]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1muf7n92ss().b[0][1]++;
    }
    // First check if user has any projects
    const projectCount =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[14]++, await _prisma.prisma.project.count({
      where: {
        userId: session.user.id
      }
    }));
    // If no projects, return empty array immediately
    /* istanbul ignore next */
    cov_1muf7n92ss().s[15]++;
    if (projectCount === 0) {
      /* istanbul ignore next */
      cov_1muf7n92ss().b[1][0]++;
      cov_1muf7n92ss().s[16]++;
      return _server.NextResponse.json([]);
    } else
    /* istanbul ignore next */
    {
      cov_1muf7n92ss().b[1][1]++;
    }
    // If projects exist, fetch with includes
    const projects =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[17]++, await _prisma.prisma.project.findMany({
      where: {
        userId: session.user.id
      },
      include: {
        user: true,
        emailSettings: true,
        // Use dynamic access to bypass TypeScript issues
        ...(
        /* istanbul ignore next */
        (cov_1muf7n92ss().b[2][0]++, _prisma.prisma.teamMembers) &&
        /* istanbul ignore next */
        (cov_1muf7n92ss().b[2][1]++, {
          teamMembers: true
        })),
        _count: {
          select: {
            flaggedItems: {
              where: {
                status: 'PENDING'
              }
            },
            timelineEntries: true
          }
        }
      },
      orderBy: [{
        status: 'asc' // ACTIVE comes before ARCHIVED alphabetically
      }, {
        createdAt: 'desc'
      }]
    }));
    /* istanbul ignore next */
    cov_1muf7n92ss().s[18]++;
    return _server.NextResponse.json(projects);
  } catch (error) {
    /* istanbul ignore next */
    cov_1muf7n92ss().s[19]++;
    console.error('Error fetching projects:', error);
    /* istanbul ignore next */
    cov_1muf7n92ss().s[20]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch projects'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1muf7n92ss().f[4]++;
  cov_1muf7n92ss().s[21]++;
  console.log('=== PROJECT ENDPOINT HIT ===');
  /* istanbul ignore next */
  cov_1muf7n92ss().s[22]++;
  try {
    /* istanbul ignore next */
    cov_1muf7n92ss().s[23]++;
    console.log('Step 1: Getting session...');
    const session =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[24]++, await (0, _nextauth.getServerSession)(_route.authOptions));
    /* istanbul ignore next */
    cov_1muf7n92ss().s[25]++;
    console.log('Session result:', session ?
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[3][0]++, 'Found') :
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[3][1]++, 'Not found'), session?.user?.id);
    /* istanbul ignore next */
    cov_1muf7n92ss().s[26]++;
    if (!session?.user?.id) {
      /* istanbul ignore next */
      cov_1muf7n92ss().b[4][0]++;
      cov_1muf7n92ss().s[27]++;
      console.log('Session validation failed');
      /* istanbul ignore next */
      cov_1muf7n92ss().s[28]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1muf7n92ss().b[4][1]++;
    }
    cov_1muf7n92ss().s[29]++;
    console.log('Step 2: Parsing request body...');
    let body;
    /* istanbul ignore next */
    cov_1muf7n92ss().s[30]++;
    try {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[31]++;
      body = await request.json();
      /* istanbul ignore next */
      cov_1muf7n92ss().s[32]++;
      console.log('Body parsed successfully');
    } catch (parseError) {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[33]++;
      console.error('Body parsing failed:', parseError);
      /* istanbul ignore next */
      cov_1muf7n92ss().s[34]++;
      return _server.NextResponse.json({
        error: 'Invalid JSON body'
      }, {
        status: 400
      });
    }
    /* istanbul ignore next */
    cov_1muf7n92ss().s[35]++;
    console.log('Step 3: Extracting fields...');
    const {
      name,
      description,
      teamMembers,
      address,
      addressLat,
      addressLng,
      budget,
      startDate,
      endDate
    } =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[36]++, body);
    /* istanbul ignore next */
    cov_1muf7n92ss().s[37]++;
    console.log('Received project creation request:', body);
    // Validate required fields
    /* istanbul ignore next */
    cov_1muf7n92ss().s[38]++;
    if (
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[6][0]++, !name) ||
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[6][1]++, !startDate) ||
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[6][2]++, !address) ||
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[6][3]++, !endDate) ||
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[6][4]++, !budget) ||
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[6][5]++, !description)) {
      /* istanbul ignore next */
      cov_1muf7n92ss().b[5][0]++;
      cov_1muf7n92ss().s[39]++;
      console.log('Missing required fields:', {
        name: !!name,
        startDate: !!startDate,
        address: !!address,
        endDate: !!endDate,
        budget: !!budget,
        description: !!description
      });
      /* istanbul ignore next */
      cov_1muf7n92ss().s[40]++;
      return _server.NextResponse.json({
        error: 'Missing required fields: name, startDate, address, endDate, budget, description'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1muf7n92ss().b[5][1]++;
    }
    // Validate team members
    cov_1muf7n92ss().s[41]++;
    if (
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[8][0]++, !teamMembers) ||
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[8][1]++, !Array.isArray(teamMembers)) ||
    /* istanbul ignore next */
    (cov_1muf7n92ss().b[8][2]++, teamMembers.length === 0)) {
      /* istanbul ignore next */
      cov_1muf7n92ss().b[7][0]++;
      cov_1muf7n92ss().s[42]++;
      console.log('Team members validation failed:', {
        teamMembers
      });
      /* istanbul ignore next */
      cov_1muf7n92ss().s[43]++;
      return _server.NextResponse.json({
        error: 'At least one team member is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1muf7n92ss().b[7][1]++;
    }
    // Check for general contractor
    const hasGeneralContractor =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[44]++, teamMembers.some(member => {
      /* istanbul ignore next */
      cov_1muf7n92ss().f[5]++;
      cov_1muf7n92ss().s[45]++;
      return member.role === 'GENERAL_CONTRACTOR';
    }));
    /* istanbul ignore next */
    cov_1muf7n92ss().s[46]++;
    if (!hasGeneralContractor) {
      /* istanbul ignore next */
      cov_1muf7n92ss().b[9][0]++;
      cov_1muf7n92ss().s[47]++;
      console.log('No general contractor found in team members:', teamMembers);
      /* istanbul ignore next */
      cov_1muf7n92ss().s[48]++;
      return _server.NextResponse.json({
        error: 'A General Contractor is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1muf7n92ss().b[9][1]++;
    }
    // Validate team member structure
    cov_1muf7n92ss().s[49]++;
    for (const member of teamMembers) {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_1muf7n92ss().b[11][0]++, !member.name) ||
      /* istanbul ignore next */
      (cov_1muf7n92ss().b[11][1]++, !member.email) ||
      /* istanbul ignore next */
      (cov_1muf7n92ss().b[11][2]++, !member.role)) {
        /* istanbul ignore next */
        cov_1muf7n92ss().b[10][0]++;
        cov_1muf7n92ss().s[51]++;
        console.log('Team member validation failed:', member);
        /* istanbul ignore next */
        cov_1muf7n92ss().s[52]++;
        return _server.NextResponse.json({
          error: 'All team members must have name, email, and role'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1muf7n92ss().b[10][1]++;
      }
    }
    // Get the general contractor info for backward compatibility
    const generalContractor =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[53]++, teamMembers.find(member => {
      /* istanbul ignore next */
      cov_1muf7n92ss().f[6]++;
      cov_1muf7n92ss().s[54]++;
      return member.role === 'GENERAL_CONTRACTOR';
    }));
    /* istanbul ignore next */
    cov_1muf7n92ss().s[55]++;
    console.log('=== PROJECT CREATION DEBUG ===');
    /* istanbul ignore next */
    cov_1muf7n92ss().s[56]++;
    console.log('Raw form data received:', {
      name: typeof name + ': ' + name,
      description: typeof description + ': ' + description,
      address: typeof address + ': ' + address,
      budget: typeof budget + ': ' + budget,
      startDate: typeof startDate + ': ' + startDate,
      endDate: typeof endDate + ': ' + endDate,
      teamMembers: teamMembers.map(m => {
        /* istanbul ignore next */
        cov_1muf7n92ss().f[7]++;
        cov_1muf7n92ss().s[57]++;
        return {
          name: typeof m.name + ': ' + m.name,
          email: typeof m.email + ': ' + m.email,
          role: typeof m.role + ': ' + m.role
        };
      })
    });
    // Parse and validate budget
    let parsedBudget;
    /* istanbul ignore next */
    cov_1muf7n92ss().s[58]++;
    try {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[59]++;
      parsedBudget = typeof budget === 'string' ?
      /* istanbul ignore next */
      (cov_1muf7n92ss().b[12][0]++, parseFloat(budget.replace(/[,$]/g, ''))) :
      /* istanbul ignore next */
      (cov_1muf7n92ss().b[12][1]++, Number(budget));
      /* istanbul ignore next */
      cov_1muf7n92ss().s[60]++;
      if (isNaN(parsedBudget)) {
        /* istanbul ignore next */
        cov_1muf7n92ss().b[13][0]++;
        cov_1muf7n92ss().s[61]++;
        throw new Error('Invalid budget value');
      } else
      /* istanbul ignore next */
      {
        cov_1muf7n92ss().b[13][1]++;
      }
      cov_1muf7n92ss().s[62]++;
      console.log('Parsed budget:', parsedBudget);
    } catch (error) {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[63]++;
      console.error('Budget parsing error:', error);
      /* istanbul ignore next */
      cov_1muf7n92ss().s[64]++;
      return _server.NextResponse.json({
        error: 'Invalid budget format'
      }, {
        status: 400
      });
    }
    // Parse and validate dates
    let parsedStartDate, parsedEndDate;
    /* istanbul ignore next */
    cov_1muf7n92ss().s[65]++;
    try {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[66]++;
      parsedStartDate = new Date(startDate);
      /* istanbul ignore next */
      cov_1muf7n92ss().s[67]++;
      parsedEndDate = new Date(endDate);
      /* istanbul ignore next */
      cov_1muf7n92ss().s[68]++;
      if (
      /* istanbul ignore next */
      (cov_1muf7n92ss().b[15][0]++, isNaN(parsedStartDate.getTime())) ||
      /* istanbul ignore next */
      (cov_1muf7n92ss().b[15][1]++, isNaN(parsedEndDate.getTime()))) {
        /* istanbul ignore next */
        cov_1muf7n92ss().b[14][0]++;
        cov_1muf7n92ss().s[69]++;
        throw new Error('Invalid date values');
      } else
      /* istanbul ignore next */
      {
        cov_1muf7n92ss().b[14][1]++;
      }
      cov_1muf7n92ss().s[70]++;
      console.log('Parsed dates:', {
        startDate: parsedStartDate,
        endDate: parsedEndDate
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[71]++;
      console.error('Date parsing error:', error);
      /* istanbul ignore next */
      cov_1muf7n92ss().s[72]++;
      return _server.NextResponse.json({
        error: 'Invalid date format'
      }, {
        status: 400
      });
    }
    // Validate team member roles
    const validRoles =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[73]++, ['GENERAL_CONTRACTOR', 'ARCHITECT_DESIGNER', 'PROJECT_MANAGER']);
    /* istanbul ignore next */
    cov_1muf7n92ss().s[74]++;
    for (const member of teamMembers) {
      /* istanbul ignore next */
      cov_1muf7n92ss().s[75]++;
      if (!validRoles.includes(member.role)) {
        /* istanbul ignore next */
        cov_1muf7n92ss().b[16][0]++;
        cov_1muf7n92ss().s[76]++;
        console.error('Invalid role:', member.role);
        /* istanbul ignore next */
        cov_1muf7n92ss().s[77]++;
        return _server.NextResponse.json({
          error: `Invalid role: ${member.role}`
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1muf7n92ss().b[16][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1muf7n92ss().s[78]++;
    console.log('All validations passed, creating project...');
    // Create project first without nested creates
    const project =
    /* istanbul ignore next */
    (cov_1muf7n92ss().s[79]++, await _prisma.prisma.project.create({
      data: {
        name: String(name),
        description: String(description),
        contractor:
        /* istanbul ignore next */
        (cov_1muf7n92ss().b[17][0]++, generalContractor?.name) ||
        /* istanbul ignore next */
        (cov_1muf7n92ss().b[17][1]++, null),
        address: String(address),
        budget: parsedBudget,
        startDate: parsedStartDate,
        endDate: parsedEndDate,
        userId: session.user.id
      }
    }));
    /* istanbul ignore next */
    cov_1muf7n92ss().s[80]++;
    console.log('Project created successfully:', project.id);
    // For now, let's just return the project without creating team members or email settings
    // to isolate where the failure is happening
    /* istanbul ignore next */
    cov_1muf7n92ss().s[81]++;
    console.log('Returning project without creating related records for debugging...');
    /* istanbul ignore next */
    cov_1muf7n92ss().s[82]++;
    return _server.NextResponse.json(project, {
      status: 201
    });
    /* TEMPORARILY COMMENTED OUT FOR DEBUGGING
    // Create team members separately using correct model name
    for (const member of teamMembers) {
      console.log('Creating team member:', member);
      try {
        await (prisma as any).teamMember.create({
          data: {
            name: String(member.name),
            email: String(member.email),
            role: member.role,
            projectId: project.id
          }
        });
        console.log('Team member created successfully:', member.name);
      } catch (error) {
        console.error('Team member creation failed:', error);
        throw new Error(`Failed to create team member ${member.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
     // Create email settings separately
    console.log('Creating email settings...');
    try {
      await prisma.emailSettings.create({
        data: {
          projectId: project.id,
          monitoringEnabled: true,
          gmailConnected: true,
          emailFilters: {
            contractorEmail: generalContractor?.email,
            teamEmails: teamMembers.map(member => member.email),
          },
          notificationsEnabled: true,
          weeklyReports: true,
          highPriorityAlerts: true,
        }
      });
      console.log('Email settings created successfully');
    } catch (error) {
      console.error('Email settings creation failed:', error);
      throw new Error(`Failed to create email settings: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
     console.log('Project creation completed successfully');
     return NextResponse.json(project, { status: 201 })
    */
  } catch (error) {
    /* istanbul ignore next */
    cov_1muf7n92ss().s[83]++;
    console.error('Error creating project:', error);
    /* istanbul ignore next */
    cov_1muf7n92ss().s[84]++;
    return _server.NextResponse.json({
      error: 'Failed to create project'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,