{"version":3,"names":["GET","cov_1muf7n92ss","f","s","POST","session","_nextauth","getServerSession","_route","authOptions","user","id","b","_server","NextResponse","json","error","status","projectCount","_prisma","prisma","project","count","where","userId","projects","findMany","include","emailSettings","teamMembers","_count","select","flaggedItems","timelineEntries","orderBy","createdAt","console","request","log","body","parseError","name","description","address","addressLat","addressLng","budget","startDate","endDate","Array","isArray","length","hasGeneralContractor","some","member","role","email","generalContractor","find","map","m","parsedBudget","parseFloat","replace","Number","isNaN","Error","parsedStartDate","parsedEndDate","Date","getTime","validRoles","includes","create","data","String","contractor"],"sources":["/Users/kennyc/code/personal/nailit/app/api/projects/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '../auth/[...nextauth]/route'\nimport { prisma } from '../../lib/prisma'\n\n// GET /api/projects - Get all projects for authenticated user\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions)\n    \n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // First check if user has any projects\n    const projectCount = await prisma.project.count({\n      where: {\n        userId: session.user.id\n      }\n    });\n\n    // If no projects, return empty array immediately\n    if (projectCount === 0) {\n      return NextResponse.json([]);\n    }\n\n    // If projects exist, fetch with includes\n    const projects = await prisma.project.findMany({\n      where: {\n        userId: session.user.id\n      },\n      include: {\n        user: true,\n        emailSettings: true,\n        // Use dynamic access to bypass TypeScript issues\n        ...(prisma as any).teamMembers && { teamMembers: true },\n        _count: {\n          select: {\n            flaggedItems: {\n              where: { status: 'PENDING' }\n            },\n            timelineEntries: true\n          }\n        }\n      },\n      orderBy: [\n        {\n          status: 'asc' // ACTIVE comes before ARCHIVED alphabetically\n        },\n        {\n          createdAt: 'desc'\n        }\n      ]\n    })\n\n    return NextResponse.json(projects)\n  } catch (error) {\n    console.error('Error fetching projects:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch projects' },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/projects - Create a new project\nexport async function POST(request: NextRequest) {\n  console.log('=== PROJECT ENDPOINT HIT ===');\n  \n  try {\n    console.log('Step 1: Getting session...');\n    const session = await getServerSession(authOptions)\n    console.log('Session result:', session ? 'Found' : 'Not found', session?.user?.id);\n    \n    if (!session?.user?.id) {\n      console.log('Session validation failed');\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    console.log('Step 2: Parsing request body...');\n    let body;\n    try {\n      body = await request.json()\n      console.log('Body parsed successfully');\n    } catch (parseError) {\n      console.error('Body parsing failed:', parseError);\n      return NextResponse.json({ error: 'Invalid JSON body' }, { status: 400 });\n    }\n    \n    console.log('Step 3: Extracting fields...');\n    const {\n      name,\n      description,\n      teamMembers,\n      address,\n      addressLat,\n      addressLng,\n      budget,\n      startDate,\n      endDate,\n    } = body\n\n    console.log('Received project creation request:', body)\n    \n    // Validate required fields\n    if (!name || !startDate || !address || !endDate || !budget || !description) {\n      console.log('Missing required fields:', { \n        name: !!name, \n        startDate: !!startDate, \n        address: !!address,\n        endDate: !!endDate,\n        budget: !!budget,\n        description: !!description\n      })\n      return NextResponse.json(\n        { error: 'Missing required fields: name, startDate, address, endDate, budget, description' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team members\n    if (!teamMembers || !Array.isArray(teamMembers) || teamMembers.length === 0) {\n      console.log('Team members validation failed:', { teamMembers })\n      return NextResponse.json(\n        { error: 'At least one team member is required' },\n        { status: 400 }\n      )\n    }\n\n    // Check for general contractor\n    const hasGeneralContractor = teamMembers.some(member => \n      member.role === 'GENERAL_CONTRACTOR'\n    );\n\n    if (!hasGeneralContractor) {\n      console.log('No general contractor found in team members:', teamMembers)\n      return NextResponse.json(\n        { error: 'A General Contractor is required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team member structure\n    for (const member of teamMembers) {\n      if (!member.name || !member.email || !member.role) {\n        console.log('Team member validation failed:', member)\n        return NextResponse.json(\n          { error: 'All team members must have name, email, and role' },\n          { status: 400 }\n        )\n      }\n    }\n\n    // Get the general contractor info for backward compatibility\n    const generalContractor = teamMembers.find(member => member.role === 'GENERAL_CONTRACTOR');\n\n    console.log('=== PROJECT CREATION DEBUG ===');\n    console.log('Raw form data received:', {\n      name: typeof name + ': ' + name,\n      description: typeof description + ': ' + description,\n      address: typeof address + ': ' + address,\n      budget: typeof budget + ': ' + budget,\n      startDate: typeof startDate + ': ' + startDate,\n      endDate: typeof endDate + ': ' + endDate,\n      teamMembers: teamMembers.map(m => ({\n        name: typeof m.name + ': ' + m.name,\n        email: typeof m.email + ': ' + m.email,\n        role: typeof m.role + ': ' + m.role\n      }))\n    });\n\n    // Parse and validate budget\n    let parsedBudget: number;\n    try {\n      parsedBudget = typeof budget === 'string' ? parseFloat(budget.replace(/[,$]/g, '')) : Number(budget);\n      if (isNaN(parsedBudget)) {\n        throw new Error('Invalid budget value');\n      }\n      console.log('Parsed budget:', parsedBudget);\n    } catch (error) {\n      console.error('Budget parsing error:', error);\n      return NextResponse.json(\n        { error: 'Invalid budget format' },\n        { status: 400 }\n      )\n    }\n\n    // Parse and validate dates\n    let parsedStartDate: Date, parsedEndDate: Date;\n    try {\n      parsedStartDate = new Date(startDate);\n      parsedEndDate = new Date(endDate);\n      \n      if (isNaN(parsedStartDate.getTime()) || isNaN(parsedEndDate.getTime())) {\n        throw new Error('Invalid date values');\n      }\n      console.log('Parsed dates:', { startDate: parsedStartDate, endDate: parsedEndDate });\n    } catch (error) {\n      console.error('Date parsing error:', error);\n      return NextResponse.json(\n        { error: 'Invalid date format' },\n        { status: 400 }\n      )\n    }\n\n    // Validate team member roles\n    const validRoles = ['GENERAL_CONTRACTOR', 'ARCHITECT_DESIGNER', 'PROJECT_MANAGER'];\n    for (const member of teamMembers) {\n      if (!validRoles.includes(member.role)) {\n        console.error('Invalid role:', member.role);\n        return NextResponse.json(\n          { error: `Invalid role: ${member.role}` },\n          { status: 400 }\n        )\n      }\n    }\n\n    console.log('All validations passed, creating project...');\n\n    // Create project first without nested creates\n    const project = await prisma.project.create({\n      data: {\n        name: String(name),\n        description: String(description),\n        contractor: generalContractor?.name || null,\n        address: String(address),\n        budget: parsedBudget,\n        startDate: parsedStartDate,\n        endDate: parsedEndDate,\n        userId: session.user.id\n      }\n    });\n\n    console.log('Project created successfully:', project.id);\n\n    // For now, let's just return the project without creating team members or email settings\n    // to isolate where the failure is happening\n    console.log('Returning project without creating related records for debugging...');\n    return NextResponse.json(project, { status: 201 })\n\n    /* TEMPORARILY COMMENTED OUT FOR DEBUGGING\n    // Create team members separately using correct model name\n    for (const member of teamMembers) {\n      console.log('Creating team member:', member);\n      try {\n        await (prisma as any).teamMember.create({\n          data: {\n            name: String(member.name),\n            email: String(member.email),\n            role: member.role,\n            projectId: project.id\n          }\n        });\n        console.log('Team member created successfully:', member.name);\n      } catch (error) {\n        console.error('Team member creation failed:', error);\n        throw new Error(`Failed to create team member ${member.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    // Create email settings separately\n    console.log('Creating email settings...');\n    try {\n      await prisma.emailSettings.create({\n        data: {\n          projectId: project.id,\n          monitoringEnabled: true,\n          gmailConnected: true,\n          emailFilters: {\n            contractorEmail: generalContractor?.email,\n            teamEmails: teamMembers.map(member => member.email),\n          },\n          notificationsEnabled: true,\n          weeklyReports: true,\n          highPriorityAlerts: true,\n        }\n      });\n      console.log('Email settings created successfully');\n    } catch (error) {\n      console.error('Email settings creation failed:', error);\n      throw new Error(`Failed to create email settings: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    console.log('Project creation completed successfully');\n\n    return NextResponse.json(project, { status: 201 })\n    */\n  } catch (error) {\n    console.error('Error creating project:', error)\n    return NextResponse.json(\n      { error: 'Failed to create project' },\n      { status: 500 }\n    )\n  }\n} "],"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","ignoreList":[]}