6b78a72672b53faa72e5c75fd62c7325
/**
 * Integration Tests for Projects API (GET)
 * Tests the actual API route with mocked dependencies
 */ "use strict";
// Mock dependencies
jest.mock('../../../app/api/auth/[...nextauth]/route', ()=>({
        authOptions: {}
    }));
jest.mock('next-auth', ()=>({
        getServerSession: jest.fn()
    }));
jest.mock('../../../app/lib/prisma', ()=>({
        prisma: {
            project: {
                count: jest.fn(),
                findMany: jest.fn(),
                findUnique: jest.fn(),
                findFirst: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn(),
                deleteMany: jest.fn()
            },
            user: {
                findUnique: jest.fn(),
                findFirst: jest.fn(),
                create: jest.fn(),
                update: jest.fn(),
                delete: jest.fn()
            }
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../../../app/api/projects/route");
const _fixtures = require("../../fixtures");
const _nextauth = require("next-auth");
const _prisma = require("../../../app/lib/prisma");
const mockGetServerSession = _nextauth.getServerSession;
const mockPrisma = _prisma.prisma;
describe('Projects API Integration Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    /**
   * Scenario: Authenticated user retrieves projects
   */ describe('Scenario: Authenticated user retrieves projects', ()=>{
        test('Given I am authenticated as user and have projects, When I make GET request, Then I receive 200 with projects', async ()=>{
            // Given: I am authenticated and have projects (using centralized fixtures)
            const authenticatedUser = {
                user: _fixtures.testUsers.john
            };
            mockGetServerSession.mockResolvedValue(authenticatedUser);
            // Set up database with user's projects
            const userProjects = _fixtures.projectScenarios.userWithProjects.projects;
            mockPrisma.project.count.mockResolvedValue(userProjects.length);
            mockPrisma.project.findMany.mockResolvedValue(userProjects);
            // When: I make a GET request to "/api/projects"
            const response = await (0, _route.GET)();
            const data = await response.json();
            // Then: I should receive a 200 status code with my projects
            expect(response.status).toBe(200);
            expect(data).toHaveLength(3);
            // And: each project should include required fields (flexible date checking)
            data.forEach((project)=>{
                expect(project).toHaveProperty('id', expect.any(String));
                expect(project).toHaveProperty('name', expect.any(String));
                expect(project).toHaveProperty('user', expect.any(Object));
                expect(project).toHaveProperty('emailSettings');
                expect(project).toHaveProperty('_count.flaggedItems', expect.any(Number));
                expect(project).toHaveProperty('_count.timelineEntries', expect.any(Number));
                expect(project).toHaveProperty('userId', _fixtures.testUsers.john.id);
            });
            // And: first project should be kitchen renovation
            expect(data[0]).toMatchObject({
                id: 'project-1',
                name: 'Kitchen Renovation',
                contractor: 'Mike Johnson Construction',
                architect: 'Sarah Chen Design',
                userId: _fixtures.testUsers.john.id
            });
        });
        test('Given I am authenticated, When projects are fetched, Then correct database query is made', async ()=>{
            // Given: I am authenticated as a user (using centralized fixtures)
            mockGetServerSession.mockResolvedValue({
                user: _fixtures.testUsers.john
            });
            mockPrisma.project.count.mockResolvedValue(1);
            mockPrisma.project.findMany.mockResolvedValue([
                _fixtures.testProjects.kitchenReno
            ]);
            // When: projects are fetched
            await (0, _route.GET)();
            // Then: correct database query should be made
            expect(mockPrisma.project.findMany).toHaveBeenCalledWith({
                where: {
                    userId: _fixtures.testUsers.john.id
                },
                include: expect.objectContaining({
                    user: true,
                    emailSettings: true,
                    _count: {
                        select: {
                            flaggedItems: {
                                where: {
                                    status: 'PENDING'
                                }
                            },
                            timelineEntries: true
                        }
                    }
                }),
                orderBy: [
                    {
                        status: 'asc'
                    },
                    {
                        createdAt: 'desc'
                    }
                ]
            });
        });
    });
    /**
   * Scenario: Unauthenticated user attempts to access projects
   */ describe('Scenario: Unauthenticated user attempts to access projects', ()=>{
        test('Given I am not authenticated, When I make GET request, Then I receive 401 with error message', async ()=>{
            // Given: I am not authenticated
            mockGetServerSession.mockResolvedValue(null);
            // When: I make a GET request to "/api/projects"
            const response = await (0, _route.GET)();
            const data = await response.json();
            // Then: I should receive a 401 status code with error message
            expect(response.status).toBe(401);
            expect(data).toEqual({
                error: 'Unauthorized'
            });
        });
    });
    /**
   * Scenario: Empty projects list
   */ describe('Scenario: Empty projects list', ()=>{
        test('Given I am authenticated but have no projects, When I make GET request, Then I receive empty array', async ()=>{
            // Given: I am authenticated but have no projects (using centralized fixtures)
            mockGetServerSession.mockResolvedValue({
                user: _fixtures.testUsers.jane
            });
            mockPrisma.project.count.mockResolvedValue(0);
            mockPrisma.project.findMany.mockResolvedValue([]);
            // When: I make a GET request to "/api/projects"
            const response = await (0, _route.GET)();
            const data = await response.json();
            // Then: I should receive a 200 status code with empty array
            expect(response.status).toBe(200);
            expect(data).toEqual([]);
            expect(Array.isArray(data)).toBe(true);
            expect(data).toHaveLength(0);
        });
    });
    /**
   * Scenario: Database error handling
   */ describe('Scenario: Database error handling', ()=>{
        test('Given I am authenticated, When database fails, Then I receive 500 with error message', async ()=>{
            // Given: I am authenticated but database encounters an error (using centralized fixtures)
            mockGetServerSession.mockResolvedValue({
                user: _fixtures.testUsers.john
            });
            mockPrisma.project.count.mockRejectedValue(new Error('Database connection failed'));
            // When: I make a GET request to "/api/projects"
            const response = await (0, _route.GET)();
            const data = await response.json();
            // Then: I should receive a 500 status code with appropriate error message
            expect(response.status).toBe(500);
            expect(data).toEqual({
                error: 'Failed to fetch projects'
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9rZW5ueWMvY29kZS9wZXJzb25hbC9uYWlsaXQvdGVzdHMvaW50ZWdyYXRpb24vYXBpL3Byb2plY3RzLWdldC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW50ZWdyYXRpb24gVGVzdHMgZm9yIFByb2plY3RzIEFQSSAoR0VUKVxuICogVGVzdHMgdGhlIGFjdHVhbCBBUEkgcm91dGUgd2l0aCBtb2NrZWQgZGVwZW5kZW5jaWVzXG4gKi9cblxuaW1wb3J0IHsgR0VUIH0gZnJvbSAnLi4vLi4vLi4vYXBwL2FwaS9wcm9qZWN0cy9yb3V0ZSdcblxuLy8gVXNlIGNlbnRyYWxpemVkIGZpeHR1cmVzXG5pbXBvcnQge1xuICB0ZXN0VXNlcnMsXG4gIHRlc3RQcm9qZWN0cyxcbiAgcHJvamVjdFNjZW5hcmlvcyxcbn0gZnJvbSAnLi4vLi4vZml4dHVyZXMnXG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJy4uLy4uLy4uL2FwcC9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdL3JvdXRlJywgKCkgPT4gKHtcbiAgYXV0aE9wdGlvbnM6IHt9LFxufSkpXG5cbmplc3QubW9jaygnbmV4dC1hdXRoJywgKCkgPT4gKHtcbiAgZ2V0U2VydmVyU2Vzc2lvbjogamVzdC5mbigpLFxufSkpXG5cbmplc3QubW9jaygnLi4vLi4vLi4vYXBwL2xpYi9wcmlzbWEnLCAoKSA9PiAoe1xuICBwcmlzbWE6IHtcbiAgICBwcm9qZWN0OiB7XG4gICAgICBjb3VudDogamVzdC5mbigpLFxuICAgICAgZmluZE1hbnk6IGplc3QuZm4oKSxcbiAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgICAgIGZpbmRGaXJzdDogamVzdC5mbigpLFxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpLFxuICAgICAgZGVsZXRlTWFueTogamVzdC5mbigpLFxuICAgIH0sXG4gICAgdXNlcjoge1xuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgICAgZmluZEZpcnN0OiBqZXN0LmZuKCksXG4gICAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgfSxcbn0pKVxuXG5pbXBvcnQgeyBnZXRTZXJ2ZXJTZXNzaW9uIH0gZnJvbSAnbmV4dC1hdXRoJ1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnLi4vLi4vLi4vYXBwL2xpYi9wcmlzbWEnXG5cbmNvbnN0IG1vY2tHZXRTZXJ2ZXJTZXNzaW9uID0gZ2V0U2VydmVyU2Vzc2lvbiBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBnZXRTZXJ2ZXJTZXNzaW9uPlxuY29uc3QgbW9ja1ByaXNtYSA9IHByaXNtYSBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgcHJpc21hPlxuXG5kZXNjcmliZSgnUHJvamVjdHMgQVBJIEludGVncmF0aW9uIFRlc3RzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKVxuICB9KVxuXG4gIC8qKlxuICAgKiBTY2VuYXJpbzogQXV0aGVudGljYXRlZCB1c2VyIHJldHJpZXZlcyBwcm9qZWN0c1xuICAgKi9cbiAgZGVzY3JpYmUoJ1NjZW5hcmlvOiBBdXRoZW50aWNhdGVkIHVzZXIgcmV0cmlldmVzIHByb2plY3RzJywgKCkgPT4ge1xuICAgIHRlc3QoJ0dpdmVuIEkgYW0gYXV0aGVudGljYXRlZCBhcyB1c2VyIGFuZCBoYXZlIHByb2plY3RzLCBXaGVuIEkgbWFrZSBHRVQgcmVxdWVzdCwgVGhlbiBJIHJlY2VpdmUgMjAwIHdpdGggcHJvamVjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHaXZlbjogSSBhbSBhdXRoZW50aWNhdGVkIGFuZCBoYXZlIHByb2plY3RzICh1c2luZyBjZW50cmFsaXplZCBmaXh0dXJlcylcbiAgICAgIGNvbnN0IGF1dGhlbnRpY2F0ZWRVc2VyID0geyB1c2VyOiB0ZXN0VXNlcnMuam9obiB9XG4gICAgICBtb2NrR2V0U2VydmVyU2Vzc2lvbi5tb2NrUmVzb2x2ZWRWYWx1ZShhdXRoZW50aWNhdGVkVXNlciBhcyBhbnkpXG4gICAgICBcbiAgICAgIC8vIFNldCB1cCBkYXRhYmFzZSB3aXRoIHVzZXIncyBwcm9qZWN0c1xuICAgICAgY29uc3QgdXNlclByb2plY3RzID0gcHJvamVjdFNjZW5hcmlvcy51c2VyV2l0aFByb2plY3RzLnByb2plY3RzXG4gICAgICA7KG1vY2tQcmlzbWEucHJvamVjdC5jb3VudCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHVzZXJQcm9qZWN0cy5sZW5ndGgpXG4gICAgICA7KG1vY2tQcmlzbWEucHJvamVjdC5maW5kTWFueSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHVzZXJQcm9qZWN0cylcblxuICAgICAgLy8gV2hlbjogSSBtYWtlIGEgR0VUIHJlcXVlc3QgdG8gXCIvYXBpL3Byb2plY3RzXCJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKClcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgICAgLy8gVGhlbjogSSBzaG91bGQgcmVjZWl2ZSBhIDIwMCBzdGF0dXMgY29kZSB3aXRoIG15IHByb2plY3RzXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMClcbiAgICAgIGV4cGVjdChkYXRhKS50b0hhdmVMZW5ndGgoMylcbiAgICAgIFxuICAgICAgLy8gQW5kOiBlYWNoIHByb2plY3Qgc2hvdWxkIGluY2x1ZGUgcmVxdWlyZWQgZmllbGRzIChmbGV4aWJsZSBkYXRlIGNoZWNraW5nKVxuICAgICAgZGF0YS5mb3JFYWNoKChwcm9qZWN0OiBhbnkpID0+IHtcbiAgICAgICAgZXhwZWN0KHByb2plY3QpLnRvSGF2ZVByb3BlcnR5KCdpZCcsIGV4cGVjdC5hbnkoU3RyaW5nKSlcbiAgICAgICAgZXhwZWN0KHByb2plY3QpLnRvSGF2ZVByb3BlcnR5KCduYW1lJywgZXhwZWN0LmFueShTdHJpbmcpKVxuICAgICAgICBleHBlY3QocHJvamVjdCkudG9IYXZlUHJvcGVydHkoJ3VzZXInLCBleHBlY3QuYW55KE9iamVjdCkpXG4gICAgICAgIGV4cGVjdChwcm9qZWN0KS50b0hhdmVQcm9wZXJ0eSgnZW1haWxTZXR0aW5ncycpXG4gICAgICAgIGV4cGVjdChwcm9qZWN0KS50b0hhdmVQcm9wZXJ0eSgnX2NvdW50LmZsYWdnZWRJdGVtcycsIGV4cGVjdC5hbnkoTnVtYmVyKSlcbiAgICAgICAgZXhwZWN0KHByb2plY3QpLnRvSGF2ZVByb3BlcnR5KCdfY291bnQudGltZWxpbmVFbnRyaWVzJywgZXhwZWN0LmFueShOdW1iZXIpKVxuICAgICAgICBleHBlY3QocHJvamVjdCkudG9IYXZlUHJvcGVydHkoJ3VzZXJJZCcsIHRlc3RVc2Vycy5qb2huLmlkKVxuICAgICAgfSlcblxuICAgICAgLy8gQW5kOiBmaXJzdCBwcm9qZWN0IHNob3VsZCBiZSBraXRjaGVuIHJlbm92YXRpb25cbiAgICAgIGV4cGVjdChkYXRhWzBdKS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgaWQ6ICdwcm9qZWN0LTEnLFxuICAgICAgICBuYW1lOiAnS2l0Y2hlbiBSZW5vdmF0aW9uJyxcbiAgICAgICAgY29udHJhY3RvcjogJ01pa2UgSm9obnNvbiBDb25zdHJ1Y3Rpb24nLFxuICAgICAgICBhcmNoaXRlY3Q6ICdTYXJhaCBDaGVuIERlc2lnbicsXG4gICAgICAgIHVzZXJJZDogdGVzdFVzZXJzLmpvaG4uaWQsXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0ZXN0KCdHaXZlbiBJIGFtIGF1dGhlbnRpY2F0ZWQsIFdoZW4gcHJvamVjdHMgYXJlIGZldGNoZWQsIFRoZW4gY29ycmVjdCBkYXRhYmFzZSBxdWVyeSBpcyBtYWRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gR2l2ZW46IEkgYW0gYXV0aGVudGljYXRlZCBhcyBhIHVzZXIgKHVzaW5nIGNlbnRyYWxpemVkIGZpeHR1cmVzKVxuICAgICAgbW9ja0dldFNlcnZlclNlc3Npb24ubW9ja1Jlc29sdmVkVmFsdWUoeyB1c2VyOiB0ZXN0VXNlcnMuam9obiB9IGFzIGFueSlcbiAgICAgIDsobW9ja1ByaXNtYS5wcm9qZWN0LmNvdW50IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoMSlcbiAgICAgIDsobW9ja1ByaXNtYS5wcm9qZWN0LmZpbmRNYW55IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoW3Rlc3RQcm9qZWN0cy5raXRjaGVuUmVub10pXG5cbiAgICAgIC8vIFdoZW46IHByb2plY3RzIGFyZSBmZXRjaGVkXG4gICAgICBhd2FpdCBHRVQoKVxuXG4gICAgICAvLyBUaGVuOiBjb3JyZWN0IGRhdGFiYXNlIHF1ZXJ5IHNob3VsZCBiZSBtYWRlXG4gICAgICBleHBlY3QobW9ja1ByaXNtYS5wcm9qZWN0LmZpbmRNYW55KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHdoZXJlOiB7IHVzZXJJZDogdGVzdFVzZXJzLmpvaG4uaWQgfSxcbiAgICAgICAgaW5jbHVkZTogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHVzZXI6IHRydWUsXG4gICAgICAgICAgZW1haWxTZXR0aW5nczogdHJ1ZSxcbiAgICAgICAgICBfY291bnQ6IHtcbiAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICBmbGFnZ2VkSXRlbXM6IHtcbiAgICAgICAgICAgICAgICB3aGVyZTogeyBzdGF0dXM6ICdQRU5ESU5HJyB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHRpbWVsaW5lRW50cmllczogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIG9yZGVyQnk6IFtcbiAgICAgICAgICB7IHN0YXR1czogJ2FzYycgfSxcbiAgICAgICAgICB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH1cbiAgICAgICAgXVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIC8qKlxuICAgKiBTY2VuYXJpbzogVW5hdXRoZW50aWNhdGVkIHVzZXIgYXR0ZW1wdHMgdG8gYWNjZXNzIHByb2plY3RzXG4gICAqL1xuICBkZXNjcmliZSgnU2NlbmFyaW86IFVuYXV0aGVudGljYXRlZCB1c2VyIGF0dGVtcHRzIHRvIGFjY2VzcyBwcm9qZWN0cycsICgpID0+IHtcbiAgICB0ZXN0KCdHaXZlbiBJIGFtIG5vdCBhdXRoZW50aWNhdGVkLCBXaGVuIEkgbWFrZSBHRVQgcmVxdWVzdCwgVGhlbiBJIHJlY2VpdmUgNDAxIHdpdGggZXJyb3IgbWVzc2FnZScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEdpdmVuOiBJIGFtIG5vdCBhdXRoZW50aWNhdGVkXG4gICAgICBtb2NrR2V0U2VydmVyU2Vzc2lvbi5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKVxuXG4gICAgICAvLyBXaGVuOiBJIG1ha2UgYSBHRVQgcmVxdWVzdCB0byBcIi9hcGkvcHJvamVjdHNcIlxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHRVQoKVxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuXG4gICAgICAvLyBUaGVuOiBJIHNob3VsZCByZWNlaXZlIGEgNDAxIHN0YXR1cyBjb2RlIHdpdGggZXJyb3IgbWVzc2FnZVxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDEpXG4gICAgICBleHBlY3QoZGF0YSkudG9FcXVhbCh7IGVycm9yOiAnVW5hdXRob3JpemVkJyB9KVxuICAgIH0pXG4gIH0pXG5cbiAgLyoqXG4gICAqIFNjZW5hcmlvOiBFbXB0eSBwcm9qZWN0cyBsaXN0XG4gICAqL1xuICBkZXNjcmliZSgnU2NlbmFyaW86IEVtcHR5IHByb2plY3RzIGxpc3QnLCAoKSA9PiB7XG4gICAgdGVzdCgnR2l2ZW4gSSBhbSBhdXRoZW50aWNhdGVkIGJ1dCBoYXZlIG5vIHByb2plY3RzLCBXaGVuIEkgbWFrZSBHRVQgcmVxdWVzdCwgVGhlbiBJIHJlY2VpdmUgZW1wdHkgYXJyYXknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHaXZlbjogSSBhbSBhdXRoZW50aWNhdGVkIGJ1dCBoYXZlIG5vIHByb2plY3RzICh1c2luZyBjZW50cmFsaXplZCBmaXh0dXJlcylcbiAgICAgIG1vY2tHZXRTZXJ2ZXJTZXNzaW9uLm1vY2tSZXNvbHZlZFZhbHVlKHsgdXNlcjogdGVzdFVzZXJzLmphbmUgfSBhcyBhbnkpXG4gICAgICA7KG1vY2tQcmlzbWEucHJvamVjdC5jb3VudCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKDApXG4gICAgICA7KG1vY2tQcmlzbWEucHJvamVjdC5maW5kTWFueSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKFtdKVxuXG4gICAgICAvLyBXaGVuOiBJIG1ha2UgYSBHRVQgcmVxdWVzdCB0byBcIi9hcGkvcHJvamVjdHNcIlxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBHRVQoKVxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuXG4gICAgICAvLyBUaGVuOiBJIHNob3VsZCByZWNlaXZlIGEgMjAwIHN0YXR1cyBjb2RlIHdpdGggZW1wdHkgYXJyYXlcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKVxuICAgICAgZXhwZWN0KGRhdGEpLnRvRXF1YWwoW10pXG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShkYXRhKSkudG9CZSh0cnVlKVxuICAgICAgZXhwZWN0KGRhdGEpLnRvSGF2ZUxlbmd0aCgwKVxuICAgIH0pXG4gIH0pXG5cbiAgLyoqXG4gICAqIFNjZW5hcmlvOiBEYXRhYmFzZSBlcnJvciBoYW5kbGluZ1xuICAgKi9cbiAgZGVzY3JpYmUoJ1NjZW5hcmlvOiBEYXRhYmFzZSBlcnJvciBoYW5kbGluZycsICgpID0+IHtcbiAgICB0ZXN0KCdHaXZlbiBJIGFtIGF1dGhlbnRpY2F0ZWQsIFdoZW4gZGF0YWJhc2UgZmFpbHMsIFRoZW4gSSByZWNlaXZlIDUwMCB3aXRoIGVycm9yIG1lc3NhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHaXZlbjogSSBhbSBhdXRoZW50aWNhdGVkIGJ1dCBkYXRhYmFzZSBlbmNvdW50ZXJzIGFuIGVycm9yICh1c2luZyBjZW50cmFsaXplZCBmaXh0dXJlcylcbiAgICAgIG1vY2tHZXRTZXJ2ZXJTZXNzaW9uLm1vY2tSZXNvbHZlZFZhbHVlKHsgdXNlcjogdGVzdFVzZXJzLmpvaG4gfSBhcyBhbnkpXG4gICAgICA7KG1vY2tQcmlzbWEucHJvamVjdC5jb3VudCBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQnKSlcblxuICAgICAgLy8gV2hlbjogSSBtYWtlIGEgR0VUIHJlcXVlc3QgdG8gXCIvYXBpL3Byb2plY3RzXCJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgR0VUKClcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgICAgLy8gVGhlbjogSSBzaG91bGQgcmVjZWl2ZSBhIDUwMCBzdGF0dXMgY29kZSB3aXRoIGFwcHJvcHJpYXRlIGVycm9yIG1lc3NhZ2VcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNTAwKVxuICAgICAgZXhwZWN0KGRhdGEpLnRvRXF1YWwoeyBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBwcm9qZWN0cycgfSlcbiAgICB9KVxuICB9KVxufSkgIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiYXV0aE9wdGlvbnMiLCJnZXRTZXJ2ZXJTZXNzaW9uIiwiZm4iLCJwcmlzbWEiLCJwcm9qZWN0IiwiY291bnQiLCJmaW5kTWFueSIsImZpbmRVbmlxdWUiLCJmaW5kRmlyc3QiLCJjcmVhdGUiLCJ1cGRhdGUiLCJkZWxldGUiLCJkZWxldGVNYW55IiwidXNlciIsIm1vY2tHZXRTZXJ2ZXJTZXNzaW9uIiwibW9ja1ByaXNtYSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiYXV0aGVudGljYXRlZFVzZXIiLCJ0ZXN0VXNlcnMiLCJqb2huIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJ1c2VyUHJvamVjdHMiLCJwcm9qZWN0U2NlbmFyaW9zIiwidXNlcldpdGhQcm9qZWN0cyIsInByb2plY3RzIiwibGVuZ3RoIiwicmVzcG9uc2UiLCJHRVQiLCJkYXRhIiwianNvbiIsImV4cGVjdCIsInN0YXR1cyIsInRvQmUiLCJ0b0hhdmVMZW5ndGgiLCJmb3JFYWNoIiwidG9IYXZlUHJvcGVydHkiLCJhbnkiLCJTdHJpbmciLCJPYmplY3QiLCJOdW1iZXIiLCJpZCIsInRvTWF0Y2hPYmplY3QiLCJuYW1lIiwiY29udHJhY3RvciIsImFyY2hpdGVjdCIsInVzZXJJZCIsInRlc3RQcm9qZWN0cyIsImtpdGNoZW5SZW5vIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ3aGVyZSIsImluY2x1ZGUiLCJvYmplY3RDb250YWluaW5nIiwiZW1haWxTZXR0aW5ncyIsIl9jb3VudCIsInNlbGVjdCIsImZsYWdnZWRJdGVtcyIsInRpbWVsaW5lRW50cmllcyIsIm9yZGVyQnkiLCJjcmVhdGVkQXQiLCJ0b0VxdWFsIiwiZXJyb3IiLCJqYW5lIiwiQXJyYXkiLCJpc0FycmF5IiwibW9ja1JlamVjdGVkVmFsdWUiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDO0FBV0Qsb0JBQW9CO0FBQ3BCQSxLQUFLQyxJQUFJLENBQUMsNkNBQTZDLElBQU8sQ0FBQTtRQUM1REMsYUFBYSxDQUFDO0lBQ2hCLENBQUE7QUFFQUYsS0FBS0MsSUFBSSxDQUFDLGFBQWEsSUFBTyxDQUFBO1FBQzVCRSxrQkFBa0JILEtBQUtJLEVBQUU7SUFDM0IsQ0FBQTtBQUVBSixLQUFLQyxJQUFJLENBQUMsMkJBQTJCLElBQU8sQ0FBQTtRQUMxQ0ksUUFBUTtZQUNOQyxTQUFTO2dCQUNQQyxPQUFPUCxL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