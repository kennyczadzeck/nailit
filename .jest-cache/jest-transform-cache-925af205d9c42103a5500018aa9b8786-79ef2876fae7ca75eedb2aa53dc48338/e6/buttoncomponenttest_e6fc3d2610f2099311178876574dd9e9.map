{"version":3,"sources":["/Users/kennyc/code/personal/nailit/tests/bdd/features/button-component.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { Button } from '../../../app/components/ui/Button'\n\n/**\n * Feature: Button Component\n * User Story: US-07\n * \n * As a user (including those using assistive technologies)\n * I want consistent, accessible button interactions\n * So that I can navigate and use the application effectively\n */\ndescribe('Feature: Button Component', () => {\n  \n  /**\n   * Scenario: Button renders with default styling\n   */\n  describe('Scenario: Button renders with default styling', () => {\n    test('Given I am viewing a page with default button, When rendered, Then it has primary styling and accessibility', () => {\n      // Given: I am viewing a page with a default button\n      // When: the button is rendered\n      render(<Button>Click me</Button>)\n      \n      const button = screen.getByRole('button', { name: /click me/i })\n      \n      // Then: it should have the primary green color (#34A853)\n      expect(button).toHaveClass('bg-[#34A853]')\n      \n      // And: it should have medium padding (px-4 py-2)\n      expect(button).toHaveClass('px-4', 'py-2')\n      \n      // And: it should have proper focus states for accessibility\n      expect(button).toHaveClass('focus:outline-none', 'focus:ring-2', 'focus:ring-offset-2')\n      \n      // And: it should be in the document\n      expect(button).toBeInTheDocument()\n    })\n  })\n\n  /**\n   * Scenario: Button variants display correctly\n   */\n  describe('Scenario: Button variants display correctly', () => {\n    test('Given I have different button variants, When I view each variant, Then each has correct styling', () => {\n      const { rerender } = render(<Button variant=\"secondary\">Secondary</Button>)\n      \n      // When: I view a \"secondary\" button\n      // Then: it should have blue color (#1A73E8)\n      expect(screen.getByRole('button')).toHaveClass('bg-[#1A73E8]')\n\n      // When: I view an \"outline\" button\n      rerender(<Button variant=\"outline\">Outline</Button>)\n      // Then: it should have a border with transparent background\n      expect(screen.getByRole('button')).toHaveClass('border', 'border-gray-300')\n\n      // When: I view a \"ghost\" button\n      rerender(<Button variant=\"ghost\">Ghost</Button>)\n      // Then: it should have transparent background with gray text\n      expect(screen.getByRole('button')).toHaveClass('text-gray-700', 'hover:bg-gray-100')\n    })\n\n    test('Given different button sizes, When rendered, Then each has correct padding', () => {\n      const { rerender } = render(<Button size=\"sm\">Small</Button>)\n      \n      // When: I view a small button\n      // Then: it should have small padding\n      expect(screen.getByRole('button')).toHaveClass('px-3', 'py-1.5', 'text-sm')\n\n      // When: I view a large button\n      rerender(<Button size=\"lg\">Large</Button>)\n      // Then: it should have large padding\n      expect(screen.getByRole('button')).toHaveClass('px-6', 'py-3', 'text-base')\n    })\n  })\n\n  /**\n   * Scenario: Button accessibility features\n   */\n  describe('Scenario: Button accessibility features', () => {\n    test('Given I am using assistive technology, When I interact with button, Then it supports keyboard navigation', () => {\n      // Given: I am using a screen reader\n      render(<Button>Accessible Button</Button>)\n      \n      const button = screen.getByRole('button')\n      \n      // When: I navigate to a button\n      // Then: the button should be accessible as a button element\n      expect(button.tagName).toBe('BUTTON')\n      \n      // And: it should have a visible focus indicator\n      expect(button).toHaveClass('focus:outline-none', 'focus:ring-2', 'focus:ring-offset-2')\n      \n      // Note: Testing Enter/Space key activation would require more complex setup\n      // This validates the button is properly accessible to screen readers\n    })\n\n    test('Given I use custom attributes, When button is rendered, Then attributes are preserved', () => {\n      // Given: I have a button with custom attributes\n      // When: button is rendered\n      render(<Button disabled type=\"submit\" data-testid=\"submit-btn\">Submit</Button>)\n      \n      const button = screen.getByTestId('submit-btn')\n      \n      // Then: custom attributes should be preserved\n      expect(button).toHaveAttribute('type', 'submit')\n      expect(button).toHaveAttribute('data-testid', 'submit-btn')\n    })\n  })\n\n  /**\n   * Scenario: Disabled button behavior\n   */\n  describe('Scenario: Disabled button behavior', () => {\n    test('Given I have a disabled button, When I try to interact, Then no action occurs and styling indicates disabled state', () => {\n      const handleClick = jest.fn()\n      \n      // Given: I have a disabled button\n      render(<Button disabled onClick={handleClick}>Disabled</Button>)\n      \n      const button = screen.getByRole('button')\n      \n      // When: I try to click it\n      fireEvent.click(button)\n      \n      // Then: no action should be triggered\n      expect(handleClick).not.toHaveBeenCalled()\n      \n      // And: it should have visual indicators that it's disabled\n      expect(button).toBeDisabled()\n      expect(button).toHaveClass('disabled:opacity-50', 'disabled:pointer-events-none')\n      \n      // And: it should not be focusable via keyboard navigation\n      // (This is handled automatically by the disabled attribute)\n    })\n  })\n\n  /**\n   * Scenario: Button click interactions\n   */\n  describe('Scenario: Button click interactions', () => {\n    test('Given I have an enabled button with click handler, When I click it, Then the handler is called', () => {\n      const handleClick = jest.fn()\n      \n      // Given: I have an enabled button with click handler\n      render(<Button onClick={handleClick}>Clickable</Button>)\n      \n      // When: I click the button\n      fireEvent.click(screen.getByRole('button'))\n      \n      // Then: the handler should be called\n      expect(handleClick).toHaveBeenCalledTimes(1)\n    })\n\n    test('Given I have a button with custom styling, When rendered, Then custom classes are applied', () => {\n      // Given: I have a button with custom styling\n      // When: the button is rendered\n      render(<Button className=\"custom-class\">Custom</Button>)\n      \n      // Then: custom classes should be applied\n      expect(screen.getByRole('button')).toHaveClass('custom-class')\n      \n      // And: default classes should still be present\n      expect(screen.getByRole('button')).toHaveClass('bg-[#34A853]') // primary variant default\n    })\n  })\n}) "],"names":["describe","test","render","Button","button","screen","getByRole","name","expect","toHaveClass","toBeInTheDocument","rerender","variant","size","tagName","toBe","disabled","type","data-testid","getByTestId","toHaveAttribute","handleClick","jest","fn","onClick","fireEvent","click","not","toHaveBeenCalled","toBeDisabled","toHaveBeenCalledTimes","className"],"mappings":"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"}