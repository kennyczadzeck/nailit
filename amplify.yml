version: 1
frontend:
  phases:
    preBuild:
      commands:
        - echo "Environment variables check..."
        - echo "DATABASE_URL exists:" $DATABASE_URL
        - echo "DATABASE_MIGRATION_URL exists:" $DATABASE_URL
        - echo "NEXTAUTH_URL exists:" $NEXTAUTH_URL
        - |
          if [[ "$DATABASE_URL" == *"misty-frog"* ]]; then
            echo "🚀 PRODUCTION ENVIRONMENT - Formal migration workflow"
            export ENVIRONMENT="production"
          elif [[ "$DATABASE_URL" == *"raspy-sound"* ]]; then
            echo "🧪 STAGING ENVIRONMENT - Formal migration workflow"
            export ENVIRONMENT="staging"
          elif [[ "$DATABASE_URL" == *"still-paper"* ]]; then
            echo "🛠️ DEVELOPMENT ENVIRONMENT - Rapid iteration workflow"
            export ENVIRONMENT="development"
          else
            echo "❓ UNKNOWN ENVIRONMENT - Defaulting to production workflow"
            export ENVIRONMENT="production"
          fi
        - npm install --legacy-peer-deps
        - echo "Running schema drift check..."
        - npx prisma migrate diff --from-migrations ./prisma/migrations --to-schema-datamodel ./prisma/schema.prisma --shadow-database-url "$DATABASE_URL" --exit-code
        - |
          if [[ "$ENVIRONMENT" == "development" ]]; then
            echo "Pushing schema changes to development database..."
            npx prisma db push --accept-data-loss
          else
            echo "Running Prisma migrations ($ENVIRONMENT)..."
            npx prisma migrate deploy
          fi
        - echo "Generating Prisma client..."
        - npx prisma generate
    build:
      commands:
        - echo "Injecting environment variables for Next.js runtime..."
        - env | grep -e NAILIT_ENVIRONMENT >> .env.production || echo "NAILIT_ENVIRONMENT not set"
        - env | grep -e NAILIT_AWS_REGION >> .env.production || echo "NAILIT_AWS_REGION not set"  
        - env | grep -e NAILIT_IAM_ACCESS_KEY_ID >> .env.production || echo "NAILIT_IAM_ACCESS_KEY_ID not set"
        - env | grep -e NAILIT_IAM_ACCESS_KEY_SECRET >> .env.production || echo "NAILIT_IAM_ACCESS_KEY_SECRET not set"
        - env | grep -e LOG_LEVEL >> .env.production || echo "LOG_LEVEL not set"
        - env | grep -e DISABLE_CLOUDWATCH_LOGS >> .env.production || echo "DISABLE_CLOUDWATCH_LOGS not set"
        - echo "Contents of .env.production:"
        - cat .env.production || echo "No .env.production file created"
        - echo "=== BUILDING NEXT.JS APPLICATION ==="
        - npm run build
        - echo "=== ULTRA-SELECTIVE DEPLOYMENT ==="
        - echo "Creating minimal deployment with only essential files..."
        - rm -rf ./deploy
        - mkdir -p ./deploy/.next
        - echo "Copying essential Next.js manifest files to deployment root..."
        - cp .next/required-server-files.json ./deploy/
        - cp .next/BUILD_ID ./deploy/
        - cp .next/prerender-manifest.json ./deploy/ 2>/dev/null || echo "No prerender-manifest"
        - cp .next/routes-manifest.json ./deploy/ 2>/dev/null || echo "No routes-manifest"
        - cp .next/build-manifest.json ./deploy/ 2>/dev/null || echo "No build-manifest"
        - echo "Copying essential .next runtime directories..."
        - cp -r .next/server ./deploy/.next/
        - cp -r .next/static ./deploy/.next/
        - echo "Copying essential .next files..."
        - cp .next/BUILD_ID ./deploy/.next/
        - cp .next/*.json ./deploy/.next/ 2>/dev/null || echo "No JSON files"
        - echo "Copying public assets..."
        - cp -r public ./deploy/ 2>/dev/null || echo "No public directory"
        - echo "Creating minimal package.json..."
        - echo '{"name":"nailit","type":"module"}' > ./deploy/package.json
        - echo "=== AGGRESSIVE CLEANUP ==="
        - echo "Removing all unnecessary files from deployment..."
        - find ./deploy -name "*.map" -delete 2>/dev/null || echo "No source maps"
        - find ./deploy -name "*.txt" -delete 2>/dev/null || echo "No txt files"
        - find ./deploy -name "cache" -type d -exec rm -rf {} + 2>/dev/null || echo "No cache dirs"
        - find ./deploy -name "trace" -type d -exec rm -rf {} + 2>/dev/null || echo "No trace dirs"
        - echo "=== FINAL VERIFICATION ==="
        - echo "Deployment structure:"
        - ls -la ./deploy
        - echo "Essential files check:"
        - ls -la ./deploy/required-server-files.json || echo "⚠️ required-server-files.json missing"
        - ls -la ./deploy/BUILD_ID || echo "⚠️ BUILD_ID missing"
        - echo "Server files check:"
        - ls -la ./deploy/.next/server/ | head -5 || echo "⚠️ server files missing"
        - echo "Static files check:"
        - ls -la ./deploy/.next/static/ | head -5 || echo "⚠️ static files missing"
        - echo "Total deployment size:"
        - du -sh ./deploy
        - echo "Size breakdown:"
        - du -sh ./deploy/* 2>/dev/null || echo "No subdirectories"
  artifacts:
    baseDirectory: deploy
    files:
      - '**/*' 