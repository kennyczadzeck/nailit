'use client';

import React, { useState } from 'react';
import { Button } from './ui/Button';
import { Card, CardHeader, CardTitle, CardContent } from './ui/Card';
import { 
  XMarkIcon,
  EnvelopeIcon,
  CurrencyDollarIcon,
  ClockIcon,
  DocumentTextIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  PaperAirplaneIcon
} from '@heroicons/react/24/outline';

interface FlaggedItem {
  id: string;
  category: 'cost' | 'schedule' | 'scope' | 'unclassified';
  title: string;
  description: string;
  impact: string;
  date: string;
  time: string;
  emailFrom: string;
  project: string;
  originalEmail?: string;
  detectedChanges?: string[];
  needsEmailResponse?: boolean;
  aiConfidence?: number; // 0-1 confidence score
}

interface FlaggedItemModalProps {
  item: FlaggedItem | null;
  isOpen: boolean;
  onClose: () => void;
  onAction: (id: string, action: 'confirm' | 'ignore' | 'email_sent') => void;
  onReclassify: (id: string, newCategory: 'cost' | 'schedule' | 'scope') => void;
  isProjectArchived?: boolean;
}

export const FlaggedItemModal: React.FC<FlaggedItemModalProps> = ({
  item,
  isOpen,
  onClose,
  onAction,
  onReclassify,
  isProjectArchived = false
}) => {
  const [confirmationEmail, setConfirmationEmail] = useState('');
  const [showEmailPreview, setShowEmailPreview] = useState(false);
  const [showReclassifyForm, setShowReclassifyForm] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<'cost' | 'schedule' | 'scope'>('cost');

  if (!isOpen || !item) return null;

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'cost':
        return CurrencyDollarIcon;
      case 'schedule':
        return ClockIcon;
      case 'scope':
        return DocumentTextIcon;
      case 'unclassified':
        return ExclamationTriangleIcon;
      default:
        return ExclamationTriangleIcon;
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'cost':
        return 'text-red-600 bg-red-100';
      case 'schedule':
        return 'text-blue-600 bg-blue-100';
      case 'scope':
        return 'text-yellow-600 bg-yellow-100';
      case 'unclassified':
        return 'text-gray-600 bg-gray-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const getCategoryLabel = (category: string) => {
    switch (category) {
      case 'cost':
        return 'Cost Impact';
      case 'schedule':
        return 'Schedule Impact';
      case 'scope':
        return 'Scope Impact';
      case 'unclassified':
        return 'Needs Classification';
      default:
        return 'Unknown';
    }
  };

  const generateConfirmationEmail = () => {
    const template = `Subject: Confirmation Required: ${item.title}

Dear ${item.emailFrom.split('@')[0]},

I hope this email finds you well. I'm writing regarding a project update that was mentioned in our recent communication.

**Details:**
- Category: ${getCategoryLabel(item.category)}
- Description: ${item.description}
- Impact: ${item.impact}
- Date Mentioned: ${item.date}

**Confirmation Request:**
Please provide additional details so we can properly document this update:

Please provide:
${item.category === 'cost' ? '1. Cost details and breakdown\n2. Relation to original budget' : ''}
${item.category === 'schedule' ? '1. Timeline details\n2. Relation to project schedule' : ''}
${item.category === 'scope' ? '1. Scope details\n2. Relation to original scope' : ''}

Please reply to this email with the requested information.

Thank you for your attention to this matter.

Best regards,
[Your Name]

---
This email was generated by NailIt to help maintain clear project communication.`;

    setConfirmationEmail(template);
    setShowEmailPreview(true);
  };

  const handleSendEmail = () => {
    // TODO: Implement email sending in Phase 5
    onAction(item.id, 'email_sent');
    setShowEmailPreview(false);
  };

  const handleReclassify = () => {
    onReclassify(item.id, selectedCategory);
    setShowReclassifyForm(false);
  };

  const CategoryIcon = getCategoryIcon(item.category);
  const isUnclassified = item.category === 'unclassified';
  const hasLowConfidence = (item.aiConfidence !== undefined && item.aiConfidence < 0.7);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex justify-between items-start p-6 border-b border-gray-200">
          <div className="flex items-start gap-4">
            <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${getCategoryColor(item.category)}`}>
              <CategoryIcon className="w-6 h-6" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">{item.title}</h2>
              <div className="flex items-center gap-4 mt-1 text-sm text-gray-600">
                <span>From: {item.emailFrom}</span>
                <span>•</span>
                <span>{item.date} {item.time}</span>
                <span>•</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(item.category)}`}>
                  {getCategoryLabel(item.category)}
                </span>
                {(isUnclassified || hasLowConfidence) && !isProjectArchived && (
                  <button
                    onClick={() => setShowReclassifyForm(true)}
                    className="px-3 py-1.5 rounded-md text-sm font-medium bg-orange-500 text-white hover:bg-orange-600 transition-colors"
                  >
                    {isUnclassified ? 'Classify Now' : 'Reclassify'}
                  </button>
                )}
              </div>
            </div>
          </div>
          <Button variant="outline" size="sm" onClick={onClose}>
            <XMarkIcon className="w-4 h-4" />
          </Button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* AI Confidence Warning */}
          {(isUnclassified || hasLowConfidence) && (
            <Card className="bg-orange-50 border-orange-200">
              <CardContent className="p-4">
                <div className="flex items-start gap-3">
                  <ExclamationTriangleIcon className="w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5" />
                  <div>
                    <h4 className="text-sm font-medium text-orange-800 mb-1">
                      {isUnclassified ? 'Classification Needed' : 'Low AI Confidence'}
                    </h4>
                    <p className="text-sm text-orange-700">
                      {isUnclassified 
                        ? 'AI detected an important project impact but couldn\'t classify it. Please review and categorize.'
                        : `AI is ${Math.round((item.aiConfidence || 0) * 100)}% confident in this classification. Please verify if the category is correct.`
                      }
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Classification Form */}
          {showReclassifyForm && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <DocumentTextIcon className="w-5 h-5" />
                  {isUnclassified ? 'Classify Item' : 'Reclassify Item'}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Select the correct category:
                    </label>
                    <div className="grid grid-cols-3 gap-3">
                      {(['cost', 'schedule', 'scope'] as const).map((category) => {
                        const Icon = getCategoryIcon(category);
                        return (
                          <button
                            key={category}
                            onClick={() => setSelectedCategory(category)}
                            className={`p-3 rounded-lg border-2 transition-colors ${
                              selectedCategory === category
                                ? 'border-[#34A853] bg-green-50'
                                : 'border-gray-200 hover:border-gray-300'
                            }`}
                          >
                            <div className="flex flex-col items-center gap-2">
                              <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${getCategoryColor(category)}`}>
                                <Icon className="w-5 h-5" />
                              </div>
                              <span className="text-sm font-medium text-gray-900 capitalize">
                                {category}
                              </span>
                            </div>
                          </button>
                        );
                      })}
                    </div>
                  </div>
                  <div className="flex justify-end gap-2">
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => setShowReclassifyForm(false)}
                    >
                      Cancel
                    </Button>
                    <Button 
                      size="sm"
                      onClick={handleReclassify}
                      className="flex items-center gap-2"
                    >
                      <CheckCircleIcon className="w-4 h-4" />
                      {isUnclassified ? 'Classify' : 'Reclassify'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Change Summary */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ExclamationTriangleIcon className="w-5 h-5 text-orange-500" />
                Detected Change
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-700 mb-4">{item.description}</p>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Category</label>
                  <p className="text-sm text-gray-900">{getCategoryLabel(item.category)}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Impact</label>
                  <p className="text-sm text-gray-900">{item.impact}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">Project</label>
                  <p className="text-sm text-gray-900">{item.project}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* AI Analysis */}
          <Card>
            <CardHeader>
              <CardTitle>AI Analysis</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Detected Changes:</h4>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    {item.detectedChanges?.map((change, index) => (
                      <li key={index}>{change}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Original Email Context */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <EnvelopeIcon className="w-5 h-5" />
                Email Context
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="text-sm text-gray-600 mb-2">
                  <strong>From:</strong> {item.emailFrom}<br />
                  <strong>Date:</strong> {item.date}<br />
                  <strong>Subject:</strong> Kitchen Renovation Update
                </div>
                <div className="text-sm text-gray-700">
                  <p className="italic">
                    {item.originalEmail || "Original email content not available"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Email Preview */}
          {showEmailPreview && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <PaperAirplaneIcon className="w-5 h-5" />
                  Email Response
                </CardTitle>
              </CardHeader>
              <CardContent>
                <textarea
                  value={confirmationEmail}
                  onChange={(e) => setConfirmationEmail(e.target.value)}
                  rows={15}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-[#34A853] focus:border-[#34A853] text-sm font-mono"
                />
                <div className="flex justify-end gap-2 mt-4">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => setShowEmailPreview(false)}
                  >
                    Cancel
                  </Button>
                  <Button 
                    size="sm"
                    onClick={handleSendEmail}
                    className="flex items-center gap-2"
                  >
                    <PaperAirplaneIcon className="w-4 h-4" />
                    Send Email
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Actions */}
        <div className="flex justify-between items-center p-6 border-t border-gray-200 bg-gray-50">
          <div className="flex gap-2">
            {item.needsEmailResponse && !isProjectArchived && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={generateConfirmationEmail}
                className="flex items-center gap-2"
              >
                <PaperAirplaneIcon className="w-4 h-4" />
                Generate Email Response
              </Button>
            )}
            {isProjectArchived && (
              <div className="text-sm text-amber-600">
                Project archived - actions disabled
              </div>
            )}
          </div>
          
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              onClick={() => onAction(item.id, 'ignore')}
              className="text-red-600 border-red-300 hover:bg-red-50"
              title="Mark as false positive - helps AI learn to avoid similar flags"
              disabled={isProjectArchived}
            >
              Ignore (False Positive)
            </Button>
            <Button 
              onClick={() => onAction(item.id, 'confirm')}
              className="flex items-center gap-2"
              title="Confirm as valid detection - reinforces AI learning and adds to timeline"
              disabled={isProjectArchived}
            >
              <CheckCircleIcon className="w-4 h-4" />
              Add to Timeline
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}; 