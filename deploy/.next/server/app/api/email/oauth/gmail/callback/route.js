(()=>{var a={};a.id=9665,a.ids=[9665],a.modules={3295:a=>{"use strict";a.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:a=>{"use strict";a.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},13700:(a,b,c)=>{"use strict";c.d(b,{z:()=>e});var d=c(96330);let e=globalThis.prisma??(()=>{let a="postgresql://neondb_owner:npg_avELx8uqOAc0@ep-still-paper-a5tgtem8-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require".trim();if(!a)throw console.error("DATABASE_URL environment variable is not set"),console.error("Available env vars:",Object.keys(process.env).filter(a=>a.includes("DATABASE")||a.includes("NEON"))),Error("DATABASE_URL environment variable is required");return console.log("Creating Prisma client with DATABASE_URL:",a.substring(0,30)+"..."),new d.PrismaClient({datasources:{db:{url:a}},log:["error","warn"]})})()},19771:a=>{"use strict";a.exports=require("process")},21820:a=>{"use strict";a.exports=require("os")},27910:a=>{"use strict";a.exports=require("stream")},28354:a=>{"use strict";a.exports=require("util")},29021:a=>{"use strict";a.exports=require("fs")},29294:a=>{"use strict";a.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:a=>{"use strict";a.exports=require("path")},41204:a=>{"use strict";a.exports=require("string_decoder")},44870:a=>{"use strict";a.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},52155:(a,b,c)=>{"use strict";c.r(b),c.d(b,{patchFetch:()=>p,routeModule:()=>l,serverHooks:()=>o,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>n});var d={};c.r(d),c.d(d,{GET:()=>k});var e=c(96559),f=c(48088),g=c(37719),h=c(32190),i=c(52235),j=c(13700);async function k(a){try{let b,{searchParams:c}=new URL(a.url),d=c.get("code"),e=c.get("state"),f=c.get("error");if(f)return i.v.warn("Gmail OAuth error",{error:f}),h.NextResponse.redirect(`http://localhost:3000/dashboard?email-error=${f}`);if(!d||!e)return i.v.warn("Gmail OAuth callback missing parameters",{code:!!d,state:!!e}),h.NextResponse.redirect("http://localhost:3000/dashboard?email-error=missing_params");try{b=JSON.parse(e)}catch(b){let a=b instanceof Error?b.message:"An unknown error occurred";return i.v.error("Failed to parse OAuth state",{state:e,error:a}),h.NextResponse.redirect("http://localhost:3000/dashboard?email-error=invalid_state")}let{projectId:g,userId:k}=b;if(!g||!k)return i.v.warn("Gmail OAuth state missing required fields",b),h.NextResponse.redirect("http://localhost:3000/dashboard?email-error=invalid_state");let l=await fetch("https://oauth2.googleapis.com/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({client_id:"442433418686-sahpnrfagrs9lfs1pdee2m06e4g2ukdc.apps.googleusercontent.com",client_secret:"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",code:d,grant_type:"authorization_code",redirect_uri:"http://localhost:3000/api/email/oauth/gmail/callback"})});if(!l.ok){let a=await l.text();return i.v.error("Failed to exchange OAuth code for tokens",{status:l.status,error:a}),h.NextResponse.redirect("http://localhost:3000/dashboard?email-error=token_exchange")}let m=await l.json();if(!m.access_token||!m.refresh_token)return i.v.error("Missing tokens in OAuth response",{hasAccessToken:!!m.access_token,hasRefreshToken:!!m.refresh_token}),h.NextResponse.redirect("http://localhost:3000/dashboard?email-error=missing_tokens");let n=new Date(m.expires_in?Date.now()+1e3*m.expires_in:Date.now()+36e5);return await j.z.emailSettings.upsert({where:{projectId:g},update:{gmailConnected:!0,gmailAccessToken:m.access_token,gmailRefreshToken:m.refresh_token,gmailTokenExpiry:n,monitoringEnabled:!0,notificationsEnabled:!0,updatedAt:new Date},create:{projectId:g,gmailConnected:!0,gmailAccessToken:m.access_token,gmailRefreshToken:m.refresh_token,gmailTokenExpiry:n,monitoringEnabled:!0,notificationsEnabled:!0,weeklyReports:!1,highPriorityAlerts:!0}}),i.v.info("Gmail OAuth successful for project",{userId:k,projectId:g,tokenExpiry:n.toISOString()}),h.NextResponse.redirect(`http://localhost:3000/dashboard?email-connected=true&project=${g}`)}catch(c){let a=c instanceof Error?c.message:"An unknown error occurred",b=c instanceof Error?c.stack:void 0;return i.v.error("Error in Gmail OAuth callback",{error:a,stack:b}),h.NextResponse.redirect("http://localhost:3000/dashboard?email-error=callback_failed")}}let l=new e.AppRouteRouteModule({definition:{kind:f.RouteKind.APP_ROUTE,page:"/api/email/oauth/gmail/callback/route",pathname:"/api/email/oauth/gmail/callback",filename:"route",bundlePath:"app/api/email/oauth/gmail/callback/route"},distDir:".next",projectDir:"",resolvedPagePath:"/Users/kennyc/code/personal/nailit/app/api/email/oauth/gmail/callback/route.ts",nextConfigOutput:"",userland:d}),{workAsyncStorage:m,workUnitAsyncStorage:n,serverHooks:o}=l;function p(){return(0,g.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:n})}},52235:(a,b,c)=>{"use strict";c.d(b,{v:()=>k});var d=c(91728),e=c.n(d),f=c(30262),g=c(32495),h=c(63200),i=c(41491);class j{constructor(){this.logGroupCreated=!1,this.logStreamCreated=!1,this.environment=this.detectEnvironment(),this.logGroupName=`/nailit/${this.environment}/application`,this.logStreamName=`${new Date().toISOString().split("T")[0]}-${Math.random().toString(36).substr(2,9)}`;let a=!!(process.env.NAILIT_IAM_ACCESS_KEY_ID&&process.env.NAILIT_IAM_ACCESS_KEY_SECRET);"development"!==this.environment&&a?(this.cloudWatchClient=new f.T({region:"us-east-1",credentials:process.env.NAILIT_IAM_ACCESS_KEY_ID?{accessKeyId:process.env.NAILIT_IAM_ACCESS_KEY_ID,secretAccessKey:process.env.NAILIT_IAM_ACCESS_KEY_SECRET}:void 0}),this.ensureLogGroupExists().catch(a=>{console.error("Failed to ensure log group exists:",a),this.cloudWatchClient=void 0})):(a||console.log("CloudWatch logging disabled: AWS credentials not available"),"development"===this.environment&&console.log("CloudWatch logging disabled: development environment")),this.logger=e().createLogger({level:this.getLogLevel(),format:e().format.combine(e().format.timestamp(),e().format.errors({stack:!0}),e().format.json(),e().format.printf(this.formatLog.bind(this))),defaultMeta:{service:"nailit",environment:this.environment,version:process.env.npm_package_version||"1.0.0"},transports:this.getTransports()}),this.logger.exceptions.handle(new(e()).transports.File({filename:"logs/exceptions.log"})),this.logger.rejections.handle(new(e()).transports.File({filename:"logs/rejections.log"}))}getLogLevel(){switch(this.environment){case"production":default:return"info";case"staging":case"development":case"test":return"debug"}}getTransports(){let a=[];return"development"===this.environment?a.push(new(e()).transports.Console({format:e().format.combine(e().format.colorize(),e().format.simple(),e().format.printf(a=>{let{level:b,message:c,timestamp:d,...e}=a,f=Object.keys(e).length?JSON.stringify(e,null,2):"";return`${d} [${b}]: ${c} ${f}`}))})):(a.push(new(e()).transports.Console({format:e().format.json()})),a.push(new(e()).transports.File({filename:"logs/application.log",maxsize:0xa00000,maxFiles:5,format:e().format.json()})),a.push(new(e()).transports.File({filename:"logs/error.log",level:"error",maxsize:0xa00000,maxFiles:5,format:e().format.json()}))),a}formatLog(a){let{timestamp:b,level:c,message:d,service:e,environment:f,version:g,...h}=a;return JSON.stringify({level:c,message:String(d),metadata:h,timestamp:String(b),environment:String(f),service:String(e),version:String(g)})}error(a,b={}){this.log("error",a,b)}warn(a,b={}){this.log("warn",a,b)}info(a,b={}){this.log("info",a,b)}debug(a,b={}){this.log("debug",a,b)}log(a,b,c){let d=this.enrichMetadata(c);this.logger.log(a,b,d),this.cloudWatchClient&&["info","warn","error"].includes(a)&&this.sendToCloudWatch(a,b,d).catch(c=>{let d={error:c.message||String(c),errorCode:c.name||"UnknownError",logGroupName:this.logGroupName,logStreamName:this.logStreamName,level:a,originalMessage:b,environment:this.environment};console.error("Failed to send log to CloudWatch:",JSON.stringify(d,null,2)),this.logger.error("CloudWatch logging failed",d)})}enrichMetadata(a){return{...this.sanitizeMetadata(a),timestamp:new Date().toISOString(),environment:this.environment,nodeVersion:process.version,platform:process.platform,memoryUsage:process.memoryUsage(),uptime:process.uptime()}}security(a,b={}){this.error(a,{...b,context:"security",security_event:!0})}performance(a,b,c={}){this.info(a,{...c,duration:b,context:"performance"})}audit(a,b={}){this.info(`AUDIT: ${a}`,{...b,context:"security",audit_event:!0})}apiRequest(a,b,c,d,e={}){this.log(c>=500?"error":c>=400?"warn":"info",`${a} ${b}`,{...e,context:"api",method:a,endpoint:b,statusCode:c,duration:d})}databaseQuery(a,b,c={}){this.debug("Database query executed",{...c,context:"database",query:a.substring(0,200),duration:b})}emailProcessing(a,b,c={}){this.info(`Email processing: ${a}`,{...c,context:"email",emailId:b,action:a})}aiAnalysis(a,b,c={}){this.info("AI analysis completed",{...c,context:"ai",model:a,tokensUsed:b})}createRequestContext(a,b={}){return{...b,requestId:a,startTime:Date.now()}}logRequestStart(a,b,c={}){this.info(`Request started: ${a} ${b}`,{...c,context:"api",method:a,endpoint:b,phase:"start"})}logRequestEnd(a,b,c,d={}){let e=d.startTime&&"number"==typeof d.startTime?Date.now()-d.startTime:void 0;this.apiRequest(a,b,c,e||0,{...d,phase:"end"})}async sendToCloudWatch(a,b,c){if(!this.cloudWatchClient)return void console.log("CloudWatch client not initialized");try{await this.ensureLogStreamExists();let d={timestamp:Date.now(),message:JSON.stringify({level:a,message:b,...c})};.1>Math.random()&&console.log("Attempting CloudWatch log:",{logGroupName:this.logGroupName,logStreamName:this.logStreamName,eventSize:d.message.length,level:a}),await this.cloudWatchClient.send(new g.A({logGroupName:this.logGroupName,logStreamName:this.logStreamName,logEvents:[d]})),.05>Math.random()&&console.log("CloudWatch log sent successfully")}catch(a){console.error("CloudWatch logging failed:",{error:a instanceof Error?a.message:String(a),errorCode:a instanceof Error?a.name:"UnknownError",logGroupName:this.logGroupName,logStreamName:this.logStreamName,region:"us-east-1",hasCredentials:!!(process.env.NAILIT_IAM_ACCESS_KEY_ID&&process.env.NAILIT_IAM_ACCESS_KEY_SECRET),errorStack:a instanceof Error?a.stack:void 0})}}async ensureLogGroupExists(){if(this.cloudWatchClient&&!this.logGroupCreated)try{await this.cloudWatchClient.send(new h.B({logGroupName:this.logGroupName})),console.log(`Created CloudWatch log group: ${this.logGroupName}`),this.logGroupCreated=!0}catch(b){let a=b instanceof Error?b.message:String(b);if(a.includes("ResourceAlreadyExistsException"))console.log(`CloudWatch log group already exists: ${this.logGroupName}`),this.logGroupCreated=!0;else throw console.error(`Failed to create CloudWatch log group: ${a}`),b}}async ensureLogStreamExists(){if(this.cloudWatchClient&&!this.logStreamCreated){await this.ensureLogGroupExists();try{await this.cloudWatchClient.send(new i.E({logGroupName:this.logGroupName,logStreamName:this.logStreamName})),console.log(`Created CloudWatch log stream: ${this.logStreamName}`),this.logStreamCreated=!0}catch(b){let a=b instanceof Error?b.message:String(b);if(a.includes("ResourceAlreadyExistsException"))console.log(`CloudWatch log stream already exists: ${this.logStreamName}`),this.logStreamCreated=!0;else throw console.error(`Failed to create CloudWatch log stream: ${a}`),b}}}sanitizeMetadata(a){let b=["password","token","secret","key","authorization"],c={...a},d=a=>{let c={};for(let[e,f]of Object.entries(a))b.some(a=>e.toLowerCase().includes(a))?c[e]="[REDACTED]":"object"==typeof f&&null!==f?c[e]=d(f):c[e]=f;return c};return d(c)}detectEnvironment(){let a=process.env.NAILIT_ENVIRONMENT;if(a)switch(a.toLowerCase()){case"development":case"dev":break;case"staging":case"stage":return"staging";case"production":case"prod":return"production";default:return console.warn(`Unknown NAILIT_ENVIRONMENT: ${a}, defaulting to development`),"development"}return"development"}}let k=new j},55511:a=>{"use strict";a.exports=require("crypto")},55591:a=>{"use strict";a.exports=require("https")},57075:a=>{"use strict";a.exports=require("node:stream")},63033:a=>{"use strict";a.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73496:a=>{"use strict";a.exports=require("http2")},74075:a=>{"use strict";a.exports=require("zlib")},78335:()=>{},79428:a=>{"use strict";a.exports=require("buffer")},79551:a=>{"use strict";a.exports=require("url")},79646:a=>{"use strict";a.exports=require("child_process")},79748:a=>{"use strict";a.exports=require("fs/promises")},81630:a=>{"use strict";a.exports=require("http")},94735:a=>{"use strict";a.exports=require("events")},96330:a=>{"use strict";a.exports=require("@prisma/client")},96487:()=>{}};var b=require("../../../../../../webpack-runtime.js");b.C(a);var c=a=>b(b.s=a),d=b.X(0,[7719,580,8667,1728],()=>c(52155));module.exports=d})();