(()=>{var a={};a.id=9370,a.ids=[9370],a.modules={3295:a=>{"use strict";a.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:a=>{"use strict";a.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},19771:a=>{"use strict";a.exports=require("process")},21820:a=>{"use strict";a.exports=require("os")},27910:a=>{"use strict";a.exports=require("stream")},28354:a=>{"use strict";a.exports=require("util")},29021:a=>{"use strict";a.exports=require("fs")},29294:a=>{"use strict";a.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:a=>{"use strict";a.exports=require("path")},41204:a=>{"use strict";a.exports=require("string_decoder")},42346:(a,b,c)=>{"use strict";c.r(b),c.d(b,{patchFetch:()=>y,routeModule:()=>u,serverHooks:()=>x,workAsyncStorage:()=>v,workUnitAsyncStorage:()=>w});var d={};c.r(d),c.d(d,{GET:()=>r,POST:()=>s});var e=c(96559),f=c(48088),g=c(37719),h=c(32190),i=c(55511);let j={randomUUID:i.randomUUID},k=new Uint8Array(256),l=k.length,m=[];for(let a=0;a<256;++a)m.push((a+256).toString(16).slice(1));let n=function(a,b,c){if(j.randomUUID&&!b&&!a)return j.randomUUID();let d=(a=a||{}).random??a.rng?.()??(l>k.length-16&&((0,i.randomFillSync)(k),l=0),k.slice(l,l+=16));if(d.length<16)throw Error("Random bytes length must be >= 16");if(d[6]=15&d[6]|64,d[8]=63&d[8]|128,b){if((c=c||0)<0||c+16>b.length)throw RangeError(`UUID byte range ${c}:${c+15} is out of buffer bounds`);for(let a=0;a<16;++a)b[c+a]=d[a];return b}return function(a,b=0){return(m[a[b+0]]+m[a[b+1]]+m[a[b+2]]+m[a[b+3]]+"-"+m[a[b+4]]+m[a[b+5]]+"-"+m[a[b+6]]+m[a[b+7]]+"-"+m[a[b+8]]+m[a[b+9]]+"-"+m[a[b+10]]+m[a[b+11]]+m[a[b+12]]+m[a[b+13]]+m[a[b+14]]+m[a[b+15]]).toLowerCase()}(d)};var o=c(52235);class p{static createContext(a){let b=n(),c=a.url,d=a.method,e=a.headers.get("user-agent")||void 0,f=a.headers.get("x-forwarded-for"),g={requestId:b,method:d,url:c,userAgent:e,ip:f?f.split(",")[0].trim():a.headers.get("x-real-ip")||"unknown",startTime:Date.now()};return a.headers.get("authorization")&&(g.sessionId="session-placeholder"),g}static logStart(a){o.v.logRequestStart(a.method,a.url,{requestId:a.requestId,userAgent:a.userAgent,ip:a.ip,userId:a.userId,sessionId:a.sessionId,startTime:a.startTime})}static logEnd(a,b,c){let d=a.startTime,e=Date.now()-d,f=b.status;c?o.v.error(`Request failed: ${a.method} ${a.url}`,{requestId:a.requestId,method:a.method,endpoint:a.url,statusCode:f,duration:e,error:c.message,stack:c.stack,userAgent:a.userAgent,ip:a.ip,userId:a.userId,sessionId:a.sessionId}):o.v.logRequestEnd(a.method,a.url,f,{requestId:a.requestId,userAgent:a.userAgent,ip:a.ip,userId:a.userId,sessionId:a.sessionId,startTime:a.startTime}),e>5e3&&o.v.warn(`Slow request detected: ${a.method} ${a.url}`,{requestId:a.requestId,duration:e,statusCode:f,context:"performance"})}static wrap(a){return async(b,...c)=>{let d=p.createContext(b);p.logStart(d);try{let e=await a(b,...c);p.logEnd(d,e);let f=new Headers(e.headers);return f.set("X-Request-ID",d.requestId),new h.NextResponse(e.body,{status:e.status,statusText:e.statusText,headers:f})}catch(b){let a=h.NextResponse.json({error:"Internal Server Error",requestId:d.requestId},{status:500});return p.logEnd(d,a,b),a}}}static logOperation(a,b,c={}){o.v.info(`${b}`,{requestId:a.requestId,context:"api",operation:b,...c})}static logDatabaseOperation(a,b,c,d={}){o.v.databaseQuery(b,c,{requestId:a.requestId,...d})}static logAuthEvent(a,b,c,d={}){("failed_login"===b?o.v.security.bind(o.v):o.v.audit.bind(o.v))(`Authentication event: ${b}`,{requestId:a.requestId,userId:c||a.userId,event:b,ip:a.ip,userAgent:a.userAgent,...d})}}async function q(a){let b=p.createContext(a);p.logStart(b);try{let a=`test-${Date.now()}`,c=[];o.v.info("Logging test started",{testId:a,context:"api"}),c.push("✅ Basic info logging"),o.v.warn("Test warning message",{testId:a,warning:"test-warning"}),c.push("✅ Warning logging"),o.v.debug("Test debug message",{testId:a,details:"debug-details"}),c.push("✅ Debug logging");let d=Date.now();await new Promise(a=>setTimeout(a,150));let e=Date.now()-d;o.v.performance("Simulated operation completed",e,{testId:a,operation:"api-test",success:!0}),c.push("✅ Performance logging"),o.v.audit("Test API endpoint accessed",{testId:a,userId:"test-user-123",action:"logging-test-executed"}),c.push("✅ Audit logging"),o.v.emailProcessing("simulated","test-email-123",{testId:a,processor:"test-simulation"}),c.push("✅ Email processing logging"),o.v.aiAnalysis("test-model",500,{testId:a,operation:"test-analysis",confidence:.95}),c.push("✅ AI analysis logging"),o.v.databaseQuery("SELECT * FROM test_table WHERE id = ?",25,{testId:a,operation:"test-query"}),c.push("✅ Database query logging"),o.v.info("Testing data sanitization",{userId:"test-user-123",password:"should-be-redacted",token:"secret-token-123",email:"test@example.com",publicData:"this-should-remain"}),c.push("✅ Data sanitization logging");try{throw Error("Intentional test error")}catch(b){o.v.error("Test error handling",{testId:a,error:b instanceof Error?b.message:String(b),stack:b instanceof Error?b.stack:void 0,intentional:!0}),c.push("✅ Error logging")}o.v.security("Test security event",{testId:a,eventType:"test-event",severity:"low",description:"Simulated security event for testing"}),c.push("✅ Security event logging");let f=h.NextResponse.json({success:!0,testId:a,message:"Logging test completed successfully",testsCompleted:c.length,results:c,environmentInfo:{nodeEnv:"production",nailItEnvironment:process.env.NAILIT_ENVIRONMENT,detectedEnvironment:t(),region:"us-east-1",logLevel:process.env.LOG_LEVEL||"environment-default",cloudWatchDisabled:"true"===process.env.DISABLE_CLOUDWATCH_LOGS,willLogToCloudWatch:"development"!==t()&&"true"!==process.env.DISABLE_CLOUDWATCH_LOGS},instructions:{checkLogs:["Check console output for formatted logs","Check logs/ directory for file outputs (non-development)","Check CloudWatch Logs if in staging/production","Verify /api/debug-env shows correct logging configuration"]},timestamp:new Date().toISOString()});return p.logEnd(b,f),f}catch(c){let a=h.NextResponse.json({success:!1,error:"Logging test failed",details:c instanceof Error?c.message:String(c),testId:b.requestId},{status:500});return p.logEnd(b,a,c),a}}let r=p.wrap(q),s=p.wrap(q);function t(){let a=process.env.NAILIT_ENVIRONMENT;if(a)switch(a.toLowerCase()){case"development":case"dev":break;case"staging":case"stage":return"staging";case"production":case"prod":return"production";default:return console.warn(`Unknown NAILIT_ENVIRONMENT: ${a}, defaulting to development`),"development"}return"development"}let u=new e.AppRouteRouteModule({definition:{kind:f.RouteKind.APP_ROUTE,page:"/api/test-logging/route",pathname:"/api/test-logging",filename:"route",bundlePath:"app/api/test-logging/route"},distDir:".next",projectDir:"",resolvedPagePath:"/Users/kennyc/code/personal/nailit/app/api/test-logging/route.ts",nextConfigOutput:"",userland:d}),{workAsyncStorage:v,workUnitAsyncStorage:w,serverHooks:x}=u;function y(){return(0,g.patchFetch)({workAsyncStorage:v,workUnitAsyncStorage:w})}},44870:a=>{"use strict";a.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},52235:(a,b,c)=>{"use strict";c.d(b,{v:()=>k});var d=c(91728),e=c.n(d),f=c(30262),g=c(32495),h=c(63200),i=c(41491);class j{constructor(){this.logGroupCreated=!1,this.logStreamCreated=!1,this.environment=this.detectEnvironment(),this.logGroupName=`/nailit/${this.environment}/application`,this.logStreamName=`${new Date().toISOString().split("T")[0]}-${Math.random().toString(36).substr(2,9)}`;let a=!!(process.env.NAILIT_IAM_ACCESS_KEY_ID&&process.env.NAILIT_IAM_ACCESS_KEY_SECRET);"development"!==this.environment&&a?(this.cloudWatchClient=new f.T({region:"us-east-1",credentials:process.env.NAILIT_IAM_ACCESS_KEY_ID?{accessKeyId:process.env.NAILIT_IAM_ACCESS_KEY_ID,secretAccessKey:process.env.NAILIT_IAM_ACCESS_KEY_SECRET}:void 0}),this.ensureLogGroupExists().catch(a=>{console.error("Failed to ensure log group exists:",a),this.cloudWatchClient=void 0})):(a||console.log("CloudWatch logging disabled: AWS credentials not available"),"development"===this.environment&&console.log("CloudWatch logging disabled: development environment")),this.logger=e().createLogger({level:this.getLogLevel(),format:e().format.combine(e().format.timestamp(),e().format.errors({stack:!0}),e().format.json(),e().format.printf(this.formatLog.bind(this))),defaultMeta:{service:"nailit",environment:this.environment,version:process.env.npm_package_version||"1.0.0"},transports:this.getTransports()}),this.logger.exceptions.handle(new(e()).transports.File({filename:"logs/exceptions.log"})),this.logger.rejections.handle(new(e()).transports.File({filename:"logs/rejections.log"}))}getLogLevel(){switch(this.environment){case"production":default:return"info";case"staging":case"development":case"test":return"debug"}}getTransports(){let a=[];return"development"===this.environment?a.push(new(e()).transports.Console({format:e().format.combine(e().format.colorize(),e().format.simple(),e().format.printf(a=>{let{level:b,message:c,timestamp:d,...e}=a,f=Object.keys(e).length?JSON.stringify(e,null,2):"";return`${d} [${b}]: ${c} ${f}`}))})):(a.push(new(e()).transports.Console({format:e().format.json()})),a.push(new(e()).transports.File({filename:"logs/application.log",maxsize:0xa00000,maxFiles:5,format:e().format.json()})),a.push(new(e()).transports.File({filename:"logs/error.log",level:"error",maxsize:0xa00000,maxFiles:5,format:e().format.json()}))),a}formatLog(a){let{timestamp:b,level:c,message:d,service:e,environment:f,version:g,...h}=a;return JSON.stringify({level:c,message:String(d),metadata:h,timestamp:String(b),environment:String(f),service:String(e),version:String(g)})}error(a,b={}){this.log("error",a,b)}warn(a,b={}){this.log("warn",a,b)}info(a,b={}){this.log("info",a,b)}debug(a,b={}){this.log("debug",a,b)}log(a,b,c){let d=this.enrichMetadata(c);this.logger.log(a,b,d),this.cloudWatchClient&&["info","warn","error"].includes(a)&&this.sendToCloudWatch(a,b,d).catch(c=>{let d={error:c.message||String(c),errorCode:c.name||"UnknownError",logGroupName:this.logGroupName,logStreamName:this.logStreamName,level:a,originalMessage:b,environment:this.environment};console.error("Failed to send log to CloudWatch:",JSON.stringify(d,null,2)),this.logger.error("CloudWatch logging failed",d)})}enrichMetadata(a){return{...this.sanitizeMetadata(a),timestamp:new Date().toISOString(),environment:this.environment,nodeVersion:process.version,platform:process.platform,memoryUsage:process.memoryUsage(),uptime:process.uptime()}}security(a,b={}){this.error(a,{...b,context:"security",security_event:!0})}performance(a,b,c={}){this.info(a,{...c,duration:b,context:"performance"})}audit(a,b={}){this.info(`AUDIT: ${a}`,{...b,context:"security",audit_event:!0})}apiRequest(a,b,c,d,e={}){this.log(c>=500?"error":c>=400?"warn":"info",`${a} ${b}`,{...e,context:"api",method:a,endpoint:b,statusCode:c,duration:d})}databaseQuery(a,b,c={}){this.debug("Database query executed",{...c,context:"database",query:a.substring(0,200),duration:b})}emailProcessing(a,b,c={}){this.info(`Email processing: ${a}`,{...c,context:"email",emailId:b,action:a})}aiAnalysis(a,b,c={}){this.info("AI analysis completed",{...c,context:"ai",model:a,tokensUsed:b})}createRequestContext(a,b={}){return{...b,requestId:a,startTime:Date.now()}}logRequestStart(a,b,c={}){this.info(`Request started: ${a} ${b}`,{...c,context:"api",method:a,endpoint:b,phase:"start"})}logRequestEnd(a,b,c,d={}){let e=d.startTime&&"number"==typeof d.startTime?Date.now()-d.startTime:void 0;this.apiRequest(a,b,c,e||0,{...d,phase:"end"})}async sendToCloudWatch(a,b,c){if(!this.cloudWatchClient)return void console.log("CloudWatch client not initialized");try{await this.ensureLogStreamExists();let d={timestamp:Date.now(),message:JSON.stringify({level:a,message:b,...c})};.1>Math.random()&&console.log("Attempting CloudWatch log:",{logGroupName:this.logGroupName,logStreamName:this.logStreamName,eventSize:d.message.length,level:a}),await this.cloudWatchClient.send(new g.A({logGroupName:this.logGroupName,logStreamName:this.logStreamName,logEvents:[d]})),.05>Math.random()&&console.log("CloudWatch log sent successfully")}catch(a){console.error("CloudWatch logging failed:",{error:a instanceof Error?a.message:String(a),errorCode:a instanceof Error?a.name:"UnknownError",logGroupName:this.logGroupName,logStreamName:this.logStreamName,region:"us-east-1",hasCredentials:!!(process.env.NAILIT_IAM_ACCESS_KEY_ID&&process.env.NAILIT_IAM_ACCESS_KEY_SECRET),errorStack:a instanceof Error?a.stack:void 0})}}async ensureLogGroupExists(){if(this.cloudWatchClient&&!this.logGroupCreated)try{await this.cloudWatchClient.send(new h.B({logGroupName:this.logGroupName})),console.log(`Created CloudWatch log group: ${this.logGroupName}`),this.logGroupCreated=!0}catch(b){let a=b instanceof Error?b.message:String(b);if(a.includes("ResourceAlreadyExistsException"))console.log(`CloudWatch log group already exists: ${this.logGroupName}`),this.logGroupCreated=!0;else throw console.error(`Failed to create CloudWatch log group: ${a}`),b}}async ensureLogStreamExists(){if(this.cloudWatchClient&&!this.logStreamCreated){await this.ensureLogGroupExists();try{await this.cloudWatchClient.send(new i.E({logGroupName:this.logGroupName,logStreamName:this.logStreamName})),console.log(`Created CloudWatch log stream: ${this.logStreamName}`),this.logStreamCreated=!0}catch(b){let a=b instanceof Error?b.message:String(b);if(a.includes("ResourceAlreadyExistsException"))console.log(`CloudWatch log stream already exists: ${this.logStreamName}`),this.logStreamCreated=!0;else throw console.error(`Failed to create CloudWatch log stream: ${a}`),b}}}sanitizeMetadata(a){let b=["password","token","secret","key","authorization"],c={...a},d=a=>{let c={};for(let[e,f]of Object.entries(a))b.some(a=>e.toLowerCase().includes(a))?c[e]="[REDACTED]":"object"==typeof f&&null!==f?c[e]=d(f):c[e]=f;return c};return d(c)}detectEnvironment(){let a=process.env.NAILIT_ENVIRONMENT;if(a)switch(a.toLowerCase()){case"development":case"dev":break;case"staging":case"stage":return"staging";case"production":case"prod":return"production";default:return console.warn(`Unknown NAILIT_ENVIRONMENT: ${a}, defaulting to development`),"development"}return"development"}}let k=new j},55511:a=>{"use strict";a.exports=require("crypto")},55591:a=>{"use strict";a.exports=require("https")},57075:a=>{"use strict";a.exports=require("node:stream")},63033:a=>{"use strict";a.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73496:a=>{"use strict";a.exports=require("http2")},74075:a=>{"use strict";a.exports=require("zlib")},78335:()=>{},79428:a=>{"use strict";a.exports=require("buffer")},79551:a=>{"use strict";a.exports=require("url")},79646:a=>{"use strict";a.exports=require("child_process")},79748:a=>{"use strict";a.exports=require("fs/promises")},81630:a=>{"use strict";a.exports=require("http")},94735:a=>{"use strict";a.exports=require("events")},96487:()=>{}};var b=require("../../../webpack-runtime.js");b.C(a);var c=a=>b(b.s=a),d=b.X(0,[7719,580,8667,1728],()=>c(42346));module.exports=d})();