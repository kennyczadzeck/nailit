"use strict";exports.id=4300,exports.ids=[4300],exports.modules={74300:(a,b,c)=>{c.d(b,{fromIni:()=>w});var d=c(92413),e=c(71930),f=c(21905);let g=(a,b,d)=>{let f={EcsContainer:async a=>{let{fromHttp:b}=await c.e(1570).then(c.bind(c,99189)),{fromContainerMetadata:f}=await c.e(4147).then(c.bind(c,14147));return d?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,e.cy)(b(a??{}),f(a))().then(h)},Ec2InstanceMetadata:async a=>{d?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:b}=await c.e(4147).then(c.bind(c,14147));return async()=>b(a)().then(h)},Environment:async a=>{d?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:b}=await Promise.resolve().then(c.bind(c,4899));return async()=>b(a)().then(h)}};if(a in f)return f[a];throw new e.C1(`Unsupported credential source in profile ${b}. Got ${a}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:d})},h=a=>(0,f.g)(a,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),i=(a,{profile:b="default",logger:c}={})=>!!a&&"object"==typeof a&&"string"==typeof a.role_arn&&["undefined","string"].indexOf(typeof a.role_session_name)>-1&&["undefined","string"].indexOf(typeof a.external_id)>-1&&["undefined","string"].indexOf(typeof a.mfa_serial)>-1&&(j(a,{profile:b,logger:c})||k(a,{profile:b,logger:c})),j=(a,{profile:b,logger:c})=>{let d="string"==typeof a.source_profile&&void 0===a.credential_source;return d&&c?.debug?.(`    ${b} isAssumeRoleWithSourceProfile source_profile=${a.source_profile}`),d},k=(a,{profile:b,logger:c})=>{let d="string"==typeof a.credential_source&&void 0===a.source_profile;return d&&c?.debug?.(`    ${b} isCredentialSourceProfile credential_source=${a.credential_source}`),d},l=async(a,b,h,i={})=>{h.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let j=b[a],{source_profile:k,region:l}=j;if(!h.roleAssumer){let{getDefaultRoleAssumer:a}=await c.e(6322).then(c.bind(c,86322));h.roleAssumer=a({...h.clientConfig,credentialProviderLogger:h.logger,parentClientConfig:{...h?.parentClientConfig,region:l??h?.parentClientConfig?.region}},h.clientPlugins)}if(k&&k in i)throw new e.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,d.Bz)(h)}. Profiles visited: `+Object.keys(i).join(", "),{logger:h.logger});h.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${k?`source_profile=[${k}]`:`profile=[${a}]`}`);let n=k?v(k,b,h,{...i,[k]:!0},m(b[k]??{})):(await g(j.credential_source,a,h.logger)(h))();if(m(j))return n.then(a=>(0,f.g)(a,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"));{let b={RoleArn:j.role_arn,RoleSessionName:j.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:j.external_id,DurationSeconds:parseInt(j.duration_seconds||"3600",10)},{mfa_serial:c}=j;if(c){if(!h.mfaCodeProvider)throw new e.C1(`Profile ${a} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:h.logger,tryNextLink:!1});b.SerialNumber=c,b.TokenCode=await h.mfaCodeProvider(c)}let d=await n;return h.roleAssumer(d,b).then(a=>(0,f.g)(a,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o"))}},m=a=>!a.role_arn&&!!a.credential_source,n=a=>!!a&&"object"==typeof a&&"string"==typeof a.credential_process,o=async(a,b)=>c.e(5245).then(c.bind(c,95245)).then(({fromProcess:c})=>c({...a,profile:b})().then(a=>(0,f.g)(a,"CREDENTIALS_PROFILE_PROCESS","v"))),p=async(a,b,d={})=>{let{fromSSO:e}=await c.e(6717).then(c.bind(c,6717));return e({profile:a,logger:d.logger,parentClientConfig:d.parentClientConfig,clientConfig:d.clientConfig})().then(a=>b.sso_session?(0,f.g)(a,"CREDENTIALS_PROFILE_SSO","r"):(0,f.g)(a,"CREDENTIALS_PROFILE_SSO_LEGACY","t"))},q=a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name),r=a=>!!a&&"object"==typeof a&&"string"==typeof a.aws_access_key_id&&"string"==typeof a.aws_secret_access_key&&["undefined","string"].indexOf(typeof a.aws_session_token)>-1&&["undefined","string"].indexOf(typeof a.aws_account_id)>-1,s=async(a,b)=>{b?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");let c={accessKeyId:a.aws_access_key_id,secretAccessKey:a.aws_secret_access_key,sessionToken:a.aws_session_token,...a.aws_credential_scope&&{credentialScope:a.aws_credential_scope},...a.aws_account_id&&{accountId:a.aws_account_id}};return(0,f.g)(c,"CREDENTIALS_PROFILE","n")},t=a=>!!a&&"object"==typeof a&&"string"==typeof a.web_identity_token_file&&"string"==typeof a.role_arn&&["undefined","string"].indexOf(typeof a.role_session_name)>-1,u=async(a,b)=>c.e(5165).then(c.bind(c,85165)).then(({fromTokenFile:c})=>c({webIdentityTokenFile:a.web_identity_token_file,roleArn:a.role_arn,roleSessionName:a.role_session_name,roleAssumerWithWebIdentity:b.roleAssumerWithWebIdentity,logger:b.logger,parentClientConfig:b.parentClientConfig})().then(a=>(0,f.g)(a,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))),v=async(a,b,c,d={},f=!1)=>{let g=b[a];if(Object.keys(d).length>0&&r(g))return s(g,c);if(f||i(g,{profile:a,logger:c.logger}))return l(a,b,c,d);if(r(g))return s(g,c);if(t(g))return u(g,c);if(n(g))return o(c,a);if(q(g))return await p(a,g,c);throw new e.C1(`Could not resolve credentials using profile: [${a}] in configuration/credentials file(s).`,{logger:c.logger})},w=(a={})=>async({callerClientConfig:b}={})=>{let c={...a,parentClientConfig:{...b,...a.parentClientConfig}};c.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let e=await (0,d.YU)(c);return v((0,d.Bz)({profile:a.profile??b?.profile}),e,c)}}};