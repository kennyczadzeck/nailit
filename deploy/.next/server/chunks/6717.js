"use strict";exports.id=6717,exports.ids=[6717],exports.modules={6717:(a,b,c)=>{c.d(b,{fromSSO:()=>s});var d=c(71930),e=c(92413);let f=a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name);var g=c(21905);let h="To refresh this SSO session run 'aws sso login' with the corresponding profile.",i=async(a,b={})=>{let{SSOOIDCClient:d}=await c.e(8672).then(c.bind(c,58672));return new d(Object.assign({},b.clientConfig??{},{region:a??b.clientConfig?.region,logger:b.clientConfig?.logger??b.parentClientConfig?.logger}))},j=async(a,b,d={})=>{let{CreateTokenCommand:e}=await c.e(8672).then(c.bind(c,58672));return(await i(b,d)).send(new e({clientId:a.clientId,clientSecret:a.clientSecret,refreshToken:a.refreshToken,grantType:"refresh_token"}))},k=a=>{if(a.expiration&&a.expiration.getTime()<Date.now())throw new d.Jh(`Token is expired. ${h}`,!1)},l=(a,b,c=!1)=>{if(void 0===b)throw new d.Jh(`Value not present for '${a}' in SSO Token${c?". Cannot refresh":""}. ${h}`,!1)},{writeFile:m}=c(29021).promises,n=(a,b)=>m((0,e.C9)(a),JSON.stringify(b,null,2)),o=new Date(0),p=(a={})=>async({callerClientConfig:b}={})=>{let c,f={...a,parentClientConfig:{...b,...a.parentClientConfig}};f.logger?.debug("@aws-sdk/token-providers - fromSso");let g=await (0,e.YU)(f),i=(0,e.Bz)({profile:f.profile??b?.profile}),m=g[i];if(m){if(!m.sso_session)throw new d.Jh(`Profile '${i}' is missing required property 'sso_session'.`)}else throw new d.Jh(`Profile '${i}' could not be found in shared credentials file.`,!1);let p=m.sso_session,q=(await (0,e.qw)(f))[p];if(!q)throw new d.Jh(`Sso session '${p}' could not be found in shared credentials file.`,!1);for(let a of["sso_start_url","sso_region"])if(!q[a])throw new d.Jh(`Sso session '${p}' is missing required property '${a}'.`,!1);q.sso_start_url;let r=q.sso_region;try{c=await (0,e.vf)(p)}catch(a){throw new d.Jh(`The SSO session token associated with profile=${i} was not found or is invalid. ${h}`,!1)}l("accessToken",c.accessToken),l("expiresAt",c.expiresAt);let{accessToken:s,expiresAt:t}=c,u={token:s,expiration:new Date(t)};if(u.expiration.getTime()-Date.now()>3e5)return u;if(Date.now()-o.getTime()<3e4)return k(u),u;l("clientId",c.clientId,!0),l("clientSecret",c.clientSecret,!0),l("refreshToken",c.refreshToken,!0);try{o.setTime(Date.now());let a=await j(c,r,f);l("accessToken",a.accessToken),l("expiresIn",a.expiresIn);let b=new Date(Date.now()+1e3*a.expiresIn);try{await n(p,{...c,accessToken:a.accessToken,expiresAt:b.toISOString(),refreshToken:a.refreshToken})}catch(a){}return{token:a.accessToken,expiration:b}}catch(a){return k(u),u}},q=async({ssoStartUrl:a,ssoSession:b,ssoAccountId:f,ssoRegion:h,ssoRoleName:i,ssoClient:j,clientConfig:k,parentClientConfig:l,profile:m,logger:n})=>{let o,q,r="To refresh this SSO session run aws sso login with the corresponding profile.";if(b)try{let a=await p({profile:m})();o={accessToken:a.token,expiresAt:new Date(a.expiration).toISOString()}}catch(a){throw new d.C1(a.message,{tryNextLink:!1,logger:n})}else try{o=await (0,e.vf)(a)}catch(a){throw new d.C1(`The SSO session associated with this profile is invalid. ${r}`,{tryNextLink:!1,logger:n})}if(new Date(o.expiresAt).getTime()-Date.now()<=0)throw new d.C1(`The SSO session associated with this profile has expired. ${r}`,{tryNextLink:!1,logger:n});let{accessToken:s}=o,{SSOClient:t,GetRoleCredentialsCommand:u}=await c.e(9455).then(c.bind(c,39455)),v=j||new t(Object.assign({},k??{},{logger:k?.logger??l?.logger,region:k?.region??h}));try{q=await v.send(new u({accountId:f,roleName:i,accessToken:s}))}catch(a){throw new d.C1(a,{tryNextLink:!1,logger:n})}let{roleCredentials:{accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:z,credentialScope:A,accountId:B}={}}=q;if(!w||!x||!y||!z)throw new d.C1("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:n});let C={accessKeyId:w,secretAccessKey:x,sessionToken:y,expiration:new Date(z),...A&&{credentialScope:A},...B&&{accountId:B}};return b?(0,g.g)(C,"CREDENTIALS_SSO","s"):(0,g.g)(C,"CREDENTIALS_SSO_LEGACY","u"),C},r=(a,b)=>{let{sso_start_url:c,sso_account_id:e,sso_region:f,sso_role_name:g}=a;if(!c||!e||!f||!g)throw new d.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(a).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:b});return a},s=(a={})=>async({callerClientConfig:b}={})=>{a.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:c,ssoAccountId:g,ssoRegion:h,ssoRoleName:i,ssoSession:j}=a,{ssoClient:k}=a,l=(0,e.Bz)({profile:a.profile??b?.profile});if(c||g||h||i||j)if(c&&g&&h&&i)return q({ssoStartUrl:c,ssoSession:j,ssoAccountId:g,ssoRegion:h,ssoRoleName:i,ssoClient:k,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:l});else throw new d.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:a.logger});{let b=(await (0,e.YU)(a))[l];if(!b)throw new d.C1(`Profile ${l} was not found.`,{logger:a.logger});if(!f(b))throw new d.C1(`Profile ${l} is not configured with SSO credentials.`,{logger:a.logger});if(b?.sso_session){let f=(await (0,e.qw)(a))[b.sso_session],g=` configurations in profile ${l} and sso-session ${b.sso_session}`;if(h&&h!==f.sso_region)throw new d.C1("Conflicting SSO region"+g,{tryNextLink:!1,logger:a.logger});if(c&&c!==f.sso_start_url)throw new d.C1("Conflicting SSO start_url"+g,{tryNextLink:!1,logger:a.logger});b.sso_region=f.sso_region,b.sso_start_url=f.sso_start_url}let{sso_start_url:g,sso_account_id:i,sso_region:j,sso_role_name:m,sso_session:n}=r(b,a.logger);return q({ssoStartUrl:g,ssoSession:n,ssoAccountId:i,ssoRegion:j,ssoRoleName:m,ssoClient:k,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:l})}}}};