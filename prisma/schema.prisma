// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_MIGRATION_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  emailVerified DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  accounts Account[]
  sessions Session[]
  emailMessages EmailMessage[] // New relation to email messages
  oauthSessions OAuthSession[] // New relation to OAuth sessions
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Project details
  contractor  String?
  budget      Float?
  address     String?
  addressPlaceId String? // Google Places ID for future reference
  addressLat  Float? // Latitude for potential mapping features
  addressLng  Float? // Longitude for potential mapping features

  // Relations
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  flaggedItems FlaggedItem[]
  timelineEntries TimelineEntry[]
  emailSettings EmailSettings?
  teamMembers TeamMember[]
  emailMessages EmailMessage[]  
  @@map("projects")
}

model FlaggedItem {
  id          String   @id @default(cuid())
  title       String
  description String
  impact      String
  category    FlaggedItemCategory
  
  // Email details
  emailFrom   String
  emailSubject String?
  emailDate   DateTime
  originalEmail String? // Full email content
  
  // AI Analysis
  aiConfidence Float @default(0.0) // 0-1 confidence score
  detectedChanges Json? // Array of detected changes
  
  // Status tracking
  needsEmailResponse Boolean @default(false)
  status      FlaggedItemStatus @default(PENDING)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewedAt  DateTime?
  
  // ML feedback
  mlFeedback  MLFeedbackType?
  userNotes   String?
  
  // Enhanced email integration
  emailContext String?    // Additional context from originating email
  
  // Relations
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timelineEntry TimelineEntry? // If confirmed, links to timeline entry
  emailMessages EmailMessage[] // Can link to one or more triggering emails
  
  @@map("flagged_items")
}

model TimelineEntry {
  id          String   @id @default(cuid())
  title       String
  description String
  category    TimelineCategory
  date        DateTime
  impact      String?
  
  // Entry details
  cost        Float?
  scheduleImpact String?
  scopeDetails String?
  
  // Status
  verified    Boolean @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  flaggedItemId String? @unique
  flaggedItem FlaggedItem? @relation(fields: [flaggedItemId], references: [id])
  
  @@map("timeline_entries")
}

model EmailSettings {
  id          String   @id @default(cuid())
  
  // Gmail integration
  gmailConnected Boolean @default(false)
  gmailRefreshToken String?
  gmailAccessToken String?
  gmailTokenExpiry DateTime?
  
  // Enhanced OAuth Session Tracking
  oauthSessionId String?     // Unique session identifier for this OAuth grant
  oauthGrantedAt DateTime?   // When the OAuth was initially granted
  oauthGrantedBy String?     // User ID who granted the OAuth (for audit trail)
  oauthLastRefreshedAt DateTime? // When tokens were last refreshed
  oauthRevokedAt DateTime?   // When OAuth was revoked (if applicable)
  oauthRevokedBy String?     // User ID who revoked the OAuth
  oauthRevokeReason String?  // Reason for revocation (security, user_request, etc.)
  oauthScopes Json?          // Array of granted OAuth scopes
  oauthReauthorizationRequired Boolean @default(false) // Flag for when reauth is needed
  oauthComplianceData Json?  // Additional compliance tracking data
  
  // Monitoring settings
  monitoringEnabled Boolean @default(true)
  emailFilters Json? // Array of email filters/rules
  
  // Notification preferences
  notificationsEnabled Boolean @default(true)
  weeklyReports Boolean @default(true)
  highPriorityAlerts Boolean @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String @unique
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("email_settings")
}

model EmailMessage {
  id              String   @id @default(cuid())
  
  // Provider metadata
  messageId       String   @unique
  threadId        String?
  provider        String   @default("gmail") // "gmail", "outlook"
  providerData    Json?    // Provider-specific metadata
  
  // Email details
  subject         String?
  sender          String
  senderName      String?
  recipients      String[]
  ccRecipients    String[]
  bccRecipients   String[]
  sentAt          DateTime
  receivedAt      DateTime @default(now())
  
  // Content storage
  bodyText        String?
  bodyHtml        String?
  s3ContentPath   String?     // S3 path for full email content
  s3AttachmentPaths String[]  // S3 paths for attachments
  
  // Processing pipeline status
  ingestionStatus String   @default("pending") // pending, processing, completed, failed
  analysisStatus  String   @default("pending") // pending, processing, completed, failed
  assignmentStatus String  @default("pending") // pending, processing, completed, failed
  
  // AI analysis results
  relevanceScore  Float?      // 0.0-1.0 project relevance for homeowner
  aiSummary       String?     // AI-generated summary
  classification  Json?       // { category: "quote", confidence: 0.95, subcategory: "..." }
  extractedData   Json?       // { amounts: [], dates: [], contacts: [], addresses: [] }
  urgencyLevel    String?     // "low", "normal", "high", "urgent"
  
  // Integration with existing flagged items
  flaggedItemId   String?     // Link to created flagged item
  containsChanges Boolean     @default(false) // Whether this email triggered flagged items
  
  // Error handling
  processingErrors Json?      // { ingestion: "error", analysis: "error", assignment: "error" }
  retryCount      Int         @default(0)
  lastProcessedAt DateTime?
  
  // Relations
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId       String?     // Project assignment (can be null if not project-related)
  project         Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  flaggedItem     FlaggedItem? @relation(fields: [flaggedItemId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("email_messages")
  @@index([userId, receivedAt])
  @@index([projectId, receivedAt])
  @@index([ingestionStatus])
  @@index([analysisStatus])
  @@index([urgencyLevel])
  @@index([containsChanges])
}

model OAuthSession {
  id                String   @id @default(cuid())
  userId            String
  provider          String   // "google", "microsoft", etc.
  sessionContext    String   // "email_api", "calendar_api", "app_auth"
  sessionPurpose    String   // Human-readable description
  
  // OAuth credentials
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  tokenType         String?  @default("Bearer")
  scopes            String[] // ["gmail.readonly", "calendar.events"]
  
  // Session management
  isActive          Boolean  @default(true)
  lastUsedAt        DateTime @default(now())
  createdAt         DateTime @default(now())
  revokedAt         DateTime?
  revokedReason     String?
  
  // Device/app context
  deviceInfo        String?  // "web", "mobile", "desktop", "server"
  userAgent         String?
  ipAddress         String?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider, sessionContext])
  @@map("oauth_sessions")
}

model MLFeedback {
  id          String   @id @default(cuid())
  
  // Feedback details
  feedbackType MLFeedbackType
  confidence  Float? // Original AI confidence
  userAction  String // confirm, ignore, reclassify
  
  // Context
  emailContent String?
  detectedPatterns Json? // Patterns that triggered the flag
  correctCategory FlaggedItemCategory?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relations - can link to flagged item for reference
  flaggedItemId String?
  projectId   String
  
  @@map("ml_feedback")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  email       String
  role        TeamMemberRole
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("team_members")
}

// Enums
enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum FlaggedItemCategory {
  COST
  SCHEDULE
  SCOPE
  UNCLASSIFIED
}

enum FlaggedItemStatus {
  PENDING
  REVIEWED
  CONFIRMED
  IGNORED
  EMAIL_SENT
}

enum TimelineCategory {
  COST
  SCHEDULE
  SCOPE
  ISSUE
  UPDATE
}

enum MLFeedbackType {
  POSITIVE    // Correct detection and classification
  NEGATIVE    // False positive
  RECLASSIFY  // Wrong category but valid detection
  CLASSIFY    // User classified unclassified item
}

enum TeamMemberRole {
  GENERAL_CONTRACTOR
  ARCHITECT_DESIGNER
  PROJECT_MANAGER
}
